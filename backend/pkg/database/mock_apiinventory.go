// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/apiclarity/backend/pkg/database (interfaces: APIInventoryTable)

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/openclarity/apiclarity/api/server/models"
	operations "github.com/openclarity/apiclarity/api/server/restapi/operations"
)

// MockAPIInventoryTable is a mock of APIInventoryTable interface.
type MockAPIInventoryTable struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInventoryTableMockRecorder
}

// MockAPIInventoryTableMockRecorder is the mock recorder for MockAPIInventoryTable.
type MockAPIInventoryTableMockRecorder struct {
	mock *MockAPIInventoryTable
}

// NewMockAPIInventoryTable creates a new mock instance.
func NewMockAPIInventoryTable(ctrl *gomock.Controller) *MockAPIInventoryTable {
	mock := &MockAPIInventoryTable{ctrl: ctrl}
	mock.recorder = &MockAPIInventoryTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInventoryTable) EXPECT() *MockAPIInventoryTableMockRecorder {
	return m.recorder
}

// CreateAPIInfo mocks base method.
func (m *MockAPIInventoryTable) CreateAPIInfo(arg0 *APIInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAPIInfo", arg0)
}

// CreateAPIInfo indicates an expected call of CreateAPIInfo.
func (mr *MockAPIInventoryTableMockRecorder) CreateAPIInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIInfo", reflect.TypeOf((*MockAPIInventoryTable)(nil).CreateAPIInfo), arg0)
}

// DeleteApprovedAPISpec mocks base method.
func (m *MockAPIInventoryTable) DeleteApprovedAPISpec(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApprovedAPISpec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApprovedAPISpec indicates an expected call of DeleteApprovedAPISpec.
func (mr *MockAPIInventoryTableMockRecorder) DeleteApprovedAPISpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApprovedAPISpec", reflect.TypeOf((*MockAPIInventoryTable)(nil).DeleteApprovedAPISpec), arg0)
}

// DeleteProvidedAPISpec mocks base method.
func (m *MockAPIInventoryTable) DeleteProvidedAPISpec(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvidedAPISpec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvidedAPISpec indicates an expected call of DeleteProvidedAPISpec.
func (mr *MockAPIInventoryTableMockRecorder) DeleteProvidedAPISpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvidedAPISpec", reflect.TypeOf((*MockAPIInventoryTable)(nil).DeleteProvidedAPISpec), arg0)
}

// First mocks base method.
func (m *MockAPIInventoryTable) First(arg0 *APIInfo, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockAPIInventoryTableMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockAPIInventoryTable)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockAPIInventoryTable) FirstOrCreate(arg0 *APIInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreate", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockAPIInventoryTableMockRecorder) FirstOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockAPIInventoryTable)(nil).FirstOrCreate), arg0)
}

// GetAPIID mocks base method.
func (m *MockAPIInventoryTable) GetAPIID(arg0, arg1 string, arg2 *uuid.UUID) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIID", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIID indicates an expected call of GetAPIID.
func (mr *MockAPIInventoryTableMockRecorder) GetAPIID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIID", reflect.TypeOf((*MockAPIInventoryTable)(nil).GetAPIID), arg0, arg1, arg2)
}

// GetAPIInventoryAndTotal mocks base method.
func (m *MockAPIInventoryTable) GetAPIInventoryAndTotal(arg0 operations.GetAPIInventoryParams) ([]APIInfo, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInventoryAndTotal", arg0)
	ret0, _ := ret[0].([]APIInfo)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAPIInventoryAndTotal indicates an expected call of GetAPIInventoryAndTotal.
func (mr *MockAPIInventoryTableMockRecorder) GetAPIInventoryAndTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInventoryAndTotal", reflect.TypeOf((*MockAPIInventoryTable)(nil).GetAPIInventoryAndTotal), arg0)
}

// GetAPISpecs mocks base method.
func (m *MockAPIInventoryTable) GetAPISpecs(arg0 uint32) (*APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPISpecs", arg0)
	ret0, _ := ret[0].(*APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPISpecs indicates an expected call of GetAPISpecs.
func (mr *MockAPIInventoryTableMockRecorder) GetAPISpecs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPISpecs", reflect.TypeOf((*MockAPIInventoryTable)(nil).GetAPISpecs), arg0)
}

// GetAPISpecsInfo mocks base method.
func (m *MockAPIInventoryTable) GetAPISpecsInfo(arg0 uint32) (*models.OpenAPISpecs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPISpecsInfo", arg0)
	ret0, _ := ret[0].(*models.OpenAPISpecs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPISpecsInfo indicates an expected call of GetAPISpecsInfo.
func (mr *MockAPIInventoryTableMockRecorder) GetAPISpecsInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPISpecsInfo", reflect.TypeOf((*MockAPIInventoryTable)(nil).GetAPISpecsInfo), arg0)
}

// PutAPISpec mocks base method.
func (m *MockAPIInventoryTable) PutAPISpec(arg0 uint, arg1 string, arg2 *models.SpecInfo, arg3 specType, arg4 strfmt.DateTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAPISpec", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAPISpec indicates an expected call of PutAPISpec.
func (mr *MockAPIInventoryTableMockRecorder) PutAPISpec(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAPISpec", reflect.TypeOf((*MockAPIInventoryTable)(nil).PutAPISpec), arg0, arg1, arg2, arg3, arg4)
}
