// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/apiclarity/backend/pkg/database (interfaces: LabelsTable)

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLabelsTable is a mock of LabelsTable interface.
type MockLabelsTable struct {
	ctrl     *gomock.Controller
	recorder *MockLabelsTableMockRecorder
}

// MockLabelsTableMockRecorder is the mock recorder for MockLabelsTable.
type MockLabelsTableMockRecorder struct {
	mock *MockLabelsTable
}

// NewMockLabelsTable creates a new mock instance.
func NewMockLabelsTable(ctrl *gomock.Controller) *MockLabelsTable {
	mock := &MockLabelsTable{ctrl: ctrl}
	mock.recorder = &MockLabelsTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLabelsTable) EXPECT() *MockLabelsTableMockRecorder {
	return m.recorder
}

// CreateLabels mocks base method.
func (m *MockLabelsTable) CreateLabels(arg0 context.Context, arg1 uint, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabels", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabels indicates an expected call of CreateLabels.
func (mr *MockLabelsTableMockRecorder) CreateLabels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabels", reflect.TypeOf((*MockLabelsTable)(nil).CreateLabels), arg0, arg1, arg2)
}

// DeleteLabels mocks base method.
func (m *MockLabelsTable) DeleteLabels(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabels", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabels indicates an expected call of DeleteLabels.
func (mr *MockLabelsTableMockRecorder) DeleteLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabels", reflect.TypeOf((*MockLabelsTable)(nil).DeleteLabels), arg0, arg1)
}

// GetLabels mocks base method.
func (m *MockLabelsTable) GetLabels(arg0 context.Context, arg1 uint) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockLabelsTableMockRecorder) GetLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockLabelsTable)(nil).GetLabels), arg0, arg1)
}

// GetLabelsMatching mocks base method.
func (m *MockLabelsTable) GetLabelsMatching(arg0 context.Context, arg1, arg2 string) ([]Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsMatching", arg0, arg1, arg2)
	ret0, _ := ret[0].([]Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsMatching indicates an expected call of GetLabelsMatching.
func (mr *MockLabelsTableMockRecorder) GetLabelsMatching(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsMatching", reflect.TypeOf((*MockLabelsTable)(nil).GetLabelsMatching), arg0, arg1, arg2)
}
