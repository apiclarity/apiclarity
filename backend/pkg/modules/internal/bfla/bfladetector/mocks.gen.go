// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/apiclarity/backend/pkg/modules/internal/bfla/bfladetector (interfaces: EventAlerter)

// Package bfladetector is a generated GoMock package.
package bfladetector

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/openclarity/apiclarity/backend/pkg/modules/internal/core"
)

// MockEventAlerter is a mock of EventAlerter interface.
type MockEventAlerter struct {
	ctrl     *gomock.Controller
	recorder *MockEventAlerterMockRecorder
}

// MockEventAlerterMockRecorder is the mock recorder for MockEventAlerter.
type MockEventAlerterMockRecorder struct {
	mock *MockEventAlerter
}

// NewMockEventAlerter creates a new mock instance.
func NewMockEventAlerter(ctrl *gomock.Controller) *MockEventAlerter {
	mock := &MockEventAlerter{ctrl: ctrl}
	mock.recorder = &MockEventAlerterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventAlerter) EXPECT() *MockEventAlerterMockRecorder {
	return m.recorder
}

// SetEventAlert mocks base method.
func (m *MockEventAlerter) SetEventAlert(arg0 context.Context, arg1 string, arg2 uint, arg3 core.AlertSeverity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventAlert indicates an expected call of SetEventAlert.
func (mr *MockEventAlerterMockRecorder) SetEventAlert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventAlert", reflect.TypeOf((*MockEventAlerter)(nil).SetEventAlert), arg0, arg1, arg2, arg3)
}
