// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apiclarity/apiclarity/backend/pkg/modules/internal/bfla/bfladetector (interfaces: OpenAPIProvider,EventAlerter)

// Package bfladetector is a generated GoMock package.
package bfladetector

import (
	context "context"
	io "io"
	reflect "reflect"

	core "github.com/apiclarity/apiclarity/backend/pkg/modules/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockOpenAPIProvider is a mock of OpenAPIProvider interface.
type MockOpenAPIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAPIProviderMockRecorder
}

// MockOpenAPIProviderMockRecorder is the mock recorder for MockOpenAPIProvider.
type MockOpenAPIProviderMockRecorder struct {
	mock *MockOpenAPIProvider
}

// NewMockOpenAPIProvider creates a new mock instance.
func NewMockOpenAPIProvider(ctrl *gomock.Controller) *MockOpenAPIProvider {
	mock := &MockOpenAPIProvider{ctrl: ctrl}
	mock.recorder = &MockOpenAPIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAPIProvider) EXPECT() *MockOpenAPIProviderMockRecorder {
	return m.recorder
}

// GetOpenAPI mocks base method.
func (m *MockOpenAPIProvider) GetOpenAPI(arg0 context.Context, arg1 uint) (io.Reader, SpecType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenAPI", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(SpecType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOpenAPI indicates an expected call of GetOpenAPI.
func (mr *MockOpenAPIProviderMockRecorder) GetOpenAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenAPI", reflect.TypeOf((*MockOpenAPIProvider)(nil).GetOpenAPI), arg0, arg1)
}

// MockEventAlerter is a mock of EventAlerter interface.
type MockEventAlerter struct {
	ctrl     *gomock.Controller
	recorder *MockEventAlerterMockRecorder
}

// MockEventAlerterMockRecorder is the mock recorder for MockEventAlerter.
type MockEventAlerterMockRecorder struct {
	mock *MockEventAlerter
}

// NewMockEventAlerter creates a new mock instance.
func NewMockEventAlerter(ctrl *gomock.Controller) *MockEventAlerter {
	mock := &MockEventAlerter{ctrl: ctrl}
	mock.recorder = &MockEventAlerterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventAlerter) EXPECT() *MockEventAlerterMockRecorder {
	return m.recorder
}

// SetEventAlert mocks base method.
func (m *MockEventAlerter) SetEventAlert(arg0 context.Context, arg1 string, arg2 uint, arg3 core.AlertSeverity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventAlert indicates an expected call of SetEventAlert.
func (mr *MockEventAlerterMockRecorder) SetEventAlert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventAlert", reflect.TypeOf((*MockEventAlerter)(nil).SetEventAlert), arg0, arg1, arg2, arg3)
}
