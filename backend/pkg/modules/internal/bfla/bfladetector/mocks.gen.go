// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apiclarity/apiclarity/backend/pkg/modules/internal/bfla/bfladetector (interfaces: EventAlerter,APIInfoProvider)

// Package bfladetector is a generated GoMock package.
package bfladetector

import (
	context "context"
	reflect "reflect"

	database "github.com/apiclarity/apiclarity/backend/pkg/database"
	core "github.com/apiclarity/apiclarity/backend/pkg/modules/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockEventAlerter is a mock of EventAlerter interface.
type MockEventAlerter struct {
	ctrl     *gomock.Controller
	recorder *MockEventAlerterMockRecorder
}

// MockEventAlerterMockRecorder is the mock recorder for MockEventAlerter.
type MockEventAlerterMockRecorder struct {
	mock *MockEventAlerter
}

// NewMockEventAlerter creates a new mock instance.
func NewMockEventAlerter(ctrl *gomock.Controller) *MockEventAlerter {
	mock := &MockEventAlerter{ctrl: ctrl}
	mock.recorder = &MockEventAlerterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventAlerter) EXPECT() *MockEventAlerterMockRecorder {
	return m.recorder
}

// SetEventAlert mocks base method.
func (m *MockEventAlerter) SetEventAlert(arg0 context.Context, arg1 string, arg2 uint, arg3 core.AlertSeverity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventAlert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventAlert indicates an expected call of SetEventAlert.
func (mr *MockEventAlerterMockRecorder) SetEventAlert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventAlert", reflect.TypeOf((*MockEventAlerter)(nil).SetEventAlert), arg0, arg1, arg2, arg3)
}

// MockAPIInfoProvider is a mock of APIInfoProvider interface.
type MockAPIInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInfoProviderMockRecorder
}

// MockAPIInfoProviderMockRecorder is the mock recorder for MockAPIInfoProvider.
type MockAPIInfoProviderMockRecorder struct {
	mock *MockAPIInfoProvider
}

// NewMockAPIInfoProvider creates a new mock instance.
func NewMockAPIInfoProvider(ctrl *gomock.Controller) *MockAPIInfoProvider {
	mock := &MockAPIInfoProvider{ctrl: ctrl}
	mock.recorder = &MockAPIInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInfoProvider) EXPECT() *MockAPIInfoProviderMockRecorder {
	return m.recorder
}

// GetAPIInfo mocks base method.
func (m *MockAPIInfoProvider) GetAPIInfo(arg0 context.Context, arg1 uint) (*database.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfo", arg0, arg1)
	ret0, _ := ret[0].(*database.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfo indicates an expected call of GetAPIInfo.
func (mr *MockAPIInfoProviderMockRecorder) GetAPIInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfo", reflect.TypeOf((*MockAPIInfoProvider)(nil).GetAPIInfo), arg0, arg1)
}
