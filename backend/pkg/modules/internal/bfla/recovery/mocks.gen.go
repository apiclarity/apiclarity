// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openclarity/apiclarity/backend/pkg/modules/internal/bfla/recovery (interfaces: StatePersister)

// Package recovery is a generated GoMock package.
package recovery

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatePersister is a mock of StatePersister interface.
type MockStatePersister struct {
	ctrl     *gomock.Controller
	recorder *MockStatePersisterMockRecorder
}

// MockStatePersisterMockRecorder is the mock recorder for MockStatePersister.
type MockStatePersisterMockRecorder struct {
	mock *MockStatePersister
}

// NewMockStatePersister creates a new mock instance.
func NewMockStatePersister(ctrl *gomock.Controller) *MockStatePersister {
	mock := &MockStatePersister{ctrl: ctrl}
	mock.recorder = &MockStatePersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatePersister) EXPECT() *MockStatePersisterMockRecorder {
	return m.recorder
}

// AckSubmit mocks base method.
func (m *MockStatePersister) AckSubmit(arg0 uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AckSubmit", arg0)
}

// AckSubmit indicates an expected call of AckSubmit.
func (mr *MockStatePersisterMockRecorder) AckSubmit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckSubmit", reflect.TypeOf((*MockStatePersister)(nil).AckSubmit), arg0)
}

// Keys mocks base method.
func (m *MockStatePersister) Keys(arg0 string) []uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", arg0)
	ret0, _ := ret[0].([]uint)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockStatePersisterMockRecorder) Keys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockStatePersister)(nil).Keys), arg0)
}

// Persist mocks base method.
func (m *MockStatePersister) Persist(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockStatePersisterMockRecorder) Persist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockStatePersister)(nil).Persist), arg0)
}

// UseState mocks base method.
func (m *MockStatePersister) UseState(arg0 uint, arg1 string, arg2 interface{}) (SetState, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseState", arg0, arg1, arg2)
	ret0, _ := ret[0].(SetState)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UseState indicates an expected call of UseState.
func (mr *MockStatePersisterMockRecorder) UseState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseState", reflect.TypeOf((*MockStatePersister)(nil).UseState), arg0, arg1, arg2)
}
