// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/openclarity/apiclarity/api3/common"
)

// Defines values for AuthorizationTypeEnum.
const (
	APITOKEN    AuthorizationTypeEnum = "APITOKEN"
	BASICAUTH   AuthorizationTypeEnum = "BASICAUTH"
	BEARERTOKEN AuthorizationTypeEnum = "BEARERTOKEN"
)

// Defines values for FuzzingStatusEnum.
const (
	DONE       FuzzingStatusEnum = "DONE"
	ERROR      FuzzingStatusEnum = "ERROR"
	INPROGRESS FuzzingStatusEnum = "IN_PROGRESS"
)

// Defines values for RawFindingsSourceEnum.
const (
	APIFUZZER        RawFindingsSourceEnum = "API_FUZZER"
	BITSIGHT         RawFindingsSourceEnum = "BITSIGHT"
	GRPCANALYZER     RawFindingsSourceEnum = "GRPC_ANALYZER"
	OASANALYSER      RawFindingsSourceEnum = "OAS_ANALYSER"
	OASTRACEANALYZER RawFindingsSourceEnum = "OAS_TRACE_ANALYZER"
	OPENDNS          RawFindingsSourceEnum = "OPENDNS"
	TALOS            RawFindingsSourceEnum = "TALOS"
)

// Defines values for ScoreExitStatusEnum.
const (
	GENERICFAILURE ScoreExitStatusEnum = "GENERIC_FAILURE"
	NETWORKFAILURE ScoreExitStatusEnum = "NETWORK_FAILURE"
	PARSEERROR     ScoreExitStatusEnum = "PARSE_ERROR"
	SUCCESS        ScoreExitStatusEnum = "SUCCESS"
	TOOLONG        ScoreExitStatusEnum = "TOO_LONG"
)

// Defines values for TestInputDepthEnum.
const (
	DEEP    TestInputDepthEnum = "DEEP"
	DEFAULT TestInputDepthEnum = "DEFAULT"
	QUICK   TestInputDepthEnum = "QUICK"
)

// ApiToken defines model for ApiToken.
type ApiToken struct {
	Key string `json:"key"`

	// An enumeration for the authorization type parameter.
	Type  AuthorizationTypeEnum `json:"type"`
	Value string                `json:"value"`
}

// AuthorizationScheme defines model for AuthorizationScheme.
type AuthorizationScheme struct {
	union json.RawMessage
}

// AuthorizationSchemeBase defines model for AuthorizationSchemeBase.
type AuthorizationSchemeBase struct {
	// An enumeration for the authorization type parameter.
	Type AuthorizationTypeEnum `json:"type"`
}

// An enumeration for the authorization type parameter.
type AuthorizationTypeEnum string

// BasicAuth defines model for BasicAuth.
type BasicAuth struct {
	Password string `json:"password"`

	// An enumeration for the authorization type parameter.
	Type     AuthorizationTypeEnum `json:"type"`
	Username string                `json:"username"`
}

// BearerToken defines model for BearerToken.
type BearerToken struct {
	Token string `json:"token"`

	// An enumeration for the authorization type parameter.
	Type AuthorizationTypeEnum `json:"type"`
}

// Finding defines model for Finding.
type Finding struct {
	// description of the finding
	Description *string `json:"description,omitempty"`

	// Name of the finding
	Name *string `json:"name,omitempty"`

	// risk of the finding
	Risk *string `json:"risk,omitempty"`
}

// Findings defines model for Findings.
type Findings struct {
	Items *[]Finding `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Current fuzzer report
type FuzzingReportItem struct {
	Description *string `json:"description,omitempty"`

	// List of paths that has been fuzzed
	Findings *[]RawFindings `json:"findings,omitempty"`
	Name     *string        `json:"name,omitempty"`

	// List of paths that has been fuzzed
	Paths    *[]FuzzingReportPath `json:"paths,omitempty"`
	Source   *string              `json:"source,omitempty"`
	Status   *string              `json:"status,omitempty"`
	TestType *string              `json:"testType,omitempty"`
}

// Report tag operation
type FuzzingReportOperation struct {
	Findings *[]externalRef0.APIFinding `json:"findings,omitempty"`

	// Severity of a finding
	HighestSeverity *externalRef0.Severity     `json:"highestSeverity,omitempty"`
	Operation       externalRef0.MethodAndPath `json:"operation"`

	// Request count to this operation item during the test
	RequestsCount int32 `json:"requestsCount"`
}

// Current fuzzer report
type FuzzingReportPath struct {
	Payload  *string `json:"payload,omitempty"`
	Response *string `json:"response,omitempty"`
	Result   *int    `json:"result,omitempty"`
	Uri      *string `json:"uri,omitempty"`
	Verb     *string `json:"verb,omitempty"`
}

// Report tag item
type FuzzingReportTag struct {
	// Severity of a finding
	HighestSeverity *externalRef0.Severity `json:"highestSeverity,omitempty"`

	// Tag name
	Name       string                   `json:"name"`
	Operations []FuzzingReportOperation `json:"operations"`
}

// fuzzing status and reporting
type FuzzingStatusAndReport struct {
	Progress int `json:"progress"`

	// List of report item
	Report map[string]FuzzingReportItem `json:"report"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`
}

// An enumeration.
type FuzzingStatusEnum string

// RawFindings defines model for RawFindings.
type RawFindings struct {
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Description    *string `json:"description,omitempty"`

	// location string token
	Location  *[]string            `json:"location,omitempty"`
	Namespace *string              `json:"namespace,omitempty"`
	Request   *RawFindingsSeverity `json:"request,omitempty"`
	Type      *string              `json:"type,omitempty"`
}

// RawFindingsBundle defines model for RawFindingsBundle.
type RawFindingsBundle struct {
	// Opaque data structure for the raw finding
	Data string `json:"data"`

	// An enumeration.
	Source RawFindingsSourceEnum `json:"source"`

	// An enumeration.
	Status ScoreExitStatusEnum `json:"status"`

	// Message giving details about the exist status
	StatusMessage *string `json:"status_message,omitempty"`

	// Raw finding timestamp format= date-time
	Timestamp string `json:"timestamp"`
}

// RawFindingsSeverity defines model for RawFindingsSeverity.
type RawFindingsSeverity struct {
	Severity *string `json:"severity,omitempty"`
}

// An enumeration.
type RawFindingsSourceEnum string

// An enumeration.
type ScoreExitStatusEnum string

// Describes the progress of an ongoing test
type ShortTestProgress struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Progress of the test
	Progress int `json:"progress"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`
}

// Short Test Report
type ShortTestReport struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Severity of a finding
	HighestSeverity *externalRef0.Severity `json:"highestSeverity,omitempty"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`

	// Message for status details, if any
	StatusMessage *string             `json:"statusMessage,omitempty"`
	Tags          *[]FuzzingReportTag `json:"tags,omitempty"`
}

// Test defines model for Test.
type Test struct {
	// A message in case of error
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestHandle defines model for TestHandle.
type TestHandle struct {
	ApiID     *externalRef0.ApiID `json:"apiID,omitempty"`
	Timestamp *int64              `json:"timestamp,omitempty"`
}

// contains all input parameters for a test
type TestInput struct {
	Auth *AuthorizationScheme `json:"auth,omitempty"`

	// An enumeration for input depth parameter.
	Depth TestInputDepthEnum `json:"depth"`
}

// An enumeration for input depth parameter.
type TestInputDepthEnum string

// TestProgressNotification defines model for TestProgressNotification.
type TestProgressNotification struct {
	ApiID            *externalRef0.ApiID `json:"apiID,omitempty"`
	NotificationType string              `json:"notificationType"`

	// Progress of the test
	Progress int `json:"progress"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`
}

// TestReportNotification defines model for TestReportNotification.
type TestReportNotification struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Severity of a finding
	HighestSeverity  *externalRef0.Severity `json:"highestSeverity,omitempty"`
	NotificationType string                 `json:"notificationType"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`

	// Message for status details, if any
	StatusMessage *string             `json:"statusMessage,omitempty"`
	Tags          *[]FuzzingReportTag `json:"tags,omitempty"`
}

// TestWithReport defines model for TestWithReport.
type TestWithReport struct {
	// A message in case of error
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Timestamp of the last report received for the test
	LastReportTime *int64 `json:"lastReportTime,omitempty"`

	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// fuzzing status and reporting
	Report *FuzzingStatusAndReport `json:"report,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestingModuleState defines model for TestingModuleState.
type TestingModuleState struct {
	APIsInCache int    `json:"APIsInCache"`
	Version     string `json:"version"`
}

// Tests defines model for Tests.
type Tests struct {
	Items *[]Test `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// risk of the finding
type Vulnerabilities struct {
	// Total of vuln
	Critical *int `json:"critical,omitempty"`

	// Total of vuln
	High *int `json:"high,omitempty"`

	// Total of vuln
	Low *int `json:"low,omitempty"`

	// Total of vuln
	Medium *int `json:"medium,omitempty"`

	// Total of vuln
	Total *int `json:"total,omitempty"`
}

// GetAPIFindingsParams defines parameters for GetAPIFindings.
type GetAPIFindingsParams struct {
	// Should findings include sensitive data ?
	Sensitive *externalRef0.Sensitive `form:"sensitive,omitempty" json:"sensitive,omitempty"`
}

// StartTestJSONBody defines parameters for StartTest.
type StartTestJSONBody = TestInput

// PostUpdateStatusJSONBody defines parameters for PostUpdateStatus.
type PostUpdateStatusJSONBody = FuzzingStatusAndReport

// StartTestJSONRequestBody defines body for StartTest for application/json ContentType.
type StartTestJSONRequestBody = StartTestJSONBody

// PostUpdateStatusJSONRequestBody defines body for PostUpdateStatus for application/json ContentType.
type PostUpdateStatusJSONRequestBody = PostUpdateStatusJSONBody

func (t AuthorizationScheme) AsBasicAuth() (BasicAuth, error) {
	var body BasicAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromBasicAuth(v BasicAuth) error {
	v.Type = "BasicAuth"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) AsApiToken() (ApiToken, error) {
	var body ApiToken
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromApiToken(v ApiToken) error {
	v.Type = "ApiToken"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) AsBearerToken() (BearerToken, error) {
	var body BearerToken
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromBearerToken(v BearerToken) error {
	v.Type = "BearerToken"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthorizationScheme) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ApiToken":
		return t.AsApiToken()
	case "BasicAuth":
		return t.AsBasicAuth()
	case "BearerToken":
		return t.AsBearerToken()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthorizationScheme) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthorizationScheme) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retreive the annotated spec for an API
	// (GET /annotatedspec/{apiID})
	GetAnnotatedSpec(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get findings for an API and module
	// (GET /apiFindings/{apiID})
	GetAPIFindings(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params GetAPIFindingsParams)
	// Start a test for an API
	// (GET /fuzz/{apiID}/progress)
	GetTestProgress(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Start a test for an API
	// (GET /fuzz/{apiID}/report)
	GetTestReport(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Start a test for an API
	// (POST /fuzz/{apiID}/start)
	StartTest(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Stop (cancel) a running test for an API
	// (POST /fuzz/{apiID}/stop)
	StopTest(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Retreive a report for an API
	// (GET /report/{apiID}/{timestamp})
	GetReport(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, timestamp int64)
	// Get the current running state of this module
	// (GET /state)
	GetState(w http.ResponseWriter, r *http.Request)
	// Retreive the list of tests for an API
	// (GET /tests/{apiID})
	GetTests(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Retreive last update status for an API under fuzzing
	// (GET /updateStatus/{apiID})
	GetUpdateStatus(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Update status for an API under fuzzing
	// (POST /updateStatus/{apiID})
	PostUpdateStatus(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get the version of this Module
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAnnotatedSpec operation middleware
func (siw *ServerInterfaceWrapper) GetAnnotatedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnnotatedSpec(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAPIFindings operation middleware
func (siw *ServerInterfaceWrapper) GetAPIFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIFindingsParams

	// ------------- Optional query parameter "sensitive" -------------
	if paramValue := r.URL.Query().Get("sensitive"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sensitive", r.URL.Query(), &params.Sensitive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sensitive", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAPIFindings(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTestProgress operation middleware
func (siw *ServerInterfaceWrapper) GetTestProgress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTestProgress(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTestReport operation middleware
func (siw *ServerInterfaceWrapper) GetTestReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTestReport(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StartTest operation middleware
func (siw *ServerInterfaceWrapper) StartTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartTest(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StopTest operation middleware
func (siw *ServerInterfaceWrapper) StopTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopTest(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetReport operation middleware
func (siw *ServerInterfaceWrapper) GetReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// ------------- Path parameter "timestamp" -------------
	var timestamp int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, chi.URLParam(r, "timestamp"), &timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReport(w, r, apiID, timestamp)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetState operation middleware
func (siw *ServerInterfaceWrapper) GetState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetState(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTests operation middleware
func (siw *ServerInterfaceWrapper) GetTests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTests(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) GetUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUpdateStatus(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) PostUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpdateStatus(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/annotatedspec/{apiID}", wrapper.GetAnnotatedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiFindings/{apiID}", wrapper.GetAPIFindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fuzz/{apiID}/progress", wrapper.GetTestProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fuzz/{apiID}/report", wrapper.GetTestReport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fuzz/{apiID}/start", wrapper.StartTest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fuzz/{apiID}/stop", wrapper.StopTest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/report/{apiID}/{timestamp}", wrapper.GetReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/state", wrapper.GetState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tests/{apiID}", wrapper.GetTests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/updateStatus/{apiID}", wrapper.GetUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/updateStatus/{apiID}", wrapper.PostUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../../../../../api3/common/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
