// Package fuzzer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package restapi

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Defines values for FuzzingStatus.
const (
	FuzzingStatusDONE FuzzingStatus = "DONE"

	FuzzingStatusERROR FuzzingStatus = "ERROR"

	FuzzingStatusINPROGRESS FuzzingStatus = "IN_PROGRESS"
)

// Defines values for RawFindingsSource.
const (
	RawFindingsSourceAPIFUZZER RawFindingsSource = "API_FUZZER"

	RawFindingsSourceBITSIGHT RawFindingsSource = "BITSIGHT"

	RawFindingsSourceGRPCANALYZER RawFindingsSource = "GRPC_ANALYZER"

	RawFindingsSourceOASANALYSER RawFindingsSource = "OAS_ANALYSER"

	RawFindingsSourceOASTRACEANALYZER RawFindingsSource = "OAS_TRACE_ANALYZER"

	RawFindingsSourceOPENDNS RawFindingsSource = "OPENDNS"

	RawFindingsSourceTALOS RawFindingsSource = "TALOS"
)

// Defines values for ScoreExitStatusEnum.
const (
	ScoreExitStatusEnumGENERICFAILURE ScoreExitStatusEnum = "GENERIC_FAILURE"

	ScoreExitStatusEnumNETWORKFAILURE ScoreExitStatusEnum = "NETWORK_FAILURE"

	ScoreExitStatusEnumPARSEERROR ScoreExitStatusEnum = "PARSE_ERROR"

	ScoreExitStatusEnumSUCCESS ScoreExitStatusEnum = "SUCCESS"

	ScoreExitStatusEnumTOOLONG ScoreExitStatusEnum = "TOO_LONG"
)

// Finding defines model for Finding.
type Finding struct {
	// description of the finding
	Description *string `json:"description,omitempty"`

	// Name of the finding
	Name *string `json:"name,omitempty"`

	// risk of the finding
	Risk *string `json:"risk,omitempty"`
}

// Findings defines model for Findings.
type Findings struct {
	Items *[]Finding `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Current fuzzer report
type FuzzingReportItem struct {
	Description *string `json:"description,omitempty"`

	// List of paths that has been fuzzed
	Findings *[]RawFindings `json:"findings,omitempty"`
	Name     *string        `json:"name,omitempty"`

	// List of paths that has been fuzzed
	Paths    *[]FuzzingReportPath `json:"paths,omitempty"`
	Source   *string              `json:"source,omitempty"`
	Status   *string              `json:"status,omitempty"`
	TestType *string              `json:"testType,omitempty"`
}

// Current fuzzer report
type FuzzingReportPath struct {
	Payload  *string `json:"payload,omitempty"`
	Response *string `json:"response,omitempty"`
	Result   *int    `json:"result,omitempty"`
	Uri      *string `json:"uri,omitempty"`
	Verb     *string `json:"verb,omitempty"`
}

// An enumeration.
type FuzzingStatus string

// fuzzing status and reporting
type FuzzingStatusAndReport struct {
	Progress int `json:"progress"`

	// List of report item
	Report FuzzingStatusAndReport_Report `json:"report"`

	// An enumeration.
	Status FuzzingStatus `json:"status"`
}

// List of report item
type FuzzingStatusAndReport_Report struct {
	AdditionalProperties map[string]FuzzingReportItem `json:"-"`
}

// RawFindings defines model for RawFindings.
type RawFindings struct {
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Description    *string `json:"description,omitempty"`

	// location string token
	Location  *[]string            `json:"location,omitempty"`
	Namespace *string              `json:"namespace,omitempty"`
	Request   *RawFindingsSeverity `json:"request,omitempty"`
	Type      *string              `json:"type,omitempty"`
}

// RawFindingsBundle defines model for RawFindingsBundle.
type RawFindingsBundle struct {
	// Opaque data structure for the raw finding
	Data string `json:"data"`

	// An enumeration.
	Source RawFindingsSource `json:"source"`

	// An enumeration.
	Status ScoreExitStatusEnum `json:"status"`

	// Message giving details about the exist status
	StatusMessage *string `json:"status_message,omitempty"`

	// Raw finding timestamp format= date-time
	Timestamp string `json:"timestamp"`
}

// RawFindingsSeverity defines model for RawFindingsSeverity.
type RawFindingsSeverity struct {
	Severity *string `json:"severity,omitempty"`
}

// An enumeration.
type RawFindingsSource string

// An enumeration.
type ScoreExitStatusEnum string

// Test defines model for Test.
type Test struct {
	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestWithReport defines model for TestWithReport.
type TestWithReport struct {
	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// fuzzing status and reporting
	Report *FuzzingStatusAndReport `json:"report,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestingModuleState defines model for TestingModuleState.
type TestingModuleState struct {
	APIsInCache int    `json:"APIsInCache"`
	Version     string `json:"version"`
}

// Tests defines model for Tests.
type Tests struct {
	Items *[]Test `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// risk of the finding
type Vulnerabilities struct {
	// Total of vuln
	Critical *int `json:"critical,omitempty"`

	// Total of vuln
	High *int `json:"high,omitempty"`

	// Total of vuln
	Low *int `json:"low,omitempty"`

	// Total of vuln
	Medium *int `json:"medium,omitempty"`

	// Total of vuln
	Total *int `json:"total,omitempty"`
}

// FuzzTargetParams defines parameters for FuzzTarget.
type FuzzTargetParams struct {
	// service for the service to test
	Service *string `json:"service,omitempty"`

	// type of auth
	Type *string `json:"type,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// password
	Password *string `json:"password,omitempty"`

	// key
	Key *string `json:"key,omitempty"`

	// value for key
	Value *string `json:"value,omitempty"`

	// token
	Token *string `json:"token,omitempty"`
}

// PostRawfindingsJSONBody defines parameters for PostRawfindings.
type PostRawfindingsJSONBody RawFindingsBundle

// PostUpdateStatusJSONBody defines parameters for PostUpdateStatus.
type PostUpdateStatusJSONBody FuzzingStatusAndReport

// PostRawfindingsJSONRequestBody defines body for PostRawfindings for application/json ContentType.
type PostRawfindingsJSONRequestBody PostRawfindingsJSONBody

// PostUpdateStatusJSONRequestBody defines body for PostUpdateStatus for application/json ContentType.
type PostUpdateStatusJSONRequestBody PostUpdateStatusJSONBody

// Getter for additional properties for FuzzingStatusAndReport_Report. Returns the specified
// element and whether it was found
func (a FuzzingStatusAndReport_Report) Get(fieldName string) (value FuzzingReportItem, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FuzzingStatusAndReport_Report
func (a *FuzzingStatusAndReport_Report) Set(fieldName string, value FuzzingReportItem) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]FuzzingReportItem)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FuzzingStatusAndReport_Report to handle AdditionalProperties
func (a *FuzzingStatusAndReport_Report) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]FuzzingReportItem)
		for fieldName, fieldBuf := range object {
			var fieldVal FuzzingReportItem
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FuzzingStatusAndReport_Report to handle AdditionalProperties
func (a FuzzingStatusAndReport_Report) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retreive the annotated spec for an API if any, Not Found otherwise
	// (GET /annotatedspec/{apiId})
	GetAnnotatedSpec(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Retreive list of findings for an API
	// (GET /findings/{apiId})
	GetFindings(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Fuzz a Target
	// (GET /fuzz/{apiId})
	FuzzTarget(w http.ResponseWriter, r *http.Request, apiId uint32, params FuzzTargetParams)
	// Retreive list of findings for an API
	// (GET /rawfindings/{apiId})
	GetRawfindings(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Receive list of raw findings for an API
	// (POST /rawfindings/{apiId})
	PostRawfindings(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Retreive the list of tests for an API
	// (GET /report/{apiId}/{timestamp})
	GetReport(w http.ResponseWriter, r *http.Request, apiId uint32, timestamp int64)
	// Get the current running state of this module
	// (GET /state)
	GetState(w http.ResponseWriter, r *http.Request)
	// Retreive the list of tests for an API, without details
	// (GET /tests/{apiId})
	GetTests(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Update status for an API under fuzzing
	// (GET /updateStatus/{apiId})
	GetUpdateStatus(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Update status for an API under fuzzing
	// (POST /updateStatus/{apiId})
	PostUpdateStatus(w http.ResponseWriter, r *http.Request, apiId uint32)
	// Get the version of this Plugin
	// (GET /version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAnnotatedSpec operation middleware
func (siw *ServerInterfaceWrapper) GetAnnotatedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAnnotatedSpec(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetFindings operation middleware
func (siw *ServerInterfaceWrapper) GetFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFindings(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FuzzTarget operation middleware
func (siw *ServerInterfaceWrapper) FuzzTarget(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params FuzzTargetParams

	// ------------- Optional query parameter "service" -------------
	if paramValue := r.URL.Query().Get("service"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "service", r.URL.Query(), &params.Service)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "username" -------------
	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------
	if paramValue := r.URL.Query().Get("password"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	// ------------- Optional query parameter "key" -------------
	if paramValue := r.URL.Query().Get("key"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Optional query parameter "value" -------------
	if paramValue := r.URL.Query().Get("value"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "value", r.URL.Query(), &params.Value)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "value", Err: err})
		return
	}

	// ------------- Optional query parameter "token" -------------
	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzTarget(w, r, apiId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRawfindings operation middleware
func (siw *ServerInterfaceWrapper) GetRawfindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRawfindings(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostRawfindings operation middleware
func (siw *ServerInterfaceWrapper) PostRawfindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRawfindings(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetReport operation middleware
func (siw *ServerInterfaceWrapper) GetReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	// ------------- Path parameter "timestamp" -------------
	var timestamp int64

	err = runtime.BindStyledParameter("simple", false, "timestamp", chi.URLParam(r, "timestamp"), &timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReport(w, r, apiId, timestamp)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetState operation middleware
func (siw *ServerInterfaceWrapper) GetState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetState(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTests operation middleware
func (siw *ServerInterfaceWrapper) GetTests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTests(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) GetUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUpdateStatus(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) PostUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId uint32

	err = runtime.BindStyledParameter("simple", false, "apiId", chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpdateStatus(w, r, apiId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/annotatedspec/{apiId}", wrapper.GetAnnotatedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/findings/{apiId}", wrapper.GetFindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fuzz/{apiId}", wrapper.FuzzTarget)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rawfindings/{apiId}", wrapper.GetRawfindings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/rawfindings/{apiId}", wrapper.PostRawfindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/report/{apiId}/{timestamp}", wrapper.GetReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/state", wrapper.GetState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tests/{apiId}", wrapper.GetTests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/updateStatus/{apiId}", wrapper.GetUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/updateStatus/{apiId}", wrapper.PostUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/version", wrapper.GetVersion)
	})

	return r
}

