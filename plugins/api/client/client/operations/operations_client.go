// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetHostsToTrace(params *GetHostsToTraceParams, opts ...ClientOption) (*GetHostsToTraceOK, error)

	PostControlNewDiscoveredAPIs(params *PostControlNewDiscoveredAPIsParams, opts ...ClientOption) (*PostControlNewDiscoveredAPIsOK, error)

	PostTelemetry(params *PostTelemetryParams, opts ...ClientOption) (*PostTelemetryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetHostsToTrace gets a list of hosts to trace
*/
func (a *Client) GetHostsToTrace(params *GetHostsToTraceParams, opts ...ClientOption) (*GetHostsToTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostsToTraceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHostsToTrace",
		Method:             "GET",
		PathPattern:        "/hostsToTrace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostsToTraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostsToTraceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHostsToTraceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostControlNewDiscoveredAPIs allows a client to notify API clarity about new a p is

  This allows a client (a gateway for example) to notify APIclarity about newly discovered APIs. If one of the APIs already exists, it is ignored.
*/
func (a *Client) PostControlNewDiscoveredAPIs(params *PostControlNewDiscoveredAPIsParams, opts ...ClientOption) (*PostControlNewDiscoveredAPIsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostControlNewDiscoveredAPIsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostControlNewDiscoveredAPIs",
		Method:             "POST",
		PathPattern:        "/control/newDiscoveredAPIs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostControlNewDiscoveredAPIsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostControlNewDiscoveredAPIsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostControlNewDiscoveredAPIsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostTelemetry posts an http telemetry
*/
func (a *Client) PostTelemetry(params *PostTelemetryParams, opts ...ClientOption) (*PostTelemetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTelemetryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTelemetry",
		Method:             "POST",
		PathPattern:        "/telemetry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTelemetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTelemetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTelemetryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
