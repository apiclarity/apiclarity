// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHostsToTraceHandlerFunc turns a function with the right signature into a get hosts to trace handler
type GetHostsToTraceHandlerFunc func(GetHostsToTraceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHostsToTraceHandlerFunc) Handle(params GetHostsToTraceParams) middleware.Responder {
	return fn(params)
}

// GetHostsToTraceHandler interface for that can handle valid get hosts to trace params
type GetHostsToTraceHandler interface {
	Handle(GetHostsToTraceParams) middleware.Responder
}

// NewGetHostsToTrace creates a new http.Handler for the get hosts to trace operation
func NewGetHostsToTrace(ctx *middleware.Context, handler GetHostsToTraceHandler) *GetHostsToTrace {
	return &GetHostsToTrace{Context: ctx, Handler: handler}
}

/* GetHostsToTrace swagger:route GET /hostsToTrace getHostsToTrace

Get a list of hosts to trace

*/
type GetHostsToTrace struct {
	Context *middleware.Context
	Handler GetHostsToTraceHandler
}

func (o *GetHostsToTrace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHostsToTraceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
