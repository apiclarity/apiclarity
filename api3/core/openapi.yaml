openapi: 3.0.0
info:
  version: 1.0.0
  title: APIClarity APIs
paths:
  /features:
    get:
      summary: Get the list of APIClarity features and for each feature the list of API hosts (in the form 'host:port') the feature requires to get trace for
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIClarityFeatureList"

  /apiEvents:
    get:
      summary: Get API events
      parameters:
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/apiEventSortKey"
        - $ref: "#/components/parameters/sortDir"
        - $ref: "#/components/parameters/showNonApi"
        - $ref: "#/components/parameters/apiInfoIdIsFilter"
        - $ref: "#/components/parameters/methodIsFilter"
        - $ref: "#/components/parameters/pathIsFilter"
        - $ref: "#/components/parameters/pathIsNotFilter"
        - $ref: "#/components/parameters/pathStartsWithFilter"
        - $ref: "#/components/parameters/pathEndsWithFilter"
        - $ref: "#/components/parameters/pathContainsFilter"
        - $ref: "#/components/parameters/statusCodeIsFilter"
        - $ref: "#/components/parameters/statusCodeIsNotFilter"
        - $ref: "#/components/parameters/statusCodeGteFilter"
        - $ref: "#/components/parameters/statusCodeLteFilter"
        - $ref: "#/components/parameters/sourceIPIsFilter"
        - $ref: "#/components/parameters/sourceIPIsNotFilter"
        - $ref: "#/components/parameters/destinationIPIsFilter"
        - $ref: "#/components/parameters/destinationIPIsNotFilter"
        - $ref: "#/components/parameters/destinationPortIsFilter"
        - $ref: "#/components/parameters/destinationPortIsNotFilter"
        - $ref: "#/components/parameters/hasSpecDiffFilter"
        - $ref: "#/components/parameters/specDiffTypeIsFilter"
        - $ref: "#/components/parameters/specIsFilter"
        - $ref: "#/components/parameters/specIsNotFilter"
        - $ref: "#/components/parameters/specStartsWithFilter"
        - $ref: "#/components/parameters/specEndsWithFilter"
        - $ref: "#/components/parameters/specContainsFilter"
        - $ref: "#/components/parameters/alertIsFilter"
        - $ref: "#/components/parameters/alertIsType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                properties:
                  total:
                    type: integer
                    description: Total events count in the given time range and filters
                  items:
                    type: array
                    description: List of API events in the given time range, filters and
                      page. List length must be lower or equal to pageSize
                    items:
                      $ref: "../common/openapi.yaml#/components/schemas/ApiEvent"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiEvents/{eventId}":
    get:
      summary: Get API event
      parameters:
        - name: eventId
          description: API event ID
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiEvent"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiEvents/{eventId}/reconstructedSpecDiff":
    get:
      summary: Get API event reconstructed spec diff
      parameters:
        - name: eventId
          description: API event ID
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiEventSpecDiff"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiEvents/{eventId}/providedSpecDiff":
    get:
      summary: Get API event provided spec diff
      parameters:
        - name: eventId
          description: API event ID
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiEventSpecDiff"
        default:
          $ref: "#/components/responses/UnknownError"
  /apiInventory:
    get:
      summary: Get API inventory
      parameters:
        - $ref: "#/components/parameters/apiType"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/apiInventorySortKey"
        - $ref: "#/components/parameters/sortDir"
        - $ref: "#/components/parameters/apiNameIsFilter"
        - $ref: "#/components/parameters/apiNameIsNotFilter"
        - $ref: "#/components/parameters/apiNameStartsWithFilter"
        - $ref: "#/components/parameters/apiNameEndsWithFilter"
        - $ref: "#/components/parameters/apiNameContainsFilter"
        - $ref: "#/components/parameters/portIsFilter"
        - $ref: "#/components/parameters/portIsNotFilter"
        - $ref: "#/components/parameters/hasProvidedSpecFilter"
        - $ref: "#/components/parameters/hasReconstructedSpecFilter"
        - $ref: "#/components/parameters/apiIdFilter"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - total
                properties:
                  total:
                    type: integer
                    description: Total filtered APIs count
                  items:
                    type: array
                    description: List of filtered APIs in the given page. List length must
                      be lower or equal to pageSize
                    items:
                      $ref: "../common/openapi.yaml#/components/schemas/ApiInfo"
        default:
          $ref: "#/components/responses/UnknownError"
    post:
      summary: Create API inventory item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../common/openapi.yaml#/components/schemas/ApiInfoWithType"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiInfo"
        default:
          $ref: "#/components/responses/UnknownError"
  /dashboard/apiUsage:
    get:
      summary: Get API usage
      parameters:
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiUsages"
        default:
          $ref: "#/components/responses/UnknownError"
  /dashboard/apiUsage/mostUsed:
    get:
      summary: Get most used APIs
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../common/openapi.yaml#/components/schemas/ApiCount"
        default:
          $ref: "#/components/responses/UnknownError"
  /dashboard/apiUsage/latestDiffs:
    get:
      summary: Get latest spec diffs
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../common/openapi.yaml#/components/schemas/SpecDiffTime"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/specs":
    get:
      summary: Get provided and reconstructed open api specs for a specific API
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/OpenApiSpecs"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/specs/providedSpec":
    put:
      summary: Add or edit a spec for a specific API
      parameters:
        - $ref: "#/components/parameters/apiId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../common/openapi.yaml#/components/schemas/rawSpec"
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/rawSpec"
        "400":
          description: Spec validation failure
          content:
            application/json:
              schema:
                type: string
        default:
          $ref: "#/components/responses/UnknownError"
    delete:
      summary: Unset a provided spec for a specific API
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/SuccessResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/specs/reconstructedSpec":
    delete:
      summary: Unset a reconstructed spec for a specific API
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/SuccessResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/reconstructed_swagger.json":
    get:
      summary: Get reconstructed API spec json file
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: spec in json format
                type: object
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/apiInfo":
    get:
      summary: Get api info from apiId
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiInfoWithType"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/apiId/fromHostAndPort":
    get:
      summary: Get apiId from host and port
      parameters:
        - $ref: "#/components/parameters/host"
        - $ref: "#/components/parameters/port"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: api id
                type: integer
                format: uint32
        "404":
          description: API ID Not Found
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/apiId/fromHostAndPortAndTraceSourceID":
    get:
      summary: Get apiId from host and port and Trace Source ID
      parameters:
        - $ref: "#/components/parameters/host"
        - $ref: "#/components/parameters/port"
        - $ref: "#/components/parameters/traceSourceIdQuery"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: api id
                type: integer
                format: uint32
        "404":
          description: API ID Not Found
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/provided_swagger.json":
    get:
      summary: Get provided API spec json file
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: spec in json format
                type: object
        default:
          $ref: "#/components/responses/UnknownError"
  /apiUsage/hitCount:
    get:
      summary: Get a hit count within a selected timeframe for the filtered API events
      parameters:
        - $ref: "#/components/parameters/startTime"
        - $ref: "#/components/parameters/endTime"
        - $ref: "#/components/parameters/showNonApi"
        - $ref: "#/components/parameters/methodIsFilter"
        - $ref: "#/components/parameters/providedPathIDIsFilter"
        - $ref: "#/components/parameters/reconstructedPathIDIsFilter"
        - $ref: "#/components/parameters/pathIsFilter"
        - $ref: "#/components/parameters/pathIsNotFilter"
        - $ref: "#/components/parameters/pathStartsWithFilter"
        - $ref: "#/components/parameters/pathEndsWithFilter"
        - $ref: "#/components/parameters/pathContainsFilter"
        - $ref: "#/components/parameters/statusCodeIsFilter"
        - $ref: "#/components/parameters/statusCodeIsNotFilter"
        - $ref: "#/components/parameters/statusCodeGteFilter"
        - $ref: "#/components/parameters/statusCodeLteFilter"
        - $ref: "#/components/parameters/sourceIPIsFilter"
        - $ref: "#/components/parameters/sourceIPIsNotFilter"
        - $ref: "#/components/parameters/destinationIPIsFilter"
        - $ref: "#/components/parameters/destinationIPIsNotFilter"
        - $ref: "#/components/parameters/destinationPortIsFilter"
        - $ref: "#/components/parameters/destinationPortIsNotFilter"
        - $ref: "#/components/parameters/hasSpecDiffFilter"
        - $ref: "#/components/parameters/specDiffTypeIsFilter"
        - $ref: "#/components/parameters/specIsFilter"
        - $ref: "#/components/parameters/specIsNotFilter"
        - $ref: "#/components/parameters/specStartsWithFilter"
        - $ref: "#/components/parameters/specEndsWithFilter"
        - $ref: "#/components/parameters/specContainsFilter"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "../common/openapi.yaml#/components/schemas/HitCount"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{apiId}/suggestedReview":
    get:
      summary: Get reconstructed spec for review
      parameters:
        - $ref: "#/components/parameters/apiId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/SuggestedReview"
        default:
          $ref: "#/components/responses/UnknownError"
  "/apiInventory/{reviewId}/approvedReview":
    post:
      summary: Apply the approved review to create the reconstructed spec
      parameters:
        - $ref: "#/components/parameters/reviewId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "../common/openapi.yaml#/components/schemas/ApprovedReview"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/SuccessResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  /control/newDiscoveredAPIs:
    post:
      summary: 'Allows a client to notify APIClarity about new APIs.'
      description: 'This allows a client (a gateway for example) to notify APIclarity about newly discovered APIs. If one of the APIs already exists, it is ignored.'
      requestBody:
        content:
          application/json:
            schema:
              type: 'object'
              required:
                - hosts
              properties:
                hosts:
                  type: 'array'
                  description: 'List of discovered APIs, format of hostname:port'
                  items:
                    type: 'string'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/SuccessResponse"
        default:
          $ref: "#/components/responses/UnknownError"
  /control/traceSources:
    get:
      summary: 'List of configured trace sources'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: 'object'
                required:
                  - trace_sources
                properties:
                  trace_sources:
                    type: 'array'
                    description: 'List of trace sources'
                    items:
                      $ref: '#/components/schemas/TraceSource'
        default:
          $ref: "#/components/responses/UnknownError"
    post:
      summary: 'Create a new Trace Source'
      requestBody:
        content:
          application/json:
            schema:
              description: 'Create a new Trace Source'
              $ref: '#/components/schemas/TraceSource'
      responses:
        '201':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceSource'
        default:
          $ref: "#/components/responses/UnknownError"
  /control/traceSources/{traceSourceId}:
    parameters:
      - $ref: "#/components/parameters/traceSourceId"
    get:
      summary: 'Get Trace Source information'
      responses:
        '200':
          description: 'Trace Source information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraceSource'
        '404':
          description: 'Trace Source not found'
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiResponse"
        default:
          $ref: "#/components/responses/UnknownError"
    delete:
      summary: 'Delete a Trace Source'
      responses:
        '204':
          description: 'Success'
        '404':
          description: 'Trace Source not found'
          content:
            application/json:
              schema:
                $ref: "../common/openapi.yaml#/components/schemas/ApiResponse"
        default:
          $ref: "#/components/responses/UnknownError"

servers:
  - url: /api
components:
  parameters:
    startTime:
      name: startTime
      description: Start time of the query
      in: query
      required: true
      schema:
        type: string
        format: date-time
    endTime:
      name: endTime
      description: End time of the query
      in: query
      required: true
      schema:
        type: string
        format: date-time
    page:
      name: page
      description: Page number of the query
      in: query
      required: true
      schema:
        type: integer
    apiIdFilter:
      name: apiId
      description: api id to return
      in: query
      required: false
      schema:
        type: string
    pageSize:
      name: pageSize
      description: Maximum items to return
      in: query
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 50
    sortDir:
      name: sortDir
      description: Sorting direction
      in: query
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
    apiEventSortKey:
      name: sortKey
      description: Sort key
      in: query
      required: true
      schema:
        $ref: ../common/openapi.yaml#/components/schemas/ApiEventSortKey
    apiInventorySortKey:
      name: sortKey
      description: Sort key
      in: query
      required: true
      schema:
        $ref: ../common/openapi.yaml#/components/schemas/ApiInventorySortKey
    apiType:
      name: type
      description: API type [INTERNAL or EXTERNAL]
      in: query
      required: true
      schema:
        $ref: ../common/openapi.yaml#/components/schemas/ApiTypeEnum
    showNonApi:
      name: showNonApi
      in: query
      required: true
      schema:
        type: boolean
    apiInfoIdIsFilter:
      name: apiInfoId[is]
      in: query
      required: false
      schema:
        type: integer
        format: uint32
    methodIsFilter:
      name: method[is]
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '../common/openapi.yaml#/components/schemas/HttpMethod'
    providedPathIDIsFilter:
      name: providedPathID[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    reconstructedPathIDIsFilter:
      name: reconstructedPathID[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    pathIsFilter:
      name: path[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    pathIsNotFilter:
      name: path[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    pathStartsWithFilter:
      name: path[start]
      in: query
      required: false
      schema:
        type: string
    pathEndsWithFilter:
      name: path[end]
      in: query
      required: false
      schema:
        type: string
    pathContainsFilter:
      name: path[contains]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    statusCodeIsFilter:
      name: statusCode[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    statusCodeIsNotFilter:
      name: statusCode[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    statusCodeGteFilter:
      name: statusCode[gte]
      description: greater than or equal
      in: query
      required: false
      schema:
        type: string
    statusCodeLteFilter:
      name: statusCode[lte]
      description: less than or equal
      in: query
      required: false
      schema:
        type: string
    sourceIPIsFilter:
      name: sourceIP[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    sourceIPIsNotFilter:
      name: sourceIP[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    destinationIPIsFilter:
      name: destinationIP[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    destinationIPIsNotFilter:
      name: destinationIP[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    destinationPortIsFilter:
      name: destinationPort[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    destinationPortIsNotFilter:
      name: destinationPort[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    hasSpecDiffFilter:
      name: hasSpecDiff[is]
      in: query
      required: false
      schema:
        type: boolean
    specDiffTypeIsFilter:
      name: specDiffType[is]
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: ../common/openapi.yaml#/components/schemas/DiffType
    specIsFilter:
      name: spec[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    specIsNotFilter:
      name: spec[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    specStartsWithFilter:
      name: spec[start]
      in: query
      required: false
      schema:
        type: string
    specEndsWithFilter:
      name: spec[end]
      in: query
      required: false
      schema:
        type: string
    specContainsFilter:
      name: spec[contains]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    apiNameIsFilter:
      name: name[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    apiNameIsNotFilter:
      name: name[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    apiNameStartsWithFilter:
      name: name[start]
      in: query
      required: false
      schema:
        type: string
    apiNameEndsWithFilter:
      name: name[end]
      in: query
      required: false
      schema:
        type: string
    apiNameContainsFilter:
      name: name[contains]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    portIsFilter:
      name: port[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    portIsNotFilter:
      name: port[isNot]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    hasProvidedSpecFilter:
      name: hasProvidedSpec[is]
      in: query
      required: false
      schema:
        type: boolean
    hasReconstructedSpecFilter:
      name: hasReconstructedSpec[is]
      in: query
      required: false
      schema:
        type: boolean
    port:
      name: port
      description: api port
      in: query
      required: true
      schema:
        type: string
    host:
      name: host
      description: api host name
      in: query
      required: true
      schema:
        type: string
    alertIsFilter:
      name: alert[is]
      in: query
      description: Alert Kind [ALERT_INFO or ALERT_WARN]
      required: false
      schema:
        type: array
        items:
          $ref: ../common/openapi.yaml#/components/schemas/AlertSeverityEnum
    alertIsType:
      name: alertType[is]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    apiId:
      name: apiId
      in: path
      required: true
      schema:
        type: integer
        format: uint32
    reviewId:
      name: reviewId
      in: path
      required: true
      schema:
        type: integer
        format: uint32
    traceSourceId:
      name: traceSourceId
      in: path
      description: 'Trace Source ID'
      required: true
      schema:
        type: string
        format: uuid
    traceSourceIdQuery:
      name: 'traceSourceId'
      in: query
      description: 'Trace Source ID'
      required: true
      schema:
        type: string
        format: uuid
  responses:
    UnknownError:
      description: unknown error
      content:
        application/json:
          schema:
            $ref: "../common/openapi.yaml#/components/schemas/ApiResponse"
  schemas: 
    APIClarityFeatureList:
      type: 'object'
      description: List of APIClarity features and for each feature the list of API hosts (Group by trace sources, in the form 'host:port') the feature requires to get trace for
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/APIClarityFeature'
    APIClarityFeature:
      type: 'object'
      description: Description of APIClarity feature and the list of API hosts (Group by trace sources, in the form 'host:port') the feature requires to get trace for
      properties:
        featureName:
          $ref: '#/components/schemas/APIClarityFeatureEnum'
        featureDescription:
          description: "Short human readable description of the feature"
          type: string
        hostsToTrace:
          $ref: '#/components/schemas/HostsToTraceForComponent'
      required:
      - featureName
    HostsToTraceForComponent:
      type: 'object'
      description: List of trace sources for a component, with theirs list of API hosts to get trace for
      properties:
        component:
          description: "Component name"
          type: string
        traceSourcesHosts:
          type: array
          items:
            $ref: '#/components/schemas/HostsToTraceForTraceSource'
    HostsToTraceForTraceSource:
      type: 'object'
      description: list of API hosts (in the form 'host:port') managed by a traceSource
      properties:
        traceSourceID:
          description: ID of the trace source
          type: integer
          format: uint32
        hostsToTrace:
          description: List of hosts (in the form 'host:port')
          type: array
          items:
            type: string

    APIClarityFeatureEnum:
      description: 'APIClarity Feature Name'
      type: string
      enum:
        - specreconstructor
        - specdiffs
    TraceSource:
      description: 'A Source which is sending traces to APIClarity'
      type: 'object'
      properties:
        id:
          type: 'integer'
        uid:
          type: 'string'
          format: 'uuid'
        name:
          description: 'Unique name identifying a Trace Source'
          type: 'string'
        type:
          $ref: '#/components/schemas/TraceSourceType'
        description:
          type: 'string'
        token:
          type: 'string'
      required:
        - name
        - type
    TraceSourceType:
      type: string
      enum:
        - APIGEE_X
        - F5_BIG_IP
        - KONG_INTERNAL
        - TYK_INTERNAL
        
