// Package global provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package global

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	externalRef0 "github.com/openclarity/apiclarity/api3/common"
)

// Defines values for APIClarityFeatureEnum.
const (
	Bfla              APIClarityFeatureEnum = "bfla"
	Differ            APIClarityFeatureEnum = "differ"
	Fuzzer            APIClarityFeatureEnum = "fuzzer"
	Specdiffs         APIClarityFeatureEnum = "specdiffs"
	Specreconstructor APIClarityFeatureEnum = "specreconstructor"
	Traceanalyzer     APIClarityFeatureEnum = "traceanalyzer"
)

// Defines values for AuthorizationTypeEnum.
const (
	APITOKEN    AuthorizationTypeEnum = "APITOKEN"
	BASICAUTH   AuthorizationTypeEnum = "BASICAUTH"
	BEARERTOKEN AuthorizationTypeEnum = "BEARERTOKEN"
)

// Defines values for BFLAState.
const (
	BFLADETECTING BFLAState = "BFLA_DETECTING"
	BFLALEARNING  BFLAState = "BFLA_LEARNING"
	BFLALEARNT    BFLAState = "BFLA_LEARNT"
	BFLASTART     BFLAState = "BFLA_START"
)

// Defines values for BFLAStatus.
const (
	LEARNING         BFLAStatus = "LEARNING"
	LEGITIMATE       BFLAStatus = "LEGITIMATE"
	NOSPEC           BFLAStatus = "NO_SPEC"
	SUSPICIOUSHIGH   BFLAStatus = "SUSPICIOUS_HIGH"
	SUSPICIOUSMEDIUM BFLAStatus = "SUSPICIOUS_MEDIUM"
)

// Defines values for DetectedUserSource.
const (
	BASIC           DetectedUserSource = "BASIC"
	JWT             DetectedUserSource = "JWT"
	KONGXCONSUMERID DetectedUserSource = "KONG_X_CONSUMER_ID"
)

// Defines values for FuzzingStatusEnum.
const (
	DONE       FuzzingStatusEnum = "DONE"
	ERROR      FuzzingStatusEnum = "ERROR"
	INPROGRESS FuzzingStatusEnum = "IN_PROGRESS"
)

// Defines values for OperationEnum.
const (
	Approve     OperationEnum = "approve"
	ApproveUser OperationEnum = "approve_user"
	Deny        OperationEnum = "deny"
	DenyUser    OperationEnum = "deny_user"
)

// Defines values for RawFindingsSourceEnum.
const (
	APIFUZZER        RawFindingsSourceEnum = "API_FUZZER"
	BITSIGHT         RawFindingsSourceEnum = "BITSIGHT"
	GRPCANALYZER     RawFindingsSourceEnum = "GRPC_ANALYZER"
	OASANALYSER      RawFindingsSourceEnum = "OAS_ANALYSER"
	OASTRACEANALYZER RawFindingsSourceEnum = "OAS_TRACE_ANALYZER"
	OPENDNS          RawFindingsSourceEnum = "OPENDNS"
	TALOS            RawFindingsSourceEnum = "TALOS"
)

// Defines values for ScoreExitStatusEnum.
const (
	GENERICFAILURE ScoreExitStatusEnum = "GENERIC_FAILURE"
	NETWORKFAILURE ScoreExitStatusEnum = "NETWORK_FAILURE"
	PARSEERROR     ScoreExitStatusEnum = "PARSE_ERROR"
	SUCCESS        ScoreExitStatusEnum = "SUCCESS"
	TOOLONG        ScoreExitStatusEnum = "TOO_LONG"
)

// Defines values for SpecType.
const (
	NONE          SpecType = "NONE"
	PROVIDED      SpecType = "PROVIDED"
	RECONSTRUCTED SpecType = "RECONSTRUCTED"
)

// Defines values for TestInputDepthEnum.
const (
	DEEP    TestInputDepthEnum = "DEEP"
	DEFAULT TestInputDepthEnum = "DEFAULT"
	QUICK   TestInputDepthEnum = "QUICK"
)

// Defines values for SortDir.
const (
	SortDirASC  SortDir = "ASC"
	SortDirDESC SortDir = "DESC"
)

// Defines values for GetApiEventsParamsSortDir.
const (
	GetApiEventsParamsSortDirASC  GetApiEventsParamsSortDir = "ASC"
	GetApiEventsParamsSortDirDESC GetApiEventsParamsSortDir = "DESC"
)

// Defines values for GetApiInventoryParamsSortDir.
const (
	ASC  GetApiInventoryParamsSortDir = "ASC"
	DESC GetApiInventoryParamsSortDir = "DESC"
)

// Description of APIClarity feature and the list of API hosts (in the form 'host:port') the feature requires to get trace for
type APIClarityFeature struct {
	// Short human readable description of the feature
	FeatureDescription *string `json:"featureDescription,omitempty"`

	// APIClarity Feature Name
	FeatureName  APIClarityFeatureEnum `json:"featureName"`
	HostsToTrace *[]string             `json:"hostsToTrace,omitempty"`
}

// APIClarity Feature Name
type APIClarityFeatureEnum string

// List of APIClarity features and for each feature the list of API hosts (in the form 'host:port') the feature requires to get trace for
type APIClarityFeatureList struct {
	Features *[]APIClarityFeature `json:"features,omitempty"`
}

// APIDiffs defines model for APIDiffs.
type APIDiffs struct {
	ApiInfo externalRef0.ApiInfo `json:"apiInfo"`
	Diffs   []Diff               `json:"diffs"`
}

// APIEventAnnotations defines model for APIEventAnnotations.
type APIEventAnnotations struct {
	BflaStatus           BFLAStatus    `json:"bflaStatus"`
	DestinationK8sObject *K8sObjectRef `json:"destinationK8sObject,omitempty"`
	DetectedUser         *DetectedUser `json:"detectedUser,omitempty"`
	External             bool          `json:"external"`
	MismatchedScopes     bool          `json:"mismatchedScopes"`
	SourceK8sObject      *K8sObjectRef `json:"sourceK8sObject,omitempty"`
}

// Annotation defines model for Annotation.
type Annotation struct {
	Annotation string `json:"annotation"`
	Kind       string `json:"kind"`
	Name       string `json:"name"`
	Severity   string `json:"severity"`
}

// Annotations defines model for Annotations.
type Annotations struct {
	Items *[]Annotation `json:"items,omitempty"`

	// Total event annotations count
	Total int `json:"total"`
}

// ApiToken defines model for ApiToken.
type ApiToken struct {
	Key string `json:"key"`

	// An enumeration for the authorization type parameter.
	Type  AuthorizationTypeEnum `json:"type"`
	Value string                `json:"value"`
}

// AuthorizationModel defines model for AuthorizationModel.
type AuthorizationModel struct {
	Learning   bool                          `json:"learning"`
	Operations []AuthorizationModelOperation `json:"operations"`
	SpecType   SpecType                      `json:"specType"`
}

// AuthorizationModelAudience defines model for AuthorizationModelAudience.
type AuthorizationModelAudience struct {
	Authorized    bool           `json:"authorized"`
	EndUsers      []DetectedUser `json:"end_users"`
	External      bool           `json:"external"`
	K8sObject     *K8sObjectRef  `json:"k8s_object,omitempty"`
	LastTime      *time.Time     `json:"lastTime,omitempty"`
	StatusCode    int            `json:"statusCode"`
	WarningStatus BFLAStatus     `json:"warningStatus"`
}

// AuthorizationModelNotification defines model for AuthorizationModelNotification.
type AuthorizationModelNotification struct {
	Learning         bool                          `json:"learning"`
	NotificationType string                        `json:"notificationType"`
	Operations       []AuthorizationModelOperation `json:"operations"`
	SpecType         SpecType                      `json:"specType"`
}

// AuthorizationModelOperation defines model for AuthorizationModelOperation.
type AuthorizationModelOperation struct {
	Audience []AuthorizationModelAudience `json:"audience"`
	Method   string                       `json:"method"`
	Path     string                       `json:"path"`
	Tags     []string                     `json:"tags"`
}

// AuthorizationScheme defines model for AuthorizationScheme.
type AuthorizationScheme struct {
	union json.RawMessage
}

// AuthorizationSchemeBase defines model for AuthorizationSchemeBase.
type AuthorizationSchemeBase struct {
	// An enumeration for the authorization type parameter.
	Type AuthorizationTypeEnum `json:"type"`
}

// An enumeration for the authorization type parameter.
type AuthorizationTypeEnum string

// BFLAState defines model for BFLAState.
type BFLAState string

// BFLAStatus defines model for BFLAStatus.
type BFLAStatus string

// BasicAuth defines model for BasicAuth.
type BasicAuth struct {
	Password string `json:"password"`

	// An enumeration for the authorization type parameter.
	Type     AuthorizationTypeEnum `json:"type"`
	Username string                `json:"username"`
}

// BearerToken defines model for BearerToken.
type BearerToken struct {
	Token string `json:"token"`

	// An enumeration for the authorization type parameter.
	Type AuthorizationTypeEnum `json:"type"`
}

// DetectedUser defines model for DetectedUser.
type DetectedUser struct {
	Id        string             `json:"id"`
	IpAddress string             `json:"ip_address"`
	Source    DetectedUserSource `json:"source"`
}

// DetectedUserSource defines model for DetectedUser.Source.
type DetectedUserSource string

// Diff defines model for Diff.
type Diff struct {
	DiffType externalRef0.DiffType `json:"diffType"`

	// Timestamp of the time that the diff was last seen
	LastSeen int64                    `json:"lastSeen"`
	Method   *externalRef0.HttpMethod `json:"method,omitempty"`

	// New spec json string
	NewSpec string `json:"newSpec"`

	// Old spec json string
	OldSpec string `json:"oldSpec"`

	// Path of the diff element
	Path     *string                `json:"path,omitempty"`
	SpecType *externalRef0.SpecType `json:"specType,omitempty"`
}

// Finding defines model for Finding.
type Finding struct {
	// description of the finding
	Description *string `json:"description,omitempty"`

	// Name of the finding
	Name *string `json:"name,omitempty"`

	// risk of the finding
	Risk *string `json:"risk,omitempty"`
}

// Findings defines model for Findings.
type Findings struct {
	Items *[]Finding `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Current fuzzer report
type FuzzingReportItem struct {
	Description *string `json:"description,omitempty"`

	// List of paths that has been fuzzed
	Findings *[]RawFindings `json:"findings,omitempty"`
	Name     *string        `json:"name,omitempty"`

	// List of paths that has been fuzzed
	Paths    *[]FuzzingReportPath `json:"paths,omitempty"`
	Source   *string              `json:"source,omitempty"`
	Status   *string              `json:"status,omitempty"`
	TestType *string              `json:"testType,omitempty"`
}

// Report tag operation
type FuzzingReportOperation struct {
	Findings *[]externalRef0.APIFinding `json:"findings,omitempty"`

	// Severity of a finding
	HighestSeverity *externalRef0.Severity     `json:"highestSeverity,omitempty"`
	Operation       externalRef0.MethodAndPath `json:"operation"`

	// Request count to this operation item during the test
	RequestsCount int32 `json:"requestsCount"`
}

// Current fuzzer report
type FuzzingReportPath struct {
	Payload  *string `json:"payload,omitempty"`
	Response *string `json:"response,omitempty"`
	Result   *int    `json:"result,omitempty"`
	Uri      *string `json:"uri,omitempty"`
	Verb     *string `json:"verb,omitempty"`
}

// Report tag item
type FuzzingReportTag struct {
	// Severity of a finding
	HighestSeverity *externalRef0.Severity `json:"highestSeverity,omitempty"`

	// Tag name
	Name       string                   `json:"name"`
	Operations []FuzzingReportOperation `json:"operations"`
}

// fuzzing status and reporting
type FuzzingStatusAndReport struct {
	Progress int `json:"progress"`

	// List of report item
	Report map[string]FuzzingReportItem `json:"report"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`
}

// An enumeration.
type FuzzingStatusEnum string

// K8sObjectRef defines model for K8sObjectRef.
type K8sObjectRef struct {
	ApiVersion string `json:"apiVersion"`
	Kind       string `json:"kind"`
	Name       string `json:"name"`
	Namespace  string `json:"namespace"`
	Uid        string `json:"uid"`
}

// OperationEnum defines model for OperationEnum.
type OperationEnum string

// RawFindings defines model for RawFindings.
type RawFindings struct {
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	Description    *string `json:"description,omitempty"`

	// location string token
	Location  *[]string            `json:"location,omitempty"`
	Namespace *string              `json:"namespace,omitempty"`
	Request   *RawFindingsSeverity `json:"request,omitempty"`
	Type      *string              `json:"type,omitempty"`
}

// RawFindingsBundle defines model for RawFindingsBundle.
type RawFindingsBundle struct {
	// Opaque data structure for the raw finding
	Data string `json:"data"`

	// An enumeration.
	Source RawFindingsSourceEnum `json:"source"`

	// An enumeration.
	Status ScoreExitStatusEnum `json:"status"`

	// Message giving details about the exist status
	StatusMessage *string `json:"status_message,omitempty"`

	// Raw finding timestamp format= date-time
	Timestamp string `json:"timestamp"`
}

// RawFindingsSeverity defines model for RawFindingsSeverity.
type RawFindingsSeverity struct {
	Severity *string `json:"severity,omitempty"`
}

// An enumeration.
type RawFindingsSourceEnum string

// An enumeration.
type ScoreExitStatusEnum string

// Describes the progress of an ongoing test
type ShortTestProgress struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Progress of the test
	Progress int `json:"progress"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`
}

// Short Test Report
type ShortTestReport struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Severity of a finding
	HighestSeverity *externalRef0.Severity `json:"highestSeverity,omitempty"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`

	// Message for status details, if any
	StatusMessage *string             `json:"statusMessage,omitempty"`
	Tags          *[]FuzzingReportTag `json:"tags,omitempty"`
}

// SpecDiffs defines model for SpecDiffs.
type SpecDiffs struct {
	Diffs APIDiffs `json:"diffs"`
}

// SpecDiffsNotification defines model for SpecDiffsNotification.
type SpecDiffsNotification struct {
	Diffs            APIDiffs `json:"diffs"`
	NotificationType string   `json:"notificationType"`
}

// SpecType defines model for SpecType.
type SpecType string

// Test defines model for Test.
type Test struct {
	// A message in case of error
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestHandle defines model for TestHandle.
type TestHandle struct {
	ApiID     *externalRef0.ApiID `json:"apiID,omitempty"`
	Timestamp *int64              `json:"timestamp,omitempty"`
}

// contains all input parameters for a test
type TestInput struct {
	Auth *AuthorizationScheme `json:"auth,omitempty"`

	// An enumeration for input depth parameter.
	Depth TestInputDepthEnum `json:"depth"`
}

// An enumeration for input depth parameter.
type TestInputDepthEnum string

// TestProgressNotification defines model for TestProgressNotification.
type TestProgressNotification struct {
	ApiID            *externalRef0.ApiID `json:"apiID,omitempty"`
	NotificationType string              `json:"notificationType"`

	// Progress of the test
	Progress int `json:"progress"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`
}

// TestReportNotification defines model for TestReportNotification.
type TestReportNotification struct {
	ApiID *externalRef0.ApiID `json:"apiID,omitempty"`

	// Severity of a finding
	HighestSeverity  *externalRef0.Severity `json:"highestSeverity,omitempty"`
	NotificationType string                 `json:"notificationType"`

	// Timestamp of the start of the test
	Starttime int64 `json:"starttime"`

	// An enumeration.
	Status FuzzingStatusEnum `json:"status"`

	// Message for status details, if any
	StatusMessage *string             `json:"statusMessage,omitempty"`
	Tags          *[]FuzzingReportTag `json:"tags,omitempty"`
}

// TestWithReport defines model for TestWithReport.
type TestWithReport struct {
	// A message in case of error
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Timestamp of the last report received for the test
	LastReportTime *int64 `json:"lastReportTime,omitempty"`

	// Progress of the test
	Progress *int `json:"progress,omitempty"`

	// fuzzing status and reporting
	Report *FuzzingStatusAndReport `json:"report,omitempty"`

	// Timestamp of the start of the test
	Starttime *int64 `json:"starttime,omitempty"`

	// risk of the finding
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// TestingModuleState defines model for TestingModuleState.
type TestingModuleState struct {
	APIsInCache int    `json:"APIsInCache"`
	Version     string `json:"version"`
}

// Tests defines model for Tests.
type Tests struct {
	Items *[]Test `json:"items,omitempty"`

	// Nb of items, used for pagination
	Total *int `json:"total,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// risk of the finding
type Vulnerabilities struct {
	// Total of vuln
	Critical *int `json:"critical,omitempty"`

	// Total of vuln
	High *int `json:"high,omitempty"`

	// Total of vuln
	Low *int `json:"low,omitempty"`

	// Total of vuln
	Medium *int `json:"medium,omitempty"`

	// Total of vuln
	Total *int `json:"total,omitempty"`
}

// AlertIsFilter defines model for alertIsFilter.
type AlertIsFilter = []externalRef0.AlertSeverityEnum

// AlertIsType defines model for alertIsType.
type AlertIsType = []string

// ApiEventSortKey defines model for apiEventSortKey.
type ApiEventSortKey = externalRef0.ApiEventSortKey

// ApiId defines model for apiId.
type ApiId = uint32

// ApiIdFilter defines model for apiIdFilter.
type ApiIdFilter = string

// ApiInfoIdIsFilter defines model for apiInfoIdIsFilter.
type ApiInfoIdIsFilter = uint32

// ApiInventorySortKey defines model for apiInventorySortKey.
type ApiInventorySortKey = externalRef0.ApiInventorySortKey

// ApiNameContainsFilter defines model for apiNameContainsFilter.
type ApiNameContainsFilter = []string

// ApiNameEndsWithFilter defines model for apiNameEndsWithFilter.
type ApiNameEndsWithFilter = string

// ApiNameIsFilter defines model for apiNameIsFilter.
type ApiNameIsFilter = []string

// ApiNameIsNotFilter defines model for apiNameIsNotFilter.
type ApiNameIsNotFilter = []string

// ApiNameStartsWithFilter defines model for apiNameStartsWithFilter.
type ApiNameStartsWithFilter = string

// ApiType defines model for apiType.
type ApiType = externalRef0.ApiTypeEnum

// DestinationIPIsFilter defines model for destinationIPIsFilter.
type DestinationIPIsFilter = []string

// DestinationIPIsNotFilter defines model for destinationIPIsNotFilter.
type DestinationIPIsNotFilter = []string

// DestinationPortIsFilter defines model for destinationPortIsFilter.
type DestinationPortIsFilter = []string

// DestinationPortIsNotFilter defines model for destinationPortIsNotFilter.
type DestinationPortIsNotFilter = []string

// EndTime defines model for endTime.
type EndTime = time.Time

// HasProvidedSpecFilter defines model for hasProvidedSpecFilter.
type HasProvidedSpecFilter = bool

// HasReconstructedSpecFilter defines model for hasReconstructedSpecFilter.
type HasReconstructedSpecFilter = bool

// HasSpecDiffFilter defines model for hasSpecDiffFilter.
type HasSpecDiffFilter = bool

// Host defines model for host.
type Host = string

// MethodIsFilter defines model for methodIsFilter.
type MethodIsFilter = []externalRef0.HttpMethod

// Page defines model for page.
type Page = int

// PageSize defines model for pageSize.
type PageSize = int

// PathContainsFilter defines model for pathContainsFilter.
type PathContainsFilter = []string

// PathEndsWithFilter defines model for pathEndsWithFilter.
type PathEndsWithFilter = string

// PathIsFilter defines model for pathIsFilter.
type PathIsFilter = []string

// PathIsNotFilter defines model for pathIsNotFilter.
type PathIsNotFilter = []string

// PathStartsWithFilter defines model for pathStartsWithFilter.
type PathStartsWithFilter = string

// Port defines model for port.
type Port = string

// PortIsFilter defines model for portIsFilter.
type PortIsFilter = []string

// PortIsNotFilter defines model for portIsNotFilter.
type PortIsNotFilter = []string

// ProvidedPathIDIsFilter defines model for providedPathIDIsFilter.
type ProvidedPathIDIsFilter = []string

// ReconstructedPathIDIsFilter defines model for reconstructedPathIDIsFilter.
type ReconstructedPathIDIsFilter = []string

// Redacted defines model for redacted.
type Redacted = bool

// ReviewId defines model for reviewId.
type ReviewId = uint32

// ShowNonApi defines model for showNonApi.
type ShowNonApi = bool

// SortDir defines model for sortDir.
type SortDir string

// SourceIPIsFilter defines model for sourceIPIsFilter.
type SourceIPIsFilter = []string

// SourceIPIsNotFilter defines model for sourceIPIsNotFilter.
type SourceIPIsNotFilter = []string

// SpecContainsFilter defines model for specContainsFilter.
type SpecContainsFilter = []string

// SpecDiffTypeIsFilter defines model for specDiffTypeIsFilter.
type SpecDiffTypeIsFilter = []externalRef0.DiffType

// SpecEndsWithFilter defines model for specEndsWithFilter.
type SpecEndsWithFilter = string

// SpecIsFilter defines model for specIsFilter.
type SpecIsFilter = []string

// SpecIsNotFilter defines model for specIsNotFilter.
type SpecIsNotFilter = []string

// SpecStartsWithFilter defines model for specStartsWithFilter.
type SpecStartsWithFilter = string

// StartTime defines model for startTime.
type StartTime = time.Time

// StatusCodeGteFilter defines model for statusCodeGteFilter.
type StatusCodeGteFilter = string

// StatusCodeIsFilter defines model for statusCodeIsFilter.
type StatusCodeIsFilter = []string

// StatusCodeIsNotFilter defines model for statusCodeIsNotFilter.
type StatusCodeIsNotFilter = []string

// StatusCodeLteFilter defines model for statusCodeLteFilter.
type StatusCodeLteFilter = string

// An object that is returned in all cases of failures
type UnknownError = externalRef0.ApiResponse

// GetApiEventsParams defines parameters for GetApiEvents.
type GetApiEventsParams struct {
	// Start time of the query
	StartTime StartTime `form:"startTime" json:"startTime"`

	// End time of the query
	EndTime EndTime `form:"endTime" json:"endTime"`

	// Page number of the query
	Page Page `form:"page" json:"page"`

	// Maximum items to return
	PageSize PageSize `form:"pageSize" json:"pageSize"`

	// Sort key
	SortKey ApiEventSortKey `form:"sortKey" json:"sortKey"`

	// Sorting direction
	SortDir         *GetApiEventsParamsSortDir `form:"sortDir,omitempty" json:"sortDir,omitempty"`
	ShowNonApi      ShowNonApi                 `form:"showNonApi" json:"showNonApi"`
	ApiInfoIdIs     *ApiInfoIdIsFilter         `form:"apiInfoId[is],omitempty" json:"apiInfoId[is],omitempty"`
	MethodIs        *MethodIsFilter            `form:"method[is],omitempty" json:"method[is],omitempty"`
	PathIs          *PathIsFilter              `form:"path[is],omitempty" json:"path[is],omitempty"`
	PathIsNot       *PathIsNotFilter           `form:"path[isNot],omitempty" json:"path[isNot],omitempty"`
	PathStart       *PathStartsWithFilter      `form:"path[start],omitempty" json:"path[start],omitempty"`
	PathEnd         *PathEndsWithFilter        `form:"path[end],omitempty" json:"path[end],omitempty"`
	PathContains    *PathContainsFilter        `form:"path[contains],omitempty" json:"path[contains],omitempty"`
	StatusCodeIs    *StatusCodeIsFilter        `form:"statusCode[is],omitempty" json:"statusCode[is],omitempty"`
	StatusCodeIsNot *StatusCodeIsNotFilter     `form:"statusCode[isNot],omitempty" json:"statusCode[isNot],omitempty"`

	// greater than or equal
	StatusCodeGte *StatusCodeGteFilter `form:"statusCode[gte],omitempty" json:"statusCode[gte],omitempty"`

	// less than or equal
	StatusCodeLte        *StatusCodeLteFilter        `form:"statusCode[lte],omitempty" json:"statusCode[lte],omitempty"`
	SourceIPIs           *SourceIPIsFilter           `form:"sourceIP[is],omitempty" json:"sourceIP[is],omitempty"`
	SourceIPIsNot        *SourceIPIsNotFilter        `form:"sourceIP[isNot],omitempty" json:"sourceIP[isNot],omitempty"`
	DestinationIPIs      *DestinationIPIsFilter      `form:"destinationIP[is],omitempty" json:"destinationIP[is],omitempty"`
	DestinationIPIsNot   *DestinationIPIsNotFilter   `form:"destinationIP[isNot],omitempty" json:"destinationIP[isNot],omitempty"`
	DestinationPortIs    *DestinationPortIsFilter    `form:"destinationPort[is],omitempty" json:"destinationPort[is],omitempty"`
	DestinationPortIsNot *DestinationPortIsNotFilter `form:"destinationPort[isNot],omitempty" json:"destinationPort[isNot],omitempty"`
	HasSpecDiffIs        *HasSpecDiffFilter          `form:"hasSpecDiff[is],omitempty" json:"hasSpecDiff[is],omitempty"`
	SpecDiffTypeIs       *SpecDiffTypeIsFilter       `form:"specDiffType[is],omitempty" json:"specDiffType[is],omitempty"`
	SpecIs               *SpecIsFilter               `form:"spec[is],omitempty" json:"spec[is],omitempty"`
	SpecIsNot            *SpecIsNotFilter            `form:"spec[isNot],omitempty" json:"spec[isNot],omitempty"`
	SpecStart            *SpecStartsWithFilter       `form:"spec[start],omitempty" json:"spec[start],omitempty"`
	SpecEnd              *SpecEndsWithFilter         `form:"spec[end],omitempty" json:"spec[end],omitempty"`
	SpecContains         *SpecContainsFilter         `form:"spec[contains],omitempty" json:"spec[contains],omitempty"`

	// Alert Kind [ALERT_INFO or ALERT_WARN]
	AlertIs     *AlertIsFilter `form:"alert[is],omitempty" json:"alert[is],omitempty"`
	AlertTypeIs *AlertIsType   `form:"alertType[is],omitempty" json:"alertType[is],omitempty"`
}

// GetApiEventsParamsSortDir defines parameters for GetApiEvents.
type GetApiEventsParamsSortDir string

// GetApiInventoryParams defines parameters for GetApiInventory.
type GetApiInventoryParams struct {
	// API type [INTERNAL or EXTERNAL]
	Type ApiType `form:"type" json:"type"`

	// Page number of the query
	Page Page `form:"page" json:"page"`

	// Maximum items to return
	PageSize PageSize `form:"pageSize" json:"pageSize"`

	// Sort key
	SortKey ApiInventorySortKey `form:"sortKey" json:"sortKey"`

	// Sorting direction
	SortDir                *GetApiInventoryParamsSortDir `form:"sortDir,omitempty" json:"sortDir,omitempty"`
	NameIs                 *ApiNameIsFilter              `form:"name[is],omitempty" json:"name[is],omitempty"`
	NameIsNot              *ApiNameIsNotFilter           `form:"name[isNot],omitempty" json:"name[isNot],omitempty"`
	NameStart              *ApiNameStartsWithFilter      `form:"name[start],omitempty" json:"name[start],omitempty"`
	NameEnd                *ApiNameEndsWithFilter        `form:"name[end],omitempty" json:"name[end],omitempty"`
	NameContains           *ApiNameContainsFilter        `form:"name[contains],omitempty" json:"name[contains],omitempty"`
	PortIs                 *PortIsFilter                 `form:"port[is],omitempty" json:"port[is],omitempty"`
	PortIsNot              *PortIsNotFilter              `form:"port[isNot],omitempty" json:"port[isNot],omitempty"`
	HasProvidedSpecIs      *HasProvidedSpecFilter        `form:"hasProvidedSpec[is],omitempty" json:"hasProvidedSpec[is],omitempty"`
	HasReconstructedSpecIs *HasReconstructedSpecFilter   `form:"hasReconstructedSpec[is],omitempty" json:"hasReconstructedSpec[is],omitempty"`

	// api id to return
	ApiId *ApiIdFilter `form:"apiId,omitempty" json:"apiId,omitempty"`
}

// GetApiInventoryParamsSortDir defines parameters for GetApiInventory.
type GetApiInventoryParamsSortDir string

// PostApiInventoryJSONBody defines parameters for PostApiInventory.
type PostApiInventoryJSONBody = externalRef0.ApiInfoWithType

// GetApiInventoryApiIdFromHostAndPortParams defines parameters for GetApiInventoryApiIdFromHostAndPort.
type GetApiInventoryApiIdFromHostAndPortParams struct {
	// api host name
	Host Host `form:"host" json:"host"`

	// api port
	Port Port `form:"port" json:"port"`
}

// PutApiInventoryApiIdSpecsProvidedSpecJSONBody defines parameters for PutApiInventoryApiIdSpecsProvidedSpec.
type PutApiInventoryApiIdSpecsProvidedSpecJSONBody = externalRef0.RawSpec

// PostApiInventoryReviewIdApprovedReviewJSONBody defines parameters for PostApiInventoryReviewIdApprovedReview.
type PostApiInventoryReviewIdApprovedReviewJSONBody = externalRef0.ApprovedReview

// GetApiUsageHitCountParams defines parameters for GetApiUsageHitCount.
type GetApiUsageHitCountParams struct {
	// Start time of the query
	StartTime StartTime `form:"startTime" json:"startTime"`

	// End time of the query
	EndTime               EndTime                      `form:"endTime" json:"endTime"`
	ShowNonApi            ShowNonApi                   `form:"showNonApi" json:"showNonApi"`
	MethodIs              *MethodIsFilter              `form:"method[is],omitempty" json:"method[is],omitempty"`
	ProvidedPathIDIs      *ProvidedPathIDIsFilter      `form:"providedPathID[is],omitempty" json:"providedPathID[is],omitempty"`
	ReconstructedPathIDIs *ReconstructedPathIDIsFilter `form:"reconstructedPathID[is],omitempty" json:"reconstructedPathID[is],omitempty"`
	PathIs                *PathIsFilter                `form:"path[is],omitempty" json:"path[is],omitempty"`
	PathIsNot             *PathIsNotFilter             `form:"path[isNot],omitempty" json:"path[isNot],omitempty"`
	PathStart             *PathStartsWithFilter        `form:"path[start],omitempty" json:"path[start],omitempty"`
	PathEnd               *PathEndsWithFilter          `form:"path[end],omitempty" json:"path[end],omitempty"`
	PathContains          *PathContainsFilter          `form:"path[contains],omitempty" json:"path[contains],omitempty"`
	StatusCodeIs          *StatusCodeIsFilter          `form:"statusCode[is],omitempty" json:"statusCode[is],omitempty"`
	StatusCodeIsNot       *StatusCodeIsNotFilter       `form:"statusCode[isNot],omitempty" json:"statusCode[isNot],omitempty"`

	// greater than or equal
	StatusCodeGte *StatusCodeGteFilter `form:"statusCode[gte],omitempty" json:"statusCode[gte],omitempty"`

	// less than or equal
	StatusCodeLte        *StatusCodeLteFilter        `form:"statusCode[lte],omitempty" json:"statusCode[lte],omitempty"`
	SourceIPIs           *SourceIPIsFilter           `form:"sourceIP[is],omitempty" json:"sourceIP[is],omitempty"`
	SourceIPIsNot        *SourceIPIsNotFilter        `form:"sourceIP[isNot],omitempty" json:"sourceIP[isNot],omitempty"`
	DestinationIPIs      *DestinationIPIsFilter      `form:"destinationIP[is],omitempty" json:"destinationIP[is],omitempty"`
	DestinationIPIsNot   *DestinationIPIsNotFilter   `form:"destinationIP[isNot],omitempty" json:"destinationIP[isNot],omitempty"`
	DestinationPortIs    *DestinationPortIsFilter    `form:"destinationPort[is],omitempty" json:"destinationPort[is],omitempty"`
	DestinationPortIsNot *DestinationPortIsNotFilter `form:"destinationPort[isNot],omitempty" json:"destinationPort[isNot],omitempty"`
	HasSpecDiffIs        *HasSpecDiffFilter          `form:"hasSpecDiff[is],omitempty" json:"hasSpecDiff[is],omitempty"`
	SpecDiffTypeIs       *SpecDiffTypeIsFilter       `form:"specDiffType[is],omitempty" json:"specDiffType[is],omitempty"`
	SpecIs               *SpecIsFilter               `form:"spec[is],omitempty" json:"spec[is],omitempty"`
	SpecIsNot            *SpecIsNotFilter            `form:"spec[isNot],omitempty" json:"spec[isNot],omitempty"`
	SpecStart            *SpecStartsWithFilter       `form:"spec[start],omitempty" json:"spec[start],omitempty"`
	SpecEnd              *SpecEndsWithFilter         `form:"spec[end],omitempty" json:"spec[end],omitempty"`
	SpecContains         *SpecContainsFilter         `form:"spec[contains],omitempty" json:"spec[contains],omitempty"`
}

// GetDashboardApiUsageParams defines parameters for GetDashboardApiUsage.
type GetDashboardApiUsageParams struct {
	// Start time of the query
	StartTime StartTime `form:"startTime" json:"startTime"`

	// End time of the query
	EndTime EndTime `form:"endTime" json:"endTime"`
}

// BflaGetAPIFindingsForAPIParams defines parameters for BflaGetAPIFindingsForAPI.
type BflaGetAPIFindingsForAPIParams struct {
	// Should findings include sensitive data ?
	Sensitive *externalRef0.Sensitive `form:"sensitive,omitempty" json:"sensitive,omitempty"`
}

// BflaGetApiFindingsParams defines parameters for BflaGetApiFindings.
type BflaGetApiFindingsParams struct {
	// Should findings include sensitive data ?
	Sensitive *externalRef0.Sensitive `form:"sensitive,omitempty" json:"sensitive,omitempty"`
}

// PostModulesBflaAuthorizationModelApiIDJSONBody defines parameters for PostModulesBflaAuthorizationModelApiID.
type PostModulesBflaAuthorizationModelApiIDJSONBody = AuthorizationModel

// PutModulesBflaAuthorizationModelApiIDApproveParams defines parameters for PutModulesBflaAuthorizationModelApiIDApprove.
type PutModulesBflaAuthorizationModelApiIDApproveParams struct {
	Method       string `form:"method" json:"method"`
	Path         string `form:"path" json:"path"`
	K8sClientUid string `form:"k8sClientUid" json:"k8sClientUid"`
}

// PutModulesBflaAuthorizationModelApiIDDenyParams defines parameters for PutModulesBflaAuthorizationModelApiIDDeny.
type PutModulesBflaAuthorizationModelApiIDDenyParams struct {
	Method       string `form:"method" json:"method"`
	Path         string `form:"path" json:"path"`
	K8sClientUid string `form:"k8sClientUid" json:"k8sClientUid"`
}

// PutModulesBflaAuthorizationModelApiIDLearningStartParams defines parameters for PutModulesBflaAuthorizationModelApiIDLearningStart.
type PutModulesBflaAuthorizationModelApiIDLearningStartParams struct {
	NrTraces *int `form:"nr_traces,omitempty" json:"nr_traces,omitempty"`
}

// FuzzerGetAPIFindingsParams defines parameters for FuzzerGetAPIFindings.
type FuzzerGetAPIFindingsParams struct {
	// Should findings include sensitive data ?
	Sensitive *externalRef0.Sensitive `form:"sensitive,omitempty" json:"sensitive,omitempty"`
}

// FuzzerStartTestJSONBody defines parameters for FuzzerStartTest.
type FuzzerStartTestJSONBody = TestInput

// FuzzerPostUpdateStatusJSONBody defines parameters for FuzzerPostUpdateStatus.
type FuzzerPostUpdateStatusJSONBody = FuzzingStatusAndReport

// TraceanalyzerGetApiFindingsParams defines parameters for TraceanalyzerGetApiFindings.
type TraceanalyzerGetApiFindingsParams struct {
	// Should findings include sensitive data ?
	Sensitive *externalRef0.Sensitive `form:"sensitive,omitempty" json:"sensitive,omitempty"`
}

// TraceanalyzerGetEventAnnotationsParams defines parameters for TraceanalyzerGetEventAnnotations.
type TraceanalyzerGetEventAnnotationsParams struct {
	Redacted *Redacted `form:"redacted,omitempty" json:"redacted,omitempty"`
}

// PostApiInventoryJSONRequestBody defines body for PostApiInventory for application/json ContentType.
type PostApiInventoryJSONRequestBody = PostApiInventoryJSONBody

// PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody defines body for PutApiInventoryApiIdSpecsProvidedSpec for application/json ContentType.
type PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody = PutApiInventoryApiIdSpecsProvidedSpecJSONBody

// PostApiInventoryReviewIdApprovedReviewJSONRequestBody defines body for PostApiInventoryReviewIdApprovedReview for application/json ContentType.
type PostApiInventoryReviewIdApprovedReviewJSONRequestBody = PostApiInventoryReviewIdApprovedReviewJSONBody

// PostModulesBflaAuthorizationModelApiIDJSONRequestBody defines body for PostModulesBflaAuthorizationModelApiID for application/json ContentType.
type PostModulesBflaAuthorizationModelApiIDJSONRequestBody = PostModulesBflaAuthorizationModelApiIDJSONBody

// FuzzerStartTestJSONRequestBody defines body for FuzzerStartTest for application/json ContentType.
type FuzzerStartTestJSONRequestBody = FuzzerStartTestJSONBody

// FuzzerPostUpdateStatusJSONRequestBody defines body for FuzzerPostUpdateStatus for application/json ContentType.
type FuzzerPostUpdateStatusJSONRequestBody = FuzzerPostUpdateStatusJSONBody

func (t AuthorizationScheme) AsBasicAuth() (BasicAuth, error) {
	var body BasicAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromBasicAuth(v BasicAuth) error {
	v.Type = "BasicAuth"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) AsApiToken() (ApiToken, error) {
	var body ApiToken
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromApiToken(v ApiToken) error {
	v.Type = "ApiToken"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) AsBearerToken() (BearerToken, error) {
	var body BearerToken
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AuthorizationScheme) FromBearerToken(v BearerToken) error {
	v.Type = "BearerToken"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AuthorizationScheme) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthorizationScheme) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ApiToken":
		return t.AsApiToken()
	case "BasicAuth":
		return t.AsBasicAuth()
	case "BearerToken":
		return t.AsBearerToken()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthorizationScheme) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthorizationScheme) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiEvents request
	GetApiEvents(ctx context.Context, params *GetApiEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiEventsEventId request
	GetApiEventsEventId(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiEventsEventIdProvidedSpecDiff request
	GetApiEventsEventIdProvidedSpecDiff(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiEventsEventIdReconstructedSpecDiff request
	GetApiEventsEventIdReconstructedSpecDiff(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventory request
	GetApiInventory(ctx context.Context, params *GetApiInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInventory request with any body
	PostApiInventoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInventory(ctx context.Context, body PostApiInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdFromHostAndPort request
	GetApiInventoryApiIdFromHostAndPort(ctx context.Context, params *GetApiInventoryApiIdFromHostAndPortParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdApiInfo request
	GetApiInventoryApiIdApiInfo(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdProvidedSwaggerJson request
	GetApiInventoryApiIdProvidedSwaggerJson(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdReconstructedSwaggerJson request
	GetApiInventoryApiIdReconstructedSwaggerJson(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdSpecs request
	GetApiInventoryApiIdSpecs(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiInventoryApiIdSpecsProvidedSpec request
	DeleteApiInventoryApiIdSpecsProvidedSpec(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiInventoryApiIdSpecsProvidedSpec request with any body
	PutApiInventoryApiIdSpecsProvidedSpecWithBody(ctx context.Context, apiId ApiId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiInventoryApiIdSpecsProvidedSpec(ctx context.Context, apiId ApiId, body PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiInventoryApiIdSpecsReconstructedSpec request
	DeleteApiInventoryApiIdSpecsReconstructedSpec(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInventoryApiIdSuggestedReview request
	GetApiInventoryApiIdSuggestedReview(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInventoryReviewIdApprovedReview request with any body
	PostApiInventoryReviewIdApprovedReviewWithBody(ctx context.Context, reviewId ReviewId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiInventoryReviewIdApprovedReview(ctx context.Context, reviewId ReviewId, body PostApiInventoryReviewIdApprovedReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsageHitCount request
	GetApiUsageHitCount(ctx context.Context, params *GetApiUsageHitCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardApiUsage request
	GetDashboardApiUsage(ctx context.Context, params *GetDashboardApiUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardApiUsageLatestDiffs request
	GetDashboardApiUsageLatestDiffs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardApiUsageMostUsed request
	GetDashboardApiUsageMostUsed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatures request
	GetFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BflaGetAPIFindingsForAPI request
	BflaGetAPIFindingsForAPI(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetAPIFindingsForAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BflaGetApiFindings request
	BflaGetApiFindings(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetApiFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModulesBflaAuthorizationModelApiID request
	GetModulesBflaAuthorizationModelApiID(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostModulesBflaAuthorizationModelApiID request with any body
	PostModulesBflaAuthorizationModelApiIDWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostModulesBflaAuthorizationModelApiID(ctx context.Context, apiID externalRef0.ApiID, body PostModulesBflaAuthorizationModelApiIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDApprove request
	PutModulesBflaAuthorizationModelApiIDApprove(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDApproveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDDeny request
	PutModulesBflaAuthorizationModelApiIDDeny(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDDenyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDDetectionStart request
	PutModulesBflaAuthorizationModelApiIDDetectionStart(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDDetectionStop request
	PutModulesBflaAuthorizationModelApiIDDetectionStop(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDLearningStart request
	PutModulesBflaAuthorizationModelApiIDLearningStart(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDLearningStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaAuthorizationModelApiIDLearningStop request
	PutModulesBflaAuthorizationModelApiIDLearningStop(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostModulesBflaAuthorizationModelApiIDReset request
	PostModulesBflaAuthorizationModelApiIDReset(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModulesBflaAuthorizationModelApiIDState request
	GetModulesBflaAuthorizationModelApiIDState(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BflagetEvent request
	BflagetEvent(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutModulesBflaEventIdOperation request
	PutModulesBflaEventIdOperation(ctx context.Context, id int, operation OperationEnum, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BflagetVersion request
	BflagetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Differstart request
	Differstart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Differstop request
	Differstop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiffergetVersion request
	DiffergetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetAnnotatedSpec request
	FuzzerGetAnnotatedSpec(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetAPIFindings request
	FuzzerGetAPIFindings(ctx context.Context, apiID externalRef0.ApiID, params *FuzzerGetAPIFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetTestProgress request
	FuzzerGetTestProgress(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetTestReport request
	FuzzerGetTestReport(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerStartTest request with any body
	FuzzerStartTestWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FuzzerStartTest(ctx context.Context, apiID externalRef0.ApiID, body FuzzerStartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerStopTest request
	FuzzerStopTest(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetReport request
	FuzzerGetReport(ctx context.Context, apiID externalRef0.ApiID, timestamp int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzergetState request
	FuzzergetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetTests request
	FuzzerGetTests(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerGetUpdateStatus request
	FuzzerGetUpdateStatus(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzerPostUpdateStatus request with any body
	FuzzerPostUpdateStatusWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FuzzerPostUpdateStatus(ctx context.Context, apiID externalRef0.ApiID, body FuzzerPostUpdateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FuzzergetVersion request
	FuzzergetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceanalyzerGetApiFindings request
	TraceanalyzerGetApiFindings(ctx context.Context, apiID externalRef0.ApiID, params *TraceanalyzerGetApiFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceanalyzerResetApiFindings request
	TraceanalyzerResetApiFindings(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceanalyzerGetEventAnnotations request
	TraceanalyzerGetEventAnnotations(ctx context.Context, eventID int64, params *TraceanalyzerGetEventAnnotationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceanalyzerStartTraceAnalysis request
	TraceanalyzerStartTraceAnalysis(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceanalyzerStopTraceAnalysis request
	TraceanalyzerStopTraceAnalysis(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiEvents(ctx context.Context, params *GetApiEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiEventsEventId(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsEventIdRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiEventsEventIdProvidedSpecDiff(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsEventIdProvidedSpecDiffRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiEventsEventIdReconstructedSpecDiff(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsEventIdReconstructedSpecDiffRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventory(ctx context.Context, params *GetApiInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInventoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInventoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInventory(ctx context.Context, body PostApiInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInventoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdFromHostAndPort(ctx context.Context, params *GetApiInventoryApiIdFromHostAndPortParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdFromHostAndPortRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdApiInfo(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdApiInfoRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdProvidedSwaggerJson(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdProvidedSwaggerJsonRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdReconstructedSwaggerJson(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdReconstructedSwaggerJsonRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdSpecs(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdSpecsRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiInventoryApiIdSpecsProvidedSpec(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiInventoryApiIdSpecsProvidedSpecRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInventoryApiIdSpecsProvidedSpecWithBody(ctx context.Context, apiId ApiId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInventoryApiIdSpecsProvidedSpecRequestWithBody(c.Server, apiId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiInventoryApiIdSpecsProvidedSpec(ctx context.Context, apiId ApiId, body PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiInventoryApiIdSpecsProvidedSpecRequest(c.Server, apiId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiInventoryApiIdSpecsReconstructedSpec(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiInventoryApiIdSpecsReconstructedSpecRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInventoryApiIdSuggestedReview(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInventoryApiIdSuggestedReviewRequest(c.Server, apiId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInventoryReviewIdApprovedReviewWithBody(ctx context.Context, reviewId ReviewId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInventoryReviewIdApprovedReviewRequestWithBody(c.Server, reviewId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInventoryReviewIdApprovedReview(ctx context.Context, reviewId ReviewId, body PostApiInventoryReviewIdApprovedReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInventoryReviewIdApprovedReviewRequest(c.Server, reviewId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsageHitCount(ctx context.Context, params *GetApiUsageHitCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsageHitCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardApiUsage(ctx context.Context, params *GetDashboardApiUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardApiUsageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardApiUsageLatestDiffs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardApiUsageLatestDiffsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardApiUsageMostUsed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardApiUsageMostUsedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BflaGetAPIFindingsForAPI(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetAPIFindingsForAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBflaGetAPIFindingsForAPIRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BflaGetApiFindings(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetApiFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBflaGetApiFindingsRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModulesBflaAuthorizationModelApiID(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModulesBflaAuthorizationModelApiIDRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostModulesBflaAuthorizationModelApiIDWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostModulesBflaAuthorizationModelApiIDRequestWithBody(c.Server, apiID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostModulesBflaAuthorizationModelApiID(ctx context.Context, apiID externalRef0.ApiID, body PostModulesBflaAuthorizationModelApiIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostModulesBflaAuthorizationModelApiIDRequest(c.Server, apiID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDApprove(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDApproveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDApproveRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDDeny(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDDenyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDDenyRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDDetectionStart(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDDetectionStartRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDDetectionStop(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDDetectionStopRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDLearningStart(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDLearningStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDLearningStartRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaAuthorizationModelApiIDLearningStop(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaAuthorizationModelApiIDLearningStopRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostModulesBflaAuthorizationModelApiIDReset(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostModulesBflaAuthorizationModelApiIDResetRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModulesBflaAuthorizationModelApiIDState(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModulesBflaAuthorizationModelApiIDStateRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BflagetEvent(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBflagetEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutModulesBflaEventIdOperation(ctx context.Context, id int, operation OperationEnum, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutModulesBflaEventIdOperationRequest(c.Server, id, operation)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BflagetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBflagetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Differstart(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDifferstartRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Differstop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDifferstopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffergetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffergetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetAnnotatedSpec(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetAnnotatedSpecRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetAPIFindings(ctx context.Context, apiID externalRef0.ApiID, params *FuzzerGetAPIFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetAPIFindingsRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetTestProgress(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetTestProgressRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetTestReport(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetTestReportRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerStartTestWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerStartTestRequestWithBody(c.Server, apiID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerStartTest(ctx context.Context, apiID externalRef0.ApiID, body FuzzerStartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerStartTestRequest(c.Server, apiID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerStopTest(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerStopTestRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetReport(ctx context.Context, apiID externalRef0.ApiID, timestamp int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetReportRequest(c.Server, apiID, timestamp)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzergetState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzergetStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetTests(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetTestsRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerGetUpdateStatus(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerGetUpdateStatusRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerPostUpdateStatusWithBody(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerPostUpdateStatusRequestWithBody(c.Server, apiID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzerPostUpdateStatus(ctx context.Context, apiID externalRef0.ApiID, body FuzzerPostUpdateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzerPostUpdateStatusRequest(c.Server, apiID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FuzzergetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFuzzergetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceanalyzerGetApiFindings(ctx context.Context, apiID externalRef0.ApiID, params *TraceanalyzerGetApiFindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceanalyzerGetApiFindingsRequest(c.Server, apiID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceanalyzerResetApiFindings(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceanalyzerResetApiFindingsRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceanalyzerGetEventAnnotations(ctx context.Context, eventID int64, params *TraceanalyzerGetEventAnnotationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceanalyzerGetEventAnnotationsRequest(c.Server, eventID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceanalyzerStartTraceAnalysis(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceanalyzerStartTraceAnalysisRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceanalyzerStopTraceAnalysis(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceanalyzerStopTraceAnalysisRequest(c.Server, apiID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiEventsRequest generates requests for GetApiEvents
func NewGetApiEventsRequest(server string, params *GetApiEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiEvents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.SortDir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDir", runtime.ParamLocationQuery, *params.SortDir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showNonApi", runtime.ParamLocationQuery, params.ShowNonApi); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ApiInfoIdIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apiInfoId[is]", runtime.ParamLocationQuery, *params.ApiInfoIdIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MethodIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method[is]", runtime.ParamLocationQuery, *params.MethodIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[is]", runtime.ParamLocationQuery, *params.PathIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[isNot]", runtime.ParamLocationQuery, *params.PathIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[start]", runtime.ParamLocationQuery, *params.PathStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[end]", runtime.ParamLocationQuery, *params.PathEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[contains]", runtime.ParamLocationQuery, *params.PathContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[is]", runtime.ParamLocationQuery, *params.StatusCodeIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[isNot]", runtime.ParamLocationQuery, *params.StatusCodeIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[gte]", runtime.ParamLocationQuery, *params.StatusCodeGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[lte]", runtime.ParamLocationQuery, *params.StatusCodeLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SourceIPIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceIP[is]", runtime.ParamLocationQuery, *params.SourceIPIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SourceIPIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceIP[isNot]", runtime.ParamLocationQuery, *params.SourceIPIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationIPIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationIP[is]", runtime.ParamLocationQuery, *params.DestinationIPIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationIPIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationIP[isNot]", runtime.ParamLocationQuery, *params.DestinationIPIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationPortIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationPort[is]", runtime.ParamLocationQuery, *params.DestinationPortIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationPortIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationPort[isNot]", runtime.ParamLocationQuery, *params.DestinationPortIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasSpecDiffIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasSpecDiff[is]", runtime.ParamLocationQuery, *params.HasSpecDiffIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecDiffTypeIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "specDiffType[is]", runtime.ParamLocationQuery, *params.SpecDiffTypeIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[is]", runtime.ParamLocationQuery, *params.SpecIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[isNot]", runtime.ParamLocationQuery, *params.SpecIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[start]", runtime.ParamLocationQuery, *params.SpecStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[end]", runtime.ParamLocationQuery, *params.SpecEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[contains]", runtime.ParamLocationQuery, *params.SpecContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AlertIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alert[is]", runtime.ParamLocationQuery, *params.AlertIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AlertTypeIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alertType[is]", runtime.ParamLocationQuery, *params.AlertTypeIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiEventsEventIdRequest generates requests for GetApiEventsEventId
func NewGetApiEventsEventIdRequest(server string, eventId uint32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiEvents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiEventsEventIdProvidedSpecDiffRequest generates requests for GetApiEventsEventIdProvidedSpecDiff
func NewGetApiEventsEventIdProvidedSpecDiffRequest(server string, eventId uint32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiEvents/%s/providedSpecDiff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiEventsEventIdReconstructedSpecDiffRequest generates requests for GetApiEventsEventIdReconstructedSpecDiff
func NewGetApiEventsEventIdReconstructedSpecDiffRequest(server string, eventId uint32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiEvents/%s/reconstructedSpecDiff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryRequest generates requests for GetApiInventory
func NewGetApiInventoryRequest(server string, params *GetApiInventoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, params.PageSize); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, params.SortKey); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.SortDir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDir", runtime.ParamLocationQuery, *params.SortDir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[is]", runtime.ParamLocationQuery, *params.NameIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[isNot]", runtime.ParamLocationQuery, *params.NameIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[start]", runtime.ParamLocationQuery, *params.NameStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[end]", runtime.ParamLocationQuery, *params.NameEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name[contains]", runtime.ParamLocationQuery, *params.NameContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PortIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port[is]", runtime.ParamLocationQuery, *params.PortIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PortIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port[isNot]", runtime.ParamLocationQuery, *params.PortIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasProvidedSpecIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasProvidedSpec[is]", runtime.ParamLocationQuery, *params.HasProvidedSpecIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasReconstructedSpecIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasReconstructedSpec[is]", runtime.ParamLocationQuery, *params.HasReconstructedSpecIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ApiId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apiId", runtime.ParamLocationQuery, *params.ApiId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInventoryRequest calls the generic PostApiInventory builder with application/json body
func NewPostApiInventoryRequest(server string, body PostApiInventoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInventoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiInventoryRequestWithBody generates requests for PostApiInventory with any type of body
func NewPostApiInventoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiInventoryApiIdFromHostAndPortRequest generates requests for GetApiInventoryApiIdFromHostAndPort
func NewGetApiInventoryApiIdFromHostAndPortRequest(server string, params *GetApiInventoryApiIdFromHostAndPortParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/apiId/fromHostAndPort")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, params.Port); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryApiIdApiInfoRequest generates requests for GetApiInventoryApiIdApiInfo
func NewGetApiInventoryApiIdApiInfoRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/apiInfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryApiIdProvidedSwaggerJsonRequest generates requests for GetApiInventoryApiIdProvidedSwaggerJson
func NewGetApiInventoryApiIdProvidedSwaggerJsonRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/provided_swagger.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryApiIdReconstructedSwaggerJsonRequest generates requests for GetApiInventoryApiIdReconstructedSwaggerJson
func NewGetApiInventoryApiIdReconstructedSwaggerJsonRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/reconstructed_swagger.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryApiIdSpecsRequest generates requests for GetApiInventoryApiIdSpecs
func NewGetApiInventoryApiIdSpecsRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/specs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiInventoryApiIdSpecsProvidedSpecRequest generates requests for DeleteApiInventoryApiIdSpecsProvidedSpec
func NewDeleteApiInventoryApiIdSpecsProvidedSpecRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/specs/providedSpec", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiInventoryApiIdSpecsProvidedSpecRequest calls the generic PutApiInventoryApiIdSpecsProvidedSpec builder with application/json body
func NewPutApiInventoryApiIdSpecsProvidedSpecRequest(server string, apiId ApiId, body PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiInventoryApiIdSpecsProvidedSpecRequestWithBody(server, apiId, "application/json", bodyReader)
}

// NewPutApiInventoryApiIdSpecsProvidedSpecRequestWithBody generates requests for PutApiInventoryApiIdSpecsProvidedSpec with any type of body
func NewPutApiInventoryApiIdSpecsProvidedSpecRequestWithBody(server string, apiId ApiId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/specs/providedSpec", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiInventoryApiIdSpecsReconstructedSpecRequest generates requests for DeleteApiInventoryApiIdSpecsReconstructedSpec
func NewDeleteApiInventoryApiIdSpecsReconstructedSpecRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/specs/reconstructedSpec", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInventoryApiIdSuggestedReviewRequest generates requests for GetApiInventoryApiIdSuggestedReview
func NewGetApiInventoryApiIdSuggestedReviewRequest(server string, apiId ApiId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiId", runtime.ParamLocationPath, apiId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/suggestedReview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInventoryReviewIdApprovedReviewRequest calls the generic PostApiInventoryReviewIdApprovedReview builder with application/json body
func NewPostApiInventoryReviewIdApprovedReviewRequest(server string, reviewId ReviewId, body PostApiInventoryReviewIdApprovedReviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiInventoryReviewIdApprovedReviewRequestWithBody(server, reviewId, "application/json", bodyReader)
}

// NewPostApiInventoryReviewIdApprovedReviewRequestWithBody generates requests for PostApiInventoryReviewIdApprovedReview with any type of body
func NewPostApiInventoryReviewIdApprovedReviewRequestWithBody(server string, reviewId ReviewId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reviewId", runtime.ParamLocationPath, reviewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiInventory/%s/approvedReview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiUsageHitCountRequest generates requests for GetApiUsageHitCount
func NewGetApiUsageHitCountRequest(server string, params *GetApiUsageHitCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apiUsage/hitCount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showNonApi", runtime.ParamLocationQuery, params.ShowNonApi); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.MethodIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method[is]", runtime.ParamLocationQuery, *params.MethodIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProvidedPathIDIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "providedPathID[is]", runtime.ParamLocationQuery, *params.ProvidedPathIDIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ReconstructedPathIDIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reconstructedPathID[is]", runtime.ParamLocationQuery, *params.ReconstructedPathIDIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[is]", runtime.ParamLocationQuery, *params.PathIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[isNot]", runtime.ParamLocationQuery, *params.PathIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[start]", runtime.ParamLocationQuery, *params.PathStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[end]", runtime.ParamLocationQuery, *params.PathEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PathContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path[contains]", runtime.ParamLocationQuery, *params.PathContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[is]", runtime.ParamLocationQuery, *params.StatusCodeIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[isNot]", runtime.ParamLocationQuery, *params.StatusCodeIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeGte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[gte]", runtime.ParamLocationQuery, *params.StatusCodeGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCodeLte != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusCode[lte]", runtime.ParamLocationQuery, *params.StatusCodeLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SourceIPIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceIP[is]", runtime.ParamLocationQuery, *params.SourceIPIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SourceIPIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceIP[isNot]", runtime.ParamLocationQuery, *params.SourceIPIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationIPIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationIP[is]", runtime.ParamLocationQuery, *params.DestinationIPIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationIPIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationIP[isNot]", runtime.ParamLocationQuery, *params.DestinationIPIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationPortIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationPort[is]", runtime.ParamLocationQuery, *params.DestinationPortIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationPortIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destinationPort[isNot]", runtime.ParamLocationQuery, *params.DestinationPortIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasSpecDiffIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasSpecDiff[is]", runtime.ParamLocationQuery, *params.HasSpecDiffIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecDiffTypeIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "specDiffType[is]", runtime.ParamLocationQuery, *params.SpecDiffTypeIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecIs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[is]", runtime.ParamLocationQuery, *params.SpecIs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecIsNot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[isNot]", runtime.ParamLocationQuery, *params.SpecIsNot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[start]", runtime.ParamLocationQuery, *params.SpecStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[end]", runtime.ParamLocationQuery, *params.SpecEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpecContains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "spec[contains]", runtime.ParamLocationQuery, *params.SpecContains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardApiUsageRequest generates requests for GetDashboardApiUsage
func NewGetDashboardApiUsageRequest(server string, params *GetDashboardApiUsageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/apiUsage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardApiUsageLatestDiffsRequest generates requests for GetDashboardApiUsageLatestDiffs
func NewGetDashboardApiUsageLatestDiffsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/apiUsage/latestDiffs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardApiUsageMostUsedRequest generates requests for GetDashboardApiUsageMostUsed
func NewGetDashboardApiUsageMostUsedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/apiUsage/mostUsed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeaturesRequest generates requests for GetFeatures
func NewGetFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBflaGetAPIFindingsForAPIRequest generates requests for BflaGetAPIFindingsForAPI
func NewBflaGetAPIFindingsForAPIRequest(server string, apiID externalRef0.ApiID, params *BflaGetAPIFindingsForAPIParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/api/findings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sensitive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sensitive", runtime.ParamLocationQuery, *params.Sensitive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBflaGetApiFindingsRequest generates requests for BflaGetApiFindings
func NewBflaGetApiFindingsRequest(server string, apiID externalRef0.ApiID, params *BflaGetApiFindingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/apiFindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sensitive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sensitive", runtime.ParamLocationQuery, *params.Sensitive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModulesBflaAuthorizationModelApiIDRequest generates requests for GetModulesBflaAuthorizationModelApiID
func NewGetModulesBflaAuthorizationModelApiIDRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostModulesBflaAuthorizationModelApiIDRequest calls the generic PostModulesBflaAuthorizationModelApiID builder with application/json body
func NewPostModulesBflaAuthorizationModelApiIDRequest(server string, apiID externalRef0.ApiID, body PostModulesBflaAuthorizationModelApiIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostModulesBflaAuthorizationModelApiIDRequestWithBody(server, apiID, "application/json", bodyReader)
}

// NewPostModulesBflaAuthorizationModelApiIDRequestWithBody generates requests for PostModulesBflaAuthorizationModelApiID with any type of body
func NewPostModulesBflaAuthorizationModelApiIDRequestWithBody(server string, apiID externalRef0.ApiID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDApproveRequest generates requests for PutModulesBflaAuthorizationModelApiIDApprove
func NewPutModulesBflaAuthorizationModelApiIDApproveRequest(server string, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDApproveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/approve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, params.Method); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8sClientUid", runtime.ParamLocationQuery, params.K8sClientUid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDDenyRequest generates requests for PutModulesBflaAuthorizationModelApiIDDeny
func NewPutModulesBflaAuthorizationModelApiIDDenyRequest(server string, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDDenyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/deny", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, params.Method); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8sClientUid", runtime.ParamLocationQuery, params.K8sClientUid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDDetectionStartRequest generates requests for PutModulesBflaAuthorizationModelApiIDDetectionStart
func NewPutModulesBflaAuthorizationModelApiIDDetectionStartRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/detection/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDDetectionStopRequest generates requests for PutModulesBflaAuthorizationModelApiIDDetectionStop
func NewPutModulesBflaAuthorizationModelApiIDDetectionStopRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/detection/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDLearningStartRequest generates requests for PutModulesBflaAuthorizationModelApiIDLearningStart
func NewPutModulesBflaAuthorizationModelApiIDLearningStartRequest(server string, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDLearningStartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/learning/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NrTraces != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nr_traces", runtime.ParamLocationQuery, *params.NrTraces); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaAuthorizationModelApiIDLearningStopRequest generates requests for PutModulesBflaAuthorizationModelApiIDLearningStop
func NewPutModulesBflaAuthorizationModelApiIDLearningStopRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/learning/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostModulesBflaAuthorizationModelApiIDResetRequest generates requests for PostModulesBflaAuthorizationModelApiIDReset
func NewPostModulesBflaAuthorizationModelApiIDResetRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModulesBflaAuthorizationModelApiIDStateRequest generates requests for GetModulesBflaAuthorizationModelApiIDState
func NewGetModulesBflaAuthorizationModelApiIDStateRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/authorizationModel/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBflagetEventRequest generates requests for BflagetEvent
func NewBflagetEventRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutModulesBflaEventIdOperationRequest generates requests for PutModulesBflaEventIdOperation
func NewPutModulesBflaEventIdOperationRequest(server string, id int, operation OperationEnum) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "operation", runtime.ParamLocationPath, operation)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/event/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBflagetVersionRequest generates requests for BflagetVersion
func NewBflagetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/bfla/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDifferstartRequest generates requests for Differstart
func NewDifferstartRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/differ/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDifferstopRequest generates requests for Differstop
func NewDifferstopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/differ/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDiffergetVersionRequest generates requests for DiffergetVersion
func NewDiffergetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/differ/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetAnnotatedSpecRequest generates requests for FuzzerGetAnnotatedSpec
func NewFuzzerGetAnnotatedSpecRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/annotatedspec/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetAPIFindingsRequest generates requests for FuzzerGetAPIFindings
func NewFuzzerGetAPIFindingsRequest(server string, apiID externalRef0.ApiID, params *FuzzerGetAPIFindingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/apiFindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sensitive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sensitive", runtime.ParamLocationQuery, *params.Sensitive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetTestProgressRequest generates requests for FuzzerGetTestProgress
func NewFuzzerGetTestProgressRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/fuzz/%s/progress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetTestReportRequest generates requests for FuzzerGetTestReport
func NewFuzzerGetTestReportRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/fuzz/%s/report", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerStartTestRequest calls the generic FuzzerStartTest builder with application/json body
func NewFuzzerStartTestRequest(server string, apiID externalRef0.ApiID, body FuzzerStartTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFuzzerStartTestRequestWithBody(server, apiID, "application/json", bodyReader)
}

// NewFuzzerStartTestRequestWithBody generates requests for FuzzerStartTest with any type of body
func NewFuzzerStartTestRequestWithBody(server string, apiID externalRef0.ApiID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/fuzz/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFuzzerStopTestRequest generates requests for FuzzerStopTest
func NewFuzzerStopTestRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/fuzz/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetReportRequest generates requests for FuzzerGetReport
func NewFuzzerGetReportRequest(server string, apiID externalRef0.ApiID, timestamp int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, timestamp)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/report/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzergetStateRequest generates requests for FuzzergetState
func NewFuzzergetStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetTestsRequest generates requests for FuzzerGetTests
func NewFuzzerGetTestsRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/tests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerGetUpdateStatusRequest generates requests for FuzzerGetUpdateStatus
func NewFuzzerGetUpdateStatusRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/updateStatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFuzzerPostUpdateStatusRequest calls the generic FuzzerPostUpdateStatus builder with application/json body
func NewFuzzerPostUpdateStatusRequest(server string, apiID externalRef0.ApiID, body FuzzerPostUpdateStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFuzzerPostUpdateStatusRequestWithBody(server, apiID, "application/json", bodyReader)
}

// NewFuzzerPostUpdateStatusRequestWithBody generates requests for FuzzerPostUpdateStatus with any type of body
func NewFuzzerPostUpdateStatusRequestWithBody(server string, apiID externalRef0.ApiID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/updateStatus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFuzzergetVersionRequest generates requests for FuzzergetVersion
func NewFuzzergetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/fuzzer/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceanalyzerGetApiFindingsRequest generates requests for TraceanalyzerGetApiFindings
func NewTraceanalyzerGetApiFindingsRequest(server string, apiID externalRef0.ApiID, params *TraceanalyzerGetApiFindingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/traceanalyzer/apiFindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sensitive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sensitive", runtime.ParamLocationQuery, *params.Sensitive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceanalyzerResetApiFindingsRequest generates requests for TraceanalyzerResetApiFindings
func NewTraceanalyzerResetApiFindingsRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/traceanalyzer/apiFindings/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceanalyzerGetEventAnnotationsRequest generates requests for TraceanalyzerGetEventAnnotations
func NewTraceanalyzerGetEventAnnotationsRequest(server string, eventID int64, params *TraceanalyzerGetEventAnnotationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventID", runtime.ParamLocationPath, eventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/traceanalyzer/eventAnnotations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Redacted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redacted", runtime.ParamLocationQuery, *params.Redacted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceanalyzerStartTraceAnalysisRequest generates requests for TraceanalyzerStartTraceAnalysis
func NewTraceanalyzerStartTraceAnalysisRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/traceanalyzer/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceanalyzerStopTraceAnalysisRequest generates requests for TraceanalyzerStopTraceAnalysis
func NewTraceanalyzerStopTraceAnalysisRequest(server string, apiID externalRef0.ApiID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiID", runtime.ParamLocationPath, apiID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/modules/traceanalyzer/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiEvents request
	GetApiEventsWithResponse(ctx context.Context, params *GetApiEventsParams, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error)

	// GetApiEventsEventId request
	GetApiEventsEventIdWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdResponse, error)

	// GetApiEventsEventIdProvidedSpecDiff request
	GetApiEventsEventIdProvidedSpecDiffWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdProvidedSpecDiffResponse, error)

	// GetApiEventsEventIdReconstructedSpecDiff request
	GetApiEventsEventIdReconstructedSpecDiffWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdReconstructedSpecDiffResponse, error)

	// GetApiInventory request
	GetApiInventoryWithResponse(ctx context.Context, params *GetApiInventoryParams, reqEditors ...RequestEditorFn) (*GetApiInventoryResponse, error)

	// PostApiInventory request with any body
	PostApiInventoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInventoryResponse, error)

	PostApiInventoryWithResponse(ctx context.Context, body PostApiInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInventoryResponse, error)

	// GetApiInventoryApiIdFromHostAndPort request
	GetApiInventoryApiIdFromHostAndPortWithResponse(ctx context.Context, params *GetApiInventoryApiIdFromHostAndPortParams, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdFromHostAndPortResponse, error)

	// GetApiInventoryApiIdApiInfo request
	GetApiInventoryApiIdApiInfoWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdApiInfoResponse, error)

	// GetApiInventoryApiIdProvidedSwaggerJson request
	GetApiInventoryApiIdProvidedSwaggerJsonWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdProvidedSwaggerJsonResponse, error)

	// GetApiInventoryApiIdReconstructedSwaggerJson request
	GetApiInventoryApiIdReconstructedSwaggerJsonWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdReconstructedSwaggerJsonResponse, error)

	// GetApiInventoryApiIdSpecs request
	GetApiInventoryApiIdSpecsWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdSpecsResponse, error)

	// DeleteApiInventoryApiIdSpecsProvidedSpec request
	DeleteApiInventoryApiIdSpecsProvidedSpecWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*DeleteApiInventoryApiIdSpecsProvidedSpecResponse, error)

	// PutApiInventoryApiIdSpecsProvidedSpec request with any body
	PutApiInventoryApiIdSpecsProvidedSpecWithBodyWithResponse(ctx context.Context, apiId ApiId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInventoryApiIdSpecsProvidedSpecResponse, error)

	PutApiInventoryApiIdSpecsProvidedSpecWithResponse(ctx context.Context, apiId ApiId, body PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInventoryApiIdSpecsProvidedSpecResponse, error)

	// DeleteApiInventoryApiIdSpecsReconstructedSpec request
	DeleteApiInventoryApiIdSpecsReconstructedSpecWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*DeleteApiInventoryApiIdSpecsReconstructedSpecResponse, error)

	// GetApiInventoryApiIdSuggestedReview request
	GetApiInventoryApiIdSuggestedReviewWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdSuggestedReviewResponse, error)

	// PostApiInventoryReviewIdApprovedReview request with any body
	PostApiInventoryReviewIdApprovedReviewWithBodyWithResponse(ctx context.Context, reviewId ReviewId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInventoryReviewIdApprovedReviewResponse, error)

	PostApiInventoryReviewIdApprovedReviewWithResponse(ctx context.Context, reviewId ReviewId, body PostApiInventoryReviewIdApprovedReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInventoryReviewIdApprovedReviewResponse, error)

	// GetApiUsageHitCount request
	GetApiUsageHitCountWithResponse(ctx context.Context, params *GetApiUsageHitCountParams, reqEditors ...RequestEditorFn) (*GetApiUsageHitCountResponse, error)

	// GetDashboardApiUsage request
	GetDashboardApiUsageWithResponse(ctx context.Context, params *GetDashboardApiUsageParams, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageResponse, error)

	// GetDashboardApiUsageLatestDiffs request
	GetDashboardApiUsageLatestDiffsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageLatestDiffsResponse, error)

	// GetDashboardApiUsageMostUsed request
	GetDashboardApiUsageMostUsedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageMostUsedResponse, error)

	// GetFeatures request
	GetFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error)

	// BflaGetAPIFindingsForAPI request
	BflaGetAPIFindingsForAPIWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetAPIFindingsForAPIParams, reqEditors ...RequestEditorFn) (*BflaGetAPIFindingsForAPIResponse, error)

	// BflaGetApiFindings request
	BflaGetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetApiFindingsParams, reqEditors ...RequestEditorFn) (*BflaGetApiFindingsResponse, error)

	// GetModulesBflaAuthorizationModelApiID request
	GetModulesBflaAuthorizationModelApiIDWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*GetModulesBflaAuthorizationModelApiIDResponse, error)

	// PostModulesBflaAuthorizationModelApiID request with any body
	PostModulesBflaAuthorizationModelApiIDWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResponse, error)

	PostModulesBflaAuthorizationModelApiIDWithResponse(ctx context.Context, apiID externalRef0.ApiID, body PostModulesBflaAuthorizationModelApiIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResponse, error)

	// PutModulesBflaAuthorizationModelApiIDApprove request
	PutModulesBflaAuthorizationModelApiIDApproveWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDApproveParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDApproveResponse, error)

	// PutModulesBflaAuthorizationModelApiIDDeny request
	PutModulesBflaAuthorizationModelApiIDDenyWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDDenyParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDenyResponse, error)

	// PutModulesBflaAuthorizationModelApiIDDetectionStart request
	PutModulesBflaAuthorizationModelApiIDDetectionStartWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDetectionStartResponse, error)

	// PutModulesBflaAuthorizationModelApiIDDetectionStop request
	PutModulesBflaAuthorizationModelApiIDDetectionStopWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDetectionStopResponse, error)

	// PutModulesBflaAuthorizationModelApiIDLearningStart request
	PutModulesBflaAuthorizationModelApiIDLearningStartWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDLearningStartParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDLearningStartResponse, error)

	// PutModulesBflaAuthorizationModelApiIDLearningStop request
	PutModulesBflaAuthorizationModelApiIDLearningStopWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDLearningStopResponse, error)

	// PostModulesBflaAuthorizationModelApiIDReset request
	PostModulesBflaAuthorizationModelApiIDResetWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResetResponse, error)

	// GetModulesBflaAuthorizationModelApiIDState request
	GetModulesBflaAuthorizationModelApiIDStateWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*GetModulesBflaAuthorizationModelApiIDStateResponse, error)

	// BflagetEvent request
	BflagetEventWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*BflagetEventResponse, error)

	// PutModulesBflaEventIdOperation request
	PutModulesBflaEventIdOperationWithResponse(ctx context.Context, id int, operation OperationEnum, reqEditors ...RequestEditorFn) (*PutModulesBflaEventIdOperationResponse, error)

	// BflagetVersion request
	BflagetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BflagetVersionResponse, error)

	// Differstart request
	DifferstartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DifferstartResponse, error)

	// Differstop request
	DifferstopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DifferstopResponse, error)

	// DiffergetVersion request
	DiffergetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiffergetVersionResponse, error)

	// FuzzerGetAnnotatedSpec request
	FuzzerGetAnnotatedSpecWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetAnnotatedSpecResponse, error)

	// FuzzerGetAPIFindings request
	FuzzerGetAPIFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *FuzzerGetAPIFindingsParams, reqEditors ...RequestEditorFn) (*FuzzerGetAPIFindingsResponse, error)

	// FuzzerGetTestProgress request
	FuzzerGetTestProgressWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestProgressResponse, error)

	// FuzzerGetTestReport request
	FuzzerGetTestReportWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestReportResponse, error)

	// FuzzerStartTest request with any body
	FuzzerStartTestWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FuzzerStartTestResponse, error)

	FuzzerStartTestWithResponse(ctx context.Context, apiID externalRef0.ApiID, body FuzzerStartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*FuzzerStartTestResponse, error)

	// FuzzerStopTest request
	FuzzerStopTestWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerStopTestResponse, error)

	// FuzzerGetReport request
	FuzzerGetReportWithResponse(ctx context.Context, apiID externalRef0.ApiID, timestamp int64, reqEditors ...RequestEditorFn) (*FuzzerGetReportResponse, error)

	// FuzzergetState request
	FuzzergetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FuzzergetStateResponse, error)

	// FuzzerGetTests request
	FuzzerGetTestsWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestsResponse, error)

	// FuzzerGetUpdateStatus request
	FuzzerGetUpdateStatusWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetUpdateStatusResponse, error)

	// FuzzerPostUpdateStatus request with any body
	FuzzerPostUpdateStatusWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FuzzerPostUpdateStatusResponse, error)

	FuzzerPostUpdateStatusWithResponse(ctx context.Context, apiID externalRef0.ApiID, body FuzzerPostUpdateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*FuzzerPostUpdateStatusResponse, error)

	// FuzzergetVersion request
	FuzzergetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FuzzergetVersionResponse, error)

	// TraceanalyzerGetApiFindings request
	TraceanalyzerGetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *TraceanalyzerGetApiFindingsParams, reqEditors ...RequestEditorFn) (*TraceanalyzerGetApiFindingsResponse, error)

	// TraceanalyzerResetApiFindings request
	TraceanalyzerResetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerResetApiFindingsResponse, error)

	// TraceanalyzerGetEventAnnotations request
	TraceanalyzerGetEventAnnotationsWithResponse(ctx context.Context, eventID int64, params *TraceanalyzerGetEventAnnotationsParams, reqEditors ...RequestEditorFn) (*TraceanalyzerGetEventAnnotationsResponse, error)

	// TraceanalyzerStartTraceAnalysis request
	TraceanalyzerStartTraceAnalysisWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerStartTraceAnalysisResponse, error)

	// TraceanalyzerStopTraceAnalysis request
	TraceanalyzerStopTraceAnalysisWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerStopTraceAnalysisResponse, error)
}

type GetApiEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// List of API events in the given time range, filters and page. List length must be lower or equal to pageSize
		Items *[]externalRef0.ApiEvent `json:"items,omitempty"`

		// Total events count in the given time range and filters
		Total int `json:"total"`
	}
	JSONDefault *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiEventsEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiEvent
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiEventsEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiEventsEventIdProvidedSpecDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiEventSpecDiff
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiEventsEventIdProvidedSpecDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsEventIdProvidedSpecDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiEventsEventIdReconstructedSpecDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiEventSpecDiff
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiEventsEventIdReconstructedSpecDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsEventIdReconstructedSpecDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// List of filtered APIs in the given page. List length must be lower or equal to pageSize
		Items *[]externalRef0.ApiInfo `json:"items,omitempty"`

		// Total filtered APIs count
		Total int `json:"total"`
	}
	JSONDefault *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiInfo
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostApiInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdFromHostAndPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *uint32
	JSON404      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdFromHostAndPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdFromHostAndPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdApiInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiInfoWithType
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdApiInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdApiInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdProvidedSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdProvidedSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdProvidedSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdReconstructedSwaggerJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdReconstructedSwaggerJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdReconstructedSwaggerJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdSpecsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.OpenApiSpecs
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdSpecsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdSpecsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiInventoryApiIdSpecsProvidedSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.SuccessResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiInventoryApiIdSpecsProvidedSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiInventoryApiIdSpecsProvidedSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiInventoryApiIdSpecsProvidedSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.RawSpec
	JSON400      *string
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutApiInventoryApiIdSpecsProvidedSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiInventoryApiIdSpecsProvidedSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiInventoryApiIdSpecsReconstructedSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.SuccessResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiInventoryApiIdSpecsReconstructedSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiInventoryApiIdSpecsReconstructedSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInventoryApiIdSuggestedReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.SuggestedReview
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInventoryApiIdSuggestedReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInventoryApiIdSuggestedReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInventoryReviewIdApprovedReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.SuccessResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostApiInventoryReviewIdApprovedReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInventoryReviewIdApprovedReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsageHitCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.HitCount
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetApiUsageHitCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsageHitCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardApiUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiUsages
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetDashboardApiUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardApiUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardApiUsageLatestDiffsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.SpecDiffTime
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetDashboardApiUsageLatestDiffsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardApiUsageLatestDiffsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardApiUsageMostUsedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.ApiCount
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetDashboardApiUsageMostUsedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardApiUsageMostUsedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIClarityFeatureList
}

// Status returns HTTPResponse.Status
func (r GetFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BflaGetAPIFindingsForAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.APIFindings
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r BflaGetAPIFindingsForAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BflaGetAPIFindingsForAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BflaGetApiFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.APIFindings
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r BflaGetApiFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BflaGetApiFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModulesBflaAuthorizationModelApiIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthorizationModel
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetModulesBflaAuthorizationModelApiIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModulesBflaAuthorizationModelApiIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostModulesBflaAuthorizationModelApiIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostModulesBflaAuthorizationModelApiIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostModulesBflaAuthorizationModelApiIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDDenyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDDenyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDDenyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDDetectionStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDDetectionStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDDetectionStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDDetectionStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDDetectionStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDDetectionStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDLearningStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDLearningStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDLearningStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaAuthorizationModelApiIDLearningStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaAuthorizationModelApiIDLearningStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaAuthorizationModelApiIDLearningStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostModulesBflaAuthorizationModelApiIDResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PostModulesBflaAuthorizationModelApiIDResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostModulesBflaAuthorizationModelApiIDResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModulesBflaAuthorizationModelApiIDStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BFLAState
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r GetModulesBflaAuthorizationModelApiIDStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModulesBflaAuthorizationModelApiIDStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BflagetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIEventAnnotations
}

// Status returns HTTPResponse.Status
func (r BflagetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BflagetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutModulesBflaEventIdOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r PutModulesBflaEventIdOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutModulesBflaEventIdOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BflagetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ModuleVersion
}

// Status returns HTTPResponse.Status
func (r BflagetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BflagetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DifferstartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r DifferstartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DifferstartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DifferstopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r DifferstopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DifferstopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiffergetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ModuleVersion
}

// Status returns HTTPResponse.Status
func (r DiffergetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiffergetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetAnnotatedSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON404      *string
}

// Status returns HTTPResponse.Status
func (r FuzzerGetAnnotatedSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetAnnotatedSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetAPIFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.APIFindings
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r FuzzerGetAPIFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetAPIFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetTestProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShortTestProgress
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r FuzzerGetTestProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetTestProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetTestReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShortTestReport
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r FuzzerGetTestReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetTestReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerStartTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestHandle
	JSON400      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r FuzzerStartTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerStartTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerStopTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r FuzzerStopTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerStopTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestWithReport
}

// Status returns HTTPResponse.Status
func (r FuzzerGetReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzergetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestingModuleState
}

// Status returns HTTPResponse.Status
func (r FuzzergetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzergetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetTestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tests
}

// Status returns HTTPResponse.Status
func (r FuzzerGetTestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetTestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerGetUpdateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FuzzingStatusAndReport
}

// Status returns HTTPResponse.Status
func (r FuzzerGetUpdateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerGetUpdateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzerPostUpdateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FuzzerPostUpdateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzerPostUpdateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FuzzergetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r FuzzergetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FuzzergetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceanalyzerGetApiFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.APIFindings
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r TraceanalyzerGetApiFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceanalyzerGetApiFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceanalyzerResetApiFindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r TraceanalyzerResetApiFindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceanalyzerResetApiFindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceanalyzerGetEventAnnotationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Annotations
}

// Status returns HTTPResponse.Status
func (r TraceanalyzerGetEventAnnotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceanalyzerGetEventAnnotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceanalyzerStartTraceAnalysisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r TraceanalyzerStartTraceAnalysisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceanalyzerStartTraceAnalysisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceanalyzerStopTraceAnalysisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ApiResponse
	JSONDefault  *externalRef0.ApiResponse
}

// Status returns HTTPResponse.Status
func (r TraceanalyzerStopTraceAnalysisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceanalyzerStopTraceAnalysisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiEventsWithResponse request returning *GetApiEventsResponse
func (c *ClientWithResponses) GetApiEventsWithResponse(ctx context.Context, params *GetApiEventsParams, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error) {
	rsp, err := c.GetApiEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsResponse(rsp)
}

// GetApiEventsEventIdWithResponse request returning *GetApiEventsEventIdResponse
func (c *ClientWithResponses) GetApiEventsEventIdWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdResponse, error) {
	rsp, err := c.GetApiEventsEventId(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsEventIdResponse(rsp)
}

// GetApiEventsEventIdProvidedSpecDiffWithResponse request returning *GetApiEventsEventIdProvidedSpecDiffResponse
func (c *ClientWithResponses) GetApiEventsEventIdProvidedSpecDiffWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdProvidedSpecDiffResponse, error) {
	rsp, err := c.GetApiEventsEventIdProvidedSpecDiff(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsEventIdProvidedSpecDiffResponse(rsp)
}

// GetApiEventsEventIdReconstructedSpecDiffWithResponse request returning *GetApiEventsEventIdReconstructedSpecDiffResponse
func (c *ClientWithResponses) GetApiEventsEventIdReconstructedSpecDiffWithResponse(ctx context.Context, eventId uint32, reqEditors ...RequestEditorFn) (*GetApiEventsEventIdReconstructedSpecDiffResponse, error) {
	rsp, err := c.GetApiEventsEventIdReconstructedSpecDiff(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsEventIdReconstructedSpecDiffResponse(rsp)
}

// GetApiInventoryWithResponse request returning *GetApiInventoryResponse
func (c *ClientWithResponses) GetApiInventoryWithResponse(ctx context.Context, params *GetApiInventoryParams, reqEditors ...RequestEditorFn) (*GetApiInventoryResponse, error) {
	rsp, err := c.GetApiInventory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryResponse(rsp)
}

// PostApiInventoryWithBodyWithResponse request with arbitrary body returning *PostApiInventoryResponse
func (c *ClientWithResponses) PostApiInventoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInventoryResponse, error) {
	rsp, err := c.PostApiInventoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInventoryResponse(rsp)
}

func (c *ClientWithResponses) PostApiInventoryWithResponse(ctx context.Context, body PostApiInventoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInventoryResponse, error) {
	rsp, err := c.PostApiInventory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInventoryResponse(rsp)
}

// GetApiInventoryApiIdFromHostAndPortWithResponse request returning *GetApiInventoryApiIdFromHostAndPortResponse
func (c *ClientWithResponses) GetApiInventoryApiIdFromHostAndPortWithResponse(ctx context.Context, params *GetApiInventoryApiIdFromHostAndPortParams, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdFromHostAndPortResponse, error) {
	rsp, err := c.GetApiInventoryApiIdFromHostAndPort(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdFromHostAndPortResponse(rsp)
}

// GetApiInventoryApiIdApiInfoWithResponse request returning *GetApiInventoryApiIdApiInfoResponse
func (c *ClientWithResponses) GetApiInventoryApiIdApiInfoWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdApiInfoResponse, error) {
	rsp, err := c.GetApiInventoryApiIdApiInfo(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdApiInfoResponse(rsp)
}

// GetApiInventoryApiIdProvidedSwaggerJsonWithResponse request returning *GetApiInventoryApiIdProvidedSwaggerJsonResponse
func (c *ClientWithResponses) GetApiInventoryApiIdProvidedSwaggerJsonWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdProvidedSwaggerJsonResponse, error) {
	rsp, err := c.GetApiInventoryApiIdProvidedSwaggerJson(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdProvidedSwaggerJsonResponse(rsp)
}

// GetApiInventoryApiIdReconstructedSwaggerJsonWithResponse request returning *GetApiInventoryApiIdReconstructedSwaggerJsonResponse
func (c *ClientWithResponses) GetApiInventoryApiIdReconstructedSwaggerJsonWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdReconstructedSwaggerJsonResponse, error) {
	rsp, err := c.GetApiInventoryApiIdReconstructedSwaggerJson(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdReconstructedSwaggerJsonResponse(rsp)
}

// GetApiInventoryApiIdSpecsWithResponse request returning *GetApiInventoryApiIdSpecsResponse
func (c *ClientWithResponses) GetApiInventoryApiIdSpecsWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdSpecsResponse, error) {
	rsp, err := c.GetApiInventoryApiIdSpecs(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdSpecsResponse(rsp)
}

// DeleteApiInventoryApiIdSpecsProvidedSpecWithResponse request returning *DeleteApiInventoryApiIdSpecsProvidedSpecResponse
func (c *ClientWithResponses) DeleteApiInventoryApiIdSpecsProvidedSpecWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*DeleteApiInventoryApiIdSpecsProvidedSpecResponse, error) {
	rsp, err := c.DeleteApiInventoryApiIdSpecsProvidedSpec(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiInventoryApiIdSpecsProvidedSpecResponse(rsp)
}

// PutApiInventoryApiIdSpecsProvidedSpecWithBodyWithResponse request with arbitrary body returning *PutApiInventoryApiIdSpecsProvidedSpecResponse
func (c *ClientWithResponses) PutApiInventoryApiIdSpecsProvidedSpecWithBodyWithResponse(ctx context.Context, apiId ApiId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiInventoryApiIdSpecsProvidedSpecResponse, error) {
	rsp, err := c.PutApiInventoryApiIdSpecsProvidedSpecWithBody(ctx, apiId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInventoryApiIdSpecsProvidedSpecResponse(rsp)
}

func (c *ClientWithResponses) PutApiInventoryApiIdSpecsProvidedSpecWithResponse(ctx context.Context, apiId ApiId, body PutApiInventoryApiIdSpecsProvidedSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiInventoryApiIdSpecsProvidedSpecResponse, error) {
	rsp, err := c.PutApiInventoryApiIdSpecsProvidedSpec(ctx, apiId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiInventoryApiIdSpecsProvidedSpecResponse(rsp)
}

// DeleteApiInventoryApiIdSpecsReconstructedSpecWithResponse request returning *DeleteApiInventoryApiIdSpecsReconstructedSpecResponse
func (c *ClientWithResponses) DeleteApiInventoryApiIdSpecsReconstructedSpecWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*DeleteApiInventoryApiIdSpecsReconstructedSpecResponse, error) {
	rsp, err := c.DeleteApiInventoryApiIdSpecsReconstructedSpec(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiInventoryApiIdSpecsReconstructedSpecResponse(rsp)
}

// GetApiInventoryApiIdSuggestedReviewWithResponse request returning *GetApiInventoryApiIdSuggestedReviewResponse
func (c *ClientWithResponses) GetApiInventoryApiIdSuggestedReviewWithResponse(ctx context.Context, apiId ApiId, reqEditors ...RequestEditorFn) (*GetApiInventoryApiIdSuggestedReviewResponse, error) {
	rsp, err := c.GetApiInventoryApiIdSuggestedReview(ctx, apiId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInventoryApiIdSuggestedReviewResponse(rsp)
}

// PostApiInventoryReviewIdApprovedReviewWithBodyWithResponse request with arbitrary body returning *PostApiInventoryReviewIdApprovedReviewResponse
func (c *ClientWithResponses) PostApiInventoryReviewIdApprovedReviewWithBodyWithResponse(ctx context.Context, reviewId ReviewId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiInventoryReviewIdApprovedReviewResponse, error) {
	rsp, err := c.PostApiInventoryReviewIdApprovedReviewWithBody(ctx, reviewId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInventoryReviewIdApprovedReviewResponse(rsp)
}

func (c *ClientWithResponses) PostApiInventoryReviewIdApprovedReviewWithResponse(ctx context.Context, reviewId ReviewId, body PostApiInventoryReviewIdApprovedReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiInventoryReviewIdApprovedReviewResponse, error) {
	rsp, err := c.PostApiInventoryReviewIdApprovedReview(ctx, reviewId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInventoryReviewIdApprovedReviewResponse(rsp)
}

// GetApiUsageHitCountWithResponse request returning *GetApiUsageHitCountResponse
func (c *ClientWithResponses) GetApiUsageHitCountWithResponse(ctx context.Context, params *GetApiUsageHitCountParams, reqEditors ...RequestEditorFn) (*GetApiUsageHitCountResponse, error) {
	rsp, err := c.GetApiUsageHitCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsageHitCountResponse(rsp)
}

// GetDashboardApiUsageWithResponse request returning *GetDashboardApiUsageResponse
func (c *ClientWithResponses) GetDashboardApiUsageWithResponse(ctx context.Context, params *GetDashboardApiUsageParams, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageResponse, error) {
	rsp, err := c.GetDashboardApiUsage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardApiUsageResponse(rsp)
}

// GetDashboardApiUsageLatestDiffsWithResponse request returning *GetDashboardApiUsageLatestDiffsResponse
func (c *ClientWithResponses) GetDashboardApiUsageLatestDiffsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageLatestDiffsResponse, error) {
	rsp, err := c.GetDashboardApiUsageLatestDiffs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardApiUsageLatestDiffsResponse(rsp)
}

// GetDashboardApiUsageMostUsedWithResponse request returning *GetDashboardApiUsageMostUsedResponse
func (c *ClientWithResponses) GetDashboardApiUsageMostUsedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardApiUsageMostUsedResponse, error) {
	rsp, err := c.GetDashboardApiUsageMostUsed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardApiUsageMostUsedResponse(rsp)
}

// GetFeaturesWithResponse request returning *GetFeaturesResponse
func (c *ClientWithResponses) GetFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error) {
	rsp, err := c.GetFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturesResponse(rsp)
}

// BflaGetAPIFindingsForAPIWithResponse request returning *BflaGetAPIFindingsForAPIResponse
func (c *ClientWithResponses) BflaGetAPIFindingsForAPIWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetAPIFindingsForAPIParams, reqEditors ...RequestEditorFn) (*BflaGetAPIFindingsForAPIResponse, error) {
	rsp, err := c.BflaGetAPIFindingsForAPI(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBflaGetAPIFindingsForAPIResponse(rsp)
}

// BflaGetApiFindingsWithResponse request returning *BflaGetApiFindingsResponse
func (c *ClientWithResponses) BflaGetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *BflaGetApiFindingsParams, reqEditors ...RequestEditorFn) (*BflaGetApiFindingsResponse, error) {
	rsp, err := c.BflaGetApiFindings(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBflaGetApiFindingsResponse(rsp)
}

// GetModulesBflaAuthorizationModelApiIDWithResponse request returning *GetModulesBflaAuthorizationModelApiIDResponse
func (c *ClientWithResponses) GetModulesBflaAuthorizationModelApiIDWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*GetModulesBflaAuthorizationModelApiIDResponse, error) {
	rsp, err := c.GetModulesBflaAuthorizationModelApiID(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModulesBflaAuthorizationModelApiIDResponse(rsp)
}

// PostModulesBflaAuthorizationModelApiIDWithBodyWithResponse request with arbitrary body returning *PostModulesBflaAuthorizationModelApiIDResponse
func (c *ClientWithResponses) PostModulesBflaAuthorizationModelApiIDWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResponse, error) {
	rsp, err := c.PostModulesBflaAuthorizationModelApiIDWithBody(ctx, apiID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostModulesBflaAuthorizationModelApiIDResponse(rsp)
}

func (c *ClientWithResponses) PostModulesBflaAuthorizationModelApiIDWithResponse(ctx context.Context, apiID externalRef0.ApiID, body PostModulesBflaAuthorizationModelApiIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResponse, error) {
	rsp, err := c.PostModulesBflaAuthorizationModelApiID(ctx, apiID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostModulesBflaAuthorizationModelApiIDResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDApproveWithResponse request returning *PutModulesBflaAuthorizationModelApiIDApproveResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDApproveWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDApproveParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDApproveResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDApprove(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDApproveResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDDenyWithResponse request returning *PutModulesBflaAuthorizationModelApiIDDenyResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDDenyWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDDenyParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDenyResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDDeny(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDDenyResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDDetectionStartWithResponse request returning *PutModulesBflaAuthorizationModelApiIDDetectionStartResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDDetectionStartWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDetectionStartResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDDetectionStart(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDDetectionStartResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDDetectionStopWithResponse request returning *PutModulesBflaAuthorizationModelApiIDDetectionStopResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDDetectionStopWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDDetectionStopResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDDetectionStop(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDDetectionStopResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDLearningStartWithResponse request returning *PutModulesBflaAuthorizationModelApiIDLearningStartResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDLearningStartWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *PutModulesBflaAuthorizationModelApiIDLearningStartParams, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDLearningStartResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDLearningStart(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDLearningStartResponse(rsp)
}

// PutModulesBflaAuthorizationModelApiIDLearningStopWithResponse request returning *PutModulesBflaAuthorizationModelApiIDLearningStopResponse
func (c *ClientWithResponses) PutModulesBflaAuthorizationModelApiIDLearningStopWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PutModulesBflaAuthorizationModelApiIDLearningStopResponse, error) {
	rsp, err := c.PutModulesBflaAuthorizationModelApiIDLearningStop(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaAuthorizationModelApiIDLearningStopResponse(rsp)
}

// PostModulesBflaAuthorizationModelApiIDResetWithResponse request returning *PostModulesBflaAuthorizationModelApiIDResetResponse
func (c *ClientWithResponses) PostModulesBflaAuthorizationModelApiIDResetWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*PostModulesBflaAuthorizationModelApiIDResetResponse, error) {
	rsp, err := c.PostModulesBflaAuthorizationModelApiIDReset(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostModulesBflaAuthorizationModelApiIDResetResponse(rsp)
}

// GetModulesBflaAuthorizationModelApiIDStateWithResponse request returning *GetModulesBflaAuthorizationModelApiIDStateResponse
func (c *ClientWithResponses) GetModulesBflaAuthorizationModelApiIDStateWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*GetModulesBflaAuthorizationModelApiIDStateResponse, error) {
	rsp, err := c.GetModulesBflaAuthorizationModelApiIDState(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModulesBflaAuthorizationModelApiIDStateResponse(rsp)
}

// BflagetEventWithResponse request returning *BflagetEventResponse
func (c *ClientWithResponses) BflagetEventWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*BflagetEventResponse, error) {
	rsp, err := c.BflagetEvent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBflagetEventResponse(rsp)
}

// PutModulesBflaEventIdOperationWithResponse request returning *PutModulesBflaEventIdOperationResponse
func (c *ClientWithResponses) PutModulesBflaEventIdOperationWithResponse(ctx context.Context, id int, operation OperationEnum, reqEditors ...RequestEditorFn) (*PutModulesBflaEventIdOperationResponse, error) {
	rsp, err := c.PutModulesBflaEventIdOperation(ctx, id, operation, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutModulesBflaEventIdOperationResponse(rsp)
}

// BflagetVersionWithResponse request returning *BflagetVersionResponse
func (c *ClientWithResponses) BflagetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BflagetVersionResponse, error) {
	rsp, err := c.BflagetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBflagetVersionResponse(rsp)
}

// DifferstartWithResponse request returning *DifferstartResponse
func (c *ClientWithResponses) DifferstartWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DifferstartResponse, error) {
	rsp, err := c.Differstart(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDifferstartResponse(rsp)
}

// DifferstopWithResponse request returning *DifferstopResponse
func (c *ClientWithResponses) DifferstopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DifferstopResponse, error) {
	rsp, err := c.Differstop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDifferstopResponse(rsp)
}

// DiffergetVersionWithResponse request returning *DiffergetVersionResponse
func (c *ClientWithResponses) DiffergetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiffergetVersionResponse, error) {
	rsp, err := c.DiffergetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffergetVersionResponse(rsp)
}

// FuzzerGetAnnotatedSpecWithResponse request returning *FuzzerGetAnnotatedSpecResponse
func (c *ClientWithResponses) FuzzerGetAnnotatedSpecWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetAnnotatedSpecResponse, error) {
	rsp, err := c.FuzzerGetAnnotatedSpec(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetAnnotatedSpecResponse(rsp)
}

// FuzzerGetAPIFindingsWithResponse request returning *FuzzerGetAPIFindingsResponse
func (c *ClientWithResponses) FuzzerGetAPIFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *FuzzerGetAPIFindingsParams, reqEditors ...RequestEditorFn) (*FuzzerGetAPIFindingsResponse, error) {
	rsp, err := c.FuzzerGetAPIFindings(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetAPIFindingsResponse(rsp)
}

// FuzzerGetTestProgressWithResponse request returning *FuzzerGetTestProgressResponse
func (c *ClientWithResponses) FuzzerGetTestProgressWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestProgressResponse, error) {
	rsp, err := c.FuzzerGetTestProgress(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetTestProgressResponse(rsp)
}

// FuzzerGetTestReportWithResponse request returning *FuzzerGetTestReportResponse
func (c *ClientWithResponses) FuzzerGetTestReportWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestReportResponse, error) {
	rsp, err := c.FuzzerGetTestReport(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetTestReportResponse(rsp)
}

// FuzzerStartTestWithBodyWithResponse request with arbitrary body returning *FuzzerStartTestResponse
func (c *ClientWithResponses) FuzzerStartTestWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FuzzerStartTestResponse, error) {
	rsp, err := c.FuzzerStartTestWithBody(ctx, apiID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerStartTestResponse(rsp)
}

func (c *ClientWithResponses) FuzzerStartTestWithResponse(ctx context.Context, apiID externalRef0.ApiID, body FuzzerStartTestJSONRequestBody, reqEditors ...RequestEditorFn) (*FuzzerStartTestResponse, error) {
	rsp, err := c.FuzzerStartTest(ctx, apiID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerStartTestResponse(rsp)
}

// FuzzerStopTestWithResponse request returning *FuzzerStopTestResponse
func (c *ClientWithResponses) FuzzerStopTestWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerStopTestResponse, error) {
	rsp, err := c.FuzzerStopTest(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerStopTestResponse(rsp)
}

// FuzzerGetReportWithResponse request returning *FuzzerGetReportResponse
func (c *ClientWithResponses) FuzzerGetReportWithResponse(ctx context.Context, apiID externalRef0.ApiID, timestamp int64, reqEditors ...RequestEditorFn) (*FuzzerGetReportResponse, error) {
	rsp, err := c.FuzzerGetReport(ctx, apiID, timestamp, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetReportResponse(rsp)
}

// FuzzergetStateWithResponse request returning *FuzzergetStateResponse
func (c *ClientWithResponses) FuzzergetStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FuzzergetStateResponse, error) {
	rsp, err := c.FuzzergetState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzergetStateResponse(rsp)
}

// FuzzerGetTestsWithResponse request returning *FuzzerGetTestsResponse
func (c *ClientWithResponses) FuzzerGetTestsWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetTestsResponse, error) {
	rsp, err := c.FuzzerGetTests(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetTestsResponse(rsp)
}

// FuzzerGetUpdateStatusWithResponse request returning *FuzzerGetUpdateStatusResponse
func (c *ClientWithResponses) FuzzerGetUpdateStatusWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*FuzzerGetUpdateStatusResponse, error) {
	rsp, err := c.FuzzerGetUpdateStatus(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerGetUpdateStatusResponse(rsp)
}

// FuzzerPostUpdateStatusWithBodyWithResponse request with arbitrary body returning *FuzzerPostUpdateStatusResponse
func (c *ClientWithResponses) FuzzerPostUpdateStatusWithBodyWithResponse(ctx context.Context, apiID externalRef0.ApiID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FuzzerPostUpdateStatusResponse, error) {
	rsp, err := c.FuzzerPostUpdateStatusWithBody(ctx, apiID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerPostUpdateStatusResponse(rsp)
}

func (c *ClientWithResponses) FuzzerPostUpdateStatusWithResponse(ctx context.Context, apiID externalRef0.ApiID, body FuzzerPostUpdateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*FuzzerPostUpdateStatusResponse, error) {
	rsp, err := c.FuzzerPostUpdateStatus(ctx, apiID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzerPostUpdateStatusResponse(rsp)
}

// FuzzergetVersionWithResponse request returning *FuzzergetVersionResponse
func (c *ClientWithResponses) FuzzergetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FuzzergetVersionResponse, error) {
	rsp, err := c.FuzzergetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFuzzergetVersionResponse(rsp)
}

// TraceanalyzerGetApiFindingsWithResponse request returning *TraceanalyzerGetApiFindingsResponse
func (c *ClientWithResponses) TraceanalyzerGetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, params *TraceanalyzerGetApiFindingsParams, reqEditors ...RequestEditorFn) (*TraceanalyzerGetApiFindingsResponse, error) {
	rsp, err := c.TraceanalyzerGetApiFindings(ctx, apiID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceanalyzerGetApiFindingsResponse(rsp)
}

// TraceanalyzerResetApiFindingsWithResponse request returning *TraceanalyzerResetApiFindingsResponse
func (c *ClientWithResponses) TraceanalyzerResetApiFindingsWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerResetApiFindingsResponse, error) {
	rsp, err := c.TraceanalyzerResetApiFindings(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceanalyzerResetApiFindingsResponse(rsp)
}

// TraceanalyzerGetEventAnnotationsWithResponse request returning *TraceanalyzerGetEventAnnotationsResponse
func (c *ClientWithResponses) TraceanalyzerGetEventAnnotationsWithResponse(ctx context.Context, eventID int64, params *TraceanalyzerGetEventAnnotationsParams, reqEditors ...RequestEditorFn) (*TraceanalyzerGetEventAnnotationsResponse, error) {
	rsp, err := c.TraceanalyzerGetEventAnnotations(ctx, eventID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceanalyzerGetEventAnnotationsResponse(rsp)
}

// TraceanalyzerStartTraceAnalysisWithResponse request returning *TraceanalyzerStartTraceAnalysisResponse
func (c *ClientWithResponses) TraceanalyzerStartTraceAnalysisWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerStartTraceAnalysisResponse, error) {
	rsp, err := c.TraceanalyzerStartTraceAnalysis(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceanalyzerStartTraceAnalysisResponse(rsp)
}

// TraceanalyzerStopTraceAnalysisWithResponse request returning *TraceanalyzerStopTraceAnalysisResponse
func (c *ClientWithResponses) TraceanalyzerStopTraceAnalysisWithResponse(ctx context.Context, apiID externalRef0.ApiID, reqEditors ...RequestEditorFn) (*TraceanalyzerStopTraceAnalysisResponse, error) {
	rsp, err := c.TraceanalyzerStopTraceAnalysis(ctx, apiID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceanalyzerStopTraceAnalysisResponse(rsp)
}

// ParseGetApiEventsResponse parses an HTTP response from a GetApiEventsWithResponse call
func ParseGetApiEventsResponse(rsp *http.Response) (*GetApiEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// List of API events in the given time range, filters and page. List length must be lower or equal to pageSize
			Items *[]externalRef0.ApiEvent `json:"items,omitempty"`

			// Total events count in the given time range and filters
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiEventsEventIdResponse parses an HTTP response from a GetApiEventsEventIdWithResponse call
func ParseGetApiEventsEventIdResponse(rsp *http.Response) (*GetApiEventsEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiEventsEventIdProvidedSpecDiffResponse parses an HTTP response from a GetApiEventsEventIdProvidedSpecDiffWithResponse call
func ParseGetApiEventsEventIdProvidedSpecDiffResponse(rsp *http.Response) (*GetApiEventsEventIdProvidedSpecDiffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsEventIdProvidedSpecDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiEventSpecDiff
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiEventsEventIdReconstructedSpecDiffResponse parses an HTTP response from a GetApiEventsEventIdReconstructedSpecDiffWithResponse call
func ParseGetApiEventsEventIdReconstructedSpecDiffResponse(rsp *http.Response) (*GetApiEventsEventIdReconstructedSpecDiffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsEventIdReconstructedSpecDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiEventSpecDiff
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryResponse parses an HTTP response from a GetApiInventoryWithResponse call
func ParseGetApiInventoryResponse(rsp *http.Response) (*GetApiInventoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// List of filtered APIs in the given page. List length must be lower or equal to pageSize
			Items *[]externalRef0.ApiInfo `json:"items,omitempty"`

			// Total filtered APIs count
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostApiInventoryResponse parses an HTTP response from a PostApiInventoryWithResponse call
func ParsePostApiInventoryResponse(rsp *http.Response) (*PostApiInventoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdFromHostAndPortResponse parses an HTTP response from a GetApiInventoryApiIdFromHostAndPortWithResponse call
func ParseGetApiInventoryApiIdFromHostAndPortResponse(rsp *http.Response) (*GetApiInventoryApiIdFromHostAndPortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdFromHostAndPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest uint32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdApiInfoResponse parses an HTTP response from a GetApiInventoryApiIdApiInfoWithResponse call
func ParseGetApiInventoryApiIdApiInfoResponse(rsp *http.Response) (*GetApiInventoryApiIdApiInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdApiInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiInfoWithType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdProvidedSwaggerJsonResponse parses an HTTP response from a GetApiInventoryApiIdProvidedSwaggerJsonWithResponse call
func ParseGetApiInventoryApiIdProvidedSwaggerJsonResponse(rsp *http.Response) (*GetApiInventoryApiIdProvidedSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdProvidedSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdReconstructedSwaggerJsonResponse parses an HTTP response from a GetApiInventoryApiIdReconstructedSwaggerJsonWithResponse call
func ParseGetApiInventoryApiIdReconstructedSwaggerJsonResponse(rsp *http.Response) (*GetApiInventoryApiIdReconstructedSwaggerJsonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdReconstructedSwaggerJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdSpecsResponse parses an HTTP response from a GetApiInventoryApiIdSpecsWithResponse call
func ParseGetApiInventoryApiIdSpecsResponse(rsp *http.Response) (*GetApiInventoryApiIdSpecsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdSpecsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.OpenApiSpecs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteApiInventoryApiIdSpecsProvidedSpecResponse parses an HTTP response from a DeleteApiInventoryApiIdSpecsProvidedSpecWithResponse call
func ParseDeleteApiInventoryApiIdSpecsProvidedSpecResponse(rsp *http.Response) (*DeleteApiInventoryApiIdSpecsProvidedSpecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiInventoryApiIdSpecsProvidedSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutApiInventoryApiIdSpecsProvidedSpecResponse parses an HTTP response from a PutApiInventoryApiIdSpecsProvidedSpecWithResponse call
func ParsePutApiInventoryApiIdSpecsProvidedSpecResponse(rsp *http.Response) (*PutApiInventoryApiIdSpecsProvidedSpecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiInventoryApiIdSpecsProvidedSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.RawSpec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteApiInventoryApiIdSpecsReconstructedSpecResponse parses an HTTP response from a DeleteApiInventoryApiIdSpecsReconstructedSpecWithResponse call
func ParseDeleteApiInventoryApiIdSpecsReconstructedSpecResponse(rsp *http.Response) (*DeleteApiInventoryApiIdSpecsReconstructedSpecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiInventoryApiIdSpecsReconstructedSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiInventoryApiIdSuggestedReviewResponse parses an HTTP response from a GetApiInventoryApiIdSuggestedReviewWithResponse call
func ParseGetApiInventoryApiIdSuggestedReviewResponse(rsp *http.Response) (*GetApiInventoryApiIdSuggestedReviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInventoryApiIdSuggestedReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SuggestedReview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostApiInventoryReviewIdApprovedReviewResponse parses an HTTP response from a PostApiInventoryReviewIdApprovedReviewWithResponse call
func ParsePostApiInventoryReviewIdApprovedReviewResponse(rsp *http.Response) (*PostApiInventoryReviewIdApprovedReviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInventoryReviewIdApprovedReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetApiUsageHitCountResponse parses an HTTP response from a GetApiUsageHitCountWithResponse call
func ParseGetApiUsageHitCountResponse(rsp *http.Response) (*GetApiUsageHitCountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsageHitCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.HitCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDashboardApiUsageResponse parses an HTTP response from a GetDashboardApiUsageWithResponse call
func ParseGetDashboardApiUsageResponse(rsp *http.Response) (*GetDashboardApiUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardApiUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiUsages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDashboardApiUsageLatestDiffsResponse parses an HTTP response from a GetDashboardApiUsageLatestDiffsWithResponse call
func ParseGetDashboardApiUsageLatestDiffsResponse(rsp *http.Response) (*GetDashboardApiUsageLatestDiffsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardApiUsageLatestDiffsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.SpecDiffTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetDashboardApiUsageMostUsedResponse parses an HTTP response from a GetDashboardApiUsageMostUsedWithResponse call
func ParseGetDashboardApiUsageMostUsedResponse(rsp *http.Response) (*GetDashboardApiUsageMostUsedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardApiUsageMostUsedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.ApiCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFeaturesResponse parses an HTTP response from a GetFeaturesWithResponse call
func ParseGetFeaturesResponse(rsp *http.Response) (*GetFeaturesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIClarityFeatureList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBflaGetAPIFindingsForAPIResponse parses an HTTP response from a BflaGetAPIFindingsForAPIWithResponse call
func ParseBflaGetAPIFindingsForAPIResponse(rsp *http.Response) (*BflaGetAPIFindingsForAPIResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BflaGetAPIFindingsForAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.APIFindings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBflaGetApiFindingsResponse parses an HTTP response from a BflaGetApiFindingsWithResponse call
func ParseBflaGetApiFindingsResponse(rsp *http.Response) (*BflaGetApiFindingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BflaGetApiFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.APIFindings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetModulesBflaAuthorizationModelApiIDResponse parses an HTTP response from a GetModulesBflaAuthorizationModelApiIDWithResponse call
func ParseGetModulesBflaAuthorizationModelApiIDResponse(rsp *http.Response) (*GetModulesBflaAuthorizationModelApiIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModulesBflaAuthorizationModelApiIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostModulesBflaAuthorizationModelApiIDResponse parses an HTTP response from a PostModulesBflaAuthorizationModelApiIDWithResponse call
func ParsePostModulesBflaAuthorizationModelApiIDResponse(rsp *http.Response) (*PostModulesBflaAuthorizationModelApiIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostModulesBflaAuthorizationModelApiIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDApproveResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDApproveWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDApproveResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDApproveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDDenyResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDDenyWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDDenyResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDDenyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDDenyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDDetectionStartResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDDetectionStartWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDDetectionStartResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDDetectionStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDDetectionStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDDetectionStopResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDDetectionStopWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDDetectionStopResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDDetectionStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDDetectionStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDLearningStartResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDLearningStartWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDLearningStartResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDLearningStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDLearningStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutModulesBflaAuthorizationModelApiIDLearningStopResponse parses an HTTP response from a PutModulesBflaAuthorizationModelApiIDLearningStopWithResponse call
func ParsePutModulesBflaAuthorizationModelApiIDLearningStopResponse(rsp *http.Response) (*PutModulesBflaAuthorizationModelApiIDLearningStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaAuthorizationModelApiIDLearningStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostModulesBflaAuthorizationModelApiIDResetResponse parses an HTTP response from a PostModulesBflaAuthorizationModelApiIDResetWithResponse call
func ParsePostModulesBflaAuthorizationModelApiIDResetResponse(rsp *http.Response) (*PostModulesBflaAuthorizationModelApiIDResetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostModulesBflaAuthorizationModelApiIDResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetModulesBflaAuthorizationModelApiIDStateResponse parses an HTTP response from a GetModulesBflaAuthorizationModelApiIDStateWithResponse call
func ParseGetModulesBflaAuthorizationModelApiIDStateResponse(rsp *http.Response) (*GetModulesBflaAuthorizationModelApiIDStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModulesBflaAuthorizationModelApiIDStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BFLAState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBflagetEventResponse parses an HTTP response from a BflagetEventWithResponse call
func ParseBflagetEventResponse(rsp *http.Response) (*BflagetEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BflagetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIEventAnnotations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutModulesBflaEventIdOperationResponse parses an HTTP response from a PutModulesBflaEventIdOperationWithResponse call
func ParsePutModulesBflaEventIdOperationResponse(rsp *http.Response) (*PutModulesBflaEventIdOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutModulesBflaEventIdOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBflagetVersionResponse parses an HTTP response from a BflagetVersionWithResponse call
func ParseBflagetVersionResponse(rsp *http.Response) (*BflagetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BflagetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ModuleVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDifferstartResponse parses an HTTP response from a DifferstartWithResponse call
func ParseDifferstartResponse(rsp *http.Response) (*DifferstartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DifferstartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDifferstopResponse parses an HTTP response from a DifferstopWithResponse call
func ParseDifferstopResponse(rsp *http.Response) (*DifferstopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DifferstopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDiffergetVersionResponse parses an HTTP response from a DiffergetVersionWithResponse call
func ParseDiffergetVersionResponse(rsp *http.Response) (*DiffergetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiffergetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ModuleVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFuzzerGetAnnotatedSpecResponse parses an HTTP response from a FuzzerGetAnnotatedSpecWithResponse call
func ParseFuzzerGetAnnotatedSpecResponse(rsp *http.Response) (*FuzzerGetAnnotatedSpecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetAnnotatedSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFuzzerGetAPIFindingsResponse parses an HTTP response from a FuzzerGetAPIFindingsWithResponse call
func ParseFuzzerGetAPIFindingsResponse(rsp *http.Response) (*FuzzerGetAPIFindingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetAPIFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.APIFindings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFuzzerGetTestProgressResponse parses an HTTP response from a FuzzerGetTestProgressWithResponse call
func ParseFuzzerGetTestProgressResponse(rsp *http.Response) (*FuzzerGetTestProgressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetTestProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShortTestProgress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFuzzerGetTestReportResponse parses an HTTP response from a FuzzerGetTestReportWithResponse call
func ParseFuzzerGetTestReportResponse(rsp *http.Response) (*FuzzerGetTestReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetTestReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShortTestReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFuzzerStartTestResponse parses an HTTP response from a FuzzerStartTestWithResponse call
func ParseFuzzerStartTestResponse(rsp *http.Response) (*FuzzerStartTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerStartTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestHandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFuzzerStopTestResponse parses an HTTP response from a FuzzerStopTestWithResponse call
func ParseFuzzerStopTestResponse(rsp *http.Response) (*FuzzerStopTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerStopTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFuzzerGetReportResponse parses an HTTP response from a FuzzerGetReportWithResponse call
func ParseFuzzerGetReportResponse(rsp *http.Response) (*FuzzerGetReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestWithReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFuzzergetStateResponse parses an HTTP response from a FuzzergetStateWithResponse call
func ParseFuzzergetStateResponse(rsp *http.Response) (*FuzzergetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzergetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestingModuleState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFuzzerGetTestsResponse parses an HTTP response from a FuzzerGetTestsWithResponse call
func ParseFuzzerGetTestsResponse(rsp *http.Response) (*FuzzerGetTestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetTestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFuzzerGetUpdateStatusResponse parses an HTTP response from a FuzzerGetUpdateStatusWithResponse call
func ParseFuzzerGetUpdateStatusResponse(rsp *http.Response) (*FuzzerGetUpdateStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerGetUpdateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FuzzingStatusAndReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFuzzerPostUpdateStatusResponse parses an HTTP response from a FuzzerPostUpdateStatusWithResponse call
func ParseFuzzerPostUpdateStatusResponse(rsp *http.Response) (*FuzzerPostUpdateStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzerPostUpdateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFuzzergetVersionResponse parses an HTTP response from a FuzzergetVersionWithResponse call
func ParseFuzzergetVersionResponse(rsp *http.Response) (*FuzzergetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FuzzergetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTraceanalyzerGetApiFindingsResponse parses an HTTP response from a TraceanalyzerGetApiFindingsWithResponse call
func ParseTraceanalyzerGetApiFindingsResponse(rsp *http.Response) (*TraceanalyzerGetApiFindingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceanalyzerGetApiFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.APIFindings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTraceanalyzerResetApiFindingsResponse parses an HTTP response from a TraceanalyzerResetApiFindingsWithResponse call
func ParseTraceanalyzerResetApiFindingsResponse(rsp *http.Response) (*TraceanalyzerResetApiFindingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceanalyzerResetApiFindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTraceanalyzerGetEventAnnotationsResponse parses an HTTP response from a TraceanalyzerGetEventAnnotationsWithResponse call
func ParseTraceanalyzerGetEventAnnotationsResponse(rsp *http.Response) (*TraceanalyzerGetEventAnnotationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceanalyzerGetEventAnnotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Annotations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTraceanalyzerStartTraceAnalysisResponse parses an HTTP response from a TraceanalyzerStartTraceAnalysisWithResponse call
func ParseTraceanalyzerStartTraceAnalysisResponse(rsp *http.Response) (*TraceanalyzerStartTraceAnalysisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceanalyzerStartTraceAnalysisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTraceanalyzerStopTraceAnalysisResponse parses an HTTP response from a TraceanalyzerStopTraceAnalysisWithResponse call
func ParseTraceanalyzerStopTraceAnalysisResponse(rsp *http.Response) (*TraceanalyzerStopTraceAnalysisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceanalyzerStopTraceAnalysisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API events
	// (GET /apiEvents)
	GetApiEvents(w http.ResponseWriter, r *http.Request, params GetApiEventsParams)
	// Get API event
	// (GET /apiEvents/{eventId})
	GetApiEventsEventId(w http.ResponseWriter, r *http.Request, eventId uint32)
	// Get API event provided spec diff
	// (GET /apiEvents/{eventId}/providedSpecDiff)
	GetApiEventsEventIdProvidedSpecDiff(w http.ResponseWriter, r *http.Request, eventId uint32)
	// Get API event reconstructed spec diff
	// (GET /apiEvents/{eventId}/reconstructedSpecDiff)
	GetApiEventsEventIdReconstructedSpecDiff(w http.ResponseWriter, r *http.Request, eventId uint32)
	// Get API inventory
	// (GET /apiInventory)
	GetApiInventory(w http.ResponseWriter, r *http.Request, params GetApiInventoryParams)
	// Create API inventory item
	// (POST /apiInventory)
	PostApiInventory(w http.ResponseWriter, r *http.Request)
	// Get apiId from host and port
	// (GET /apiInventory/apiId/fromHostAndPort)
	GetApiInventoryApiIdFromHostAndPort(w http.ResponseWriter, r *http.Request, params GetApiInventoryApiIdFromHostAndPortParams)
	// Get api info from apiId
	// (GET /apiInventory/{apiId}/apiInfo)
	GetApiInventoryApiIdApiInfo(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Get provided API spec json file
	// (GET /apiInventory/{apiId}/provided_swagger.json)
	GetApiInventoryApiIdProvidedSwaggerJson(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Get reconstructed API spec json file
	// (GET /apiInventory/{apiId}/reconstructed_swagger.json)
	GetApiInventoryApiIdReconstructedSwaggerJson(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Get provided and reconstructed open api specs for a specific API
	// (GET /apiInventory/{apiId}/specs)
	GetApiInventoryApiIdSpecs(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Unset a provided spec for a specific API
	// (DELETE /apiInventory/{apiId}/specs/providedSpec)
	DeleteApiInventoryApiIdSpecsProvidedSpec(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Add or edit a spec for a specific API
	// (PUT /apiInventory/{apiId}/specs/providedSpec)
	PutApiInventoryApiIdSpecsProvidedSpec(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Unset a reconstructed spec for a specific API
	// (DELETE /apiInventory/{apiId}/specs/reconstructedSpec)
	DeleteApiInventoryApiIdSpecsReconstructedSpec(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Get reconstructed spec for review
	// (GET /apiInventory/{apiId}/suggestedReview)
	GetApiInventoryApiIdSuggestedReview(w http.ResponseWriter, r *http.Request, apiId ApiId)
	// Apply the approved review to create the reconstructed spec
	// (POST /apiInventory/{reviewId}/approvedReview)
	PostApiInventoryReviewIdApprovedReview(w http.ResponseWriter, r *http.Request, reviewId ReviewId)
	// Get a hit count within a selected timeframe for the filtered API events
	// (GET /apiUsage/hitCount)
	GetApiUsageHitCount(w http.ResponseWriter, r *http.Request, params GetApiUsageHitCountParams)
	// Get API usage
	// (GET /dashboard/apiUsage)
	GetDashboardApiUsage(w http.ResponseWriter, r *http.Request, params GetDashboardApiUsageParams)
	// Get latest spec diffs
	// (GET /dashboard/apiUsage/latestDiffs)
	GetDashboardApiUsageLatestDiffs(w http.ResponseWriter, r *http.Request)
	// Get most used APIs
	// (GET /dashboard/apiUsage/mostUsed)
	GetDashboardApiUsageMostUsed(w http.ResponseWriter, r *http.Request)
	// Get the list of APIClarity features and for each feature the list of API hosts (in the form 'host:port') the feature requires to get trace for
	// (GET /features)
	GetFeatures(w http.ResponseWriter, r *http.Request)
	// Get Findings for an API
	// (GET /modules/bfla/api/findings/{apiID})
	BflaGetAPIFindingsForAPI(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params BflaGetAPIFindingsForAPIParams)
	// Get findings for an API and module
	// (GET /modules/bfla/apiFindings/{apiID})
	BflaGetApiFindings(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params BflaGetApiFindingsParams)

	// (GET /modules/bfla/authorizationModel/{apiID})
	GetModulesBflaAuthorizationModelApiID(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (POST /modules/bfla/authorizationModel/{apiID})
	PostModulesBflaAuthorizationModelApiID(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (PUT /modules/bfla/authorizationModel/{apiID}/approve)
	PutModulesBflaAuthorizationModelApiIDApprove(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params PutModulesBflaAuthorizationModelApiIDApproveParams)

	// (PUT /modules/bfla/authorizationModel/{apiID}/deny)
	PutModulesBflaAuthorizationModelApiIDDeny(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params PutModulesBflaAuthorizationModelApiIDDenyParams)

	// (PUT /modules/bfla/authorizationModel/{apiID}/detection/start)
	PutModulesBflaAuthorizationModelApiIDDetectionStart(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (PUT /modules/bfla/authorizationModel/{apiID}/detection/stop)
	PutModulesBflaAuthorizationModelApiIDDetectionStop(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (PUT /modules/bfla/authorizationModel/{apiID}/learning/start)
	PutModulesBflaAuthorizationModelApiIDLearningStart(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params PutModulesBflaAuthorizationModelApiIDLearningStartParams)

	// (PUT /modules/bfla/authorizationModel/{apiID}/learning/stop)
	PutModulesBflaAuthorizationModelApiIDLearningStop(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (POST /modules/bfla/authorizationModel/{apiID}/reset)
	PostModulesBflaAuthorizationModelApiIDReset(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)

	// (GET /modules/bfla/authorizationModel/{apiID}/state)
	GetModulesBflaAuthorizationModelApiIDState(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get the event with the annotations and bfla status
	// (GET /modules/bfla/event/{id})
	BflagetEvent(w http.ResponseWriter, r *http.Request, id int)

	// (PUT /modules/bfla/event/{id}/{operation})
	PutModulesBflaEventIdOperation(w http.ResponseWriter, r *http.Request, id int, operation OperationEnum)
	// Get the version of this Module
	// (GET /modules/bfla/version)
	BflagetVersion(w http.ResponseWriter, r *http.Request)
	// Start this Module
	// (GET /modules/differ/start)
	Differstart(w http.ResponseWriter, r *http.Request)
	// Stop this Module
	// (GET /modules/differ/stop)
	Differstop(w http.ResponseWriter, r *http.Request)
	// Get the version of this Module
	// (GET /modules/differ/version)
	DiffergetVersion(w http.ResponseWriter, r *http.Request)
	// Retreive the annotated spec for an API
	// (GET /modules/fuzzer/annotatedspec/{apiID})
	FuzzerGetAnnotatedSpec(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get findings for an API and module
	// (GET /modules/fuzzer/apiFindings/{apiID})
	FuzzerGetAPIFindings(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params FuzzerGetAPIFindingsParams)
	// Start a test for an API
	// (GET /modules/fuzzer/fuzz/{apiID}/progress)
	FuzzerGetTestProgress(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Start a test for an API
	// (GET /modules/fuzzer/fuzz/{apiID}/report)
	FuzzerGetTestReport(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Start a test for an API
	// (POST /modules/fuzzer/fuzz/{apiID}/start)
	FuzzerStartTest(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Stop (cancel) a running test for an API
	// (POST /modules/fuzzer/fuzz/{apiID}/stop)
	FuzzerStopTest(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Retreive a report for an API
	// (GET /modules/fuzzer/report/{apiID}/{timestamp})
	FuzzerGetReport(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, timestamp int64)
	// Get the current running state of this module
	// (GET /modules/fuzzer/state)
	FuzzergetState(w http.ResponseWriter, r *http.Request)
	// Retreive the list of tests for an API
	// (GET /modules/fuzzer/tests/{apiID})
	FuzzerGetTests(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Retreive last update status for an API under fuzzing
	// (GET /modules/fuzzer/updateStatus/{apiID})
	FuzzerGetUpdateStatus(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Update status for an API under fuzzing
	// (POST /modules/fuzzer/updateStatus/{apiID})
	FuzzerPostUpdateStatus(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get the version of this Module
	// (GET /modules/fuzzer/version)
	FuzzergetVersion(w http.ResponseWriter, r *http.Request)
	// Get findings for an API and module
	// (GET /modules/traceanalyzer/apiFindings/{apiID})
	TraceanalyzerGetApiFindings(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID, params TraceanalyzerGetApiFindingsParams)
	// Delete all API findings for an API
	// (POST /modules/traceanalyzer/apiFindings/{apiID}/reset)
	TraceanalyzerResetApiFindings(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Get Annotations for an event
	// (GET /modules/traceanalyzer/eventAnnotations/{eventID})
	TraceanalyzerGetEventAnnotations(w http.ResponseWriter, r *http.Request, eventID int64, params TraceanalyzerGetEventAnnotationsParams)
	// Start Trace Analysis for an API
	// (POST /modules/traceanalyzer/{apiID}/start)
	TraceanalyzerStartTraceAnalysis(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
	// Stop Trace Analysis for an API
	// (POST /modules/traceanalyzer/{apiID}/stop)
	TraceanalyzerStopTraceAnalysis(w http.ResponseWriter, r *http.Request, apiID externalRef0.ApiID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiEvents operation middleware
func (siw *ServerInterfaceWrapper) GetApiEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiEventsParams

	// ------------- Required query parameter "startTime" -------------
	if paramValue := r.URL.Query().Get("startTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "startTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startTime", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startTime", Err: err})
		return
	}

	// ------------- Required query parameter "endTime" -------------
	if paramValue := r.URL.Query().Get("endTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "endTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endTime", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endTime", Err: err})
		return
	}

	// ------------- Required query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------
	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Required query parameter "sortKey" -------------
	if paramValue := r.URL.Query().Get("sortKey"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sortKey"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sortKey", r.URL.Query(), &params.SortKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortKey", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDir" -------------
	if paramValue := r.URL.Query().Get("sortDir"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sortDir", r.URL.Query(), &params.SortDir)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDir", Err: err})
		return
	}

	// ------------- Required query parameter "showNonApi" -------------
	if paramValue := r.URL.Query().Get("showNonApi"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "showNonApi"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "showNonApi", r.URL.Query(), &params.ShowNonApi)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "showNonApi", Err: err})
		return
	}

	// ------------- Optional query parameter "apiInfoId[is]" -------------
	if paramValue := r.URL.Query().Get("apiInfoId[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "apiInfoId[is]", r.URL.Query(), &params.ApiInfoIdIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiInfoId[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "method[is]" -------------
	if paramValue := r.URL.Query().Get("method[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "method[is]", r.URL.Query(), &params.MethodIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[is]" -------------
	if paramValue := r.URL.Query().Get("path[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[is]", r.URL.Query(), &params.PathIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[isNot]" -------------
	if paramValue := r.URL.Query().Get("path[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[isNot]", r.URL.Query(), &params.PathIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[start]" -------------
	if paramValue := r.URL.Query().Get("path[start]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[start]", r.URL.Query(), &params.PathStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[start]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[end]" -------------
	if paramValue := r.URL.Query().Get("path[end]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[end]", r.URL.Query(), &params.PathEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[end]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[contains]" -------------
	if paramValue := r.URL.Query().Get("path[contains]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[contains]", r.URL.Query(), &params.PathContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[is]" -------------
	if paramValue := r.URL.Query().Get("statusCode[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[is]", r.URL.Query(), &params.StatusCodeIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[isNot]" -------------
	if paramValue := r.URL.Query().Get("statusCode[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[isNot]", r.URL.Query(), &params.StatusCodeIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[gte]" -------------
	if paramValue := r.URL.Query().Get("statusCode[gte]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[gte]", r.URL.Query(), &params.StatusCodeGte)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[gte]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[lte]" -------------
	if paramValue := r.URL.Query().Get("statusCode[lte]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[lte]", r.URL.Query(), &params.StatusCodeLte)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[lte]", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceIP[is]" -------------
	if paramValue := r.URL.Query().Get("sourceIP[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourceIP[is]", r.URL.Query(), &params.SourceIPIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceIP[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceIP[isNot]" -------------
	if paramValue := r.URL.Query().Get("sourceIP[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourceIP[isNot]", r.URL.Query(), &params.SourceIPIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceIP[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationIP[is]" -------------
	if paramValue := r.URL.Query().Get("destinationIP[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationIP[is]", r.URL.Query(), &params.DestinationIPIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationIP[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationIP[isNot]" -------------
	if paramValue := r.URL.Query().Get("destinationIP[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationIP[isNot]", r.URL.Query(), &params.DestinationIPIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationIP[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationPort[is]" -------------
	if paramValue := r.URL.Query().Get("destinationPort[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationPort[is]", r.URL.Query(), &params.DestinationPortIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationPort[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationPort[isNot]" -------------
	if paramValue := r.URL.Query().Get("destinationPort[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationPort[isNot]", r.URL.Query(), &params.DestinationPortIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationPort[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "hasSpecDiff[is]" -------------
	if paramValue := r.URL.Query().Get("hasSpecDiff[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hasSpecDiff[is]", r.URL.Query(), &params.HasSpecDiffIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hasSpecDiff[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "specDiffType[is]" -------------
	if paramValue := r.URL.Query().Get("specDiffType[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "specDiffType[is]", r.URL.Query(), &params.SpecDiffTypeIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "specDiffType[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[is]" -------------
	if paramValue := r.URL.Query().Get("spec[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[is]", r.URL.Query(), &params.SpecIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[isNot]" -------------
	if paramValue := r.URL.Query().Get("spec[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[isNot]", r.URL.Query(), &params.SpecIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[start]" -------------
	if paramValue := r.URL.Query().Get("spec[start]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[start]", r.URL.Query(), &params.SpecStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[start]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[end]" -------------
	if paramValue := r.URL.Query().Get("spec[end]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[end]", r.URL.Query(), &params.SpecEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[end]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[contains]" -------------
	if paramValue := r.URL.Query().Get("spec[contains]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[contains]", r.URL.Query(), &params.SpecContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "alert[is]" -------------
	if paramValue := r.URL.Query().Get("alert[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "alert[is]", r.URL.Query(), &params.AlertIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alert[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "alertType[is]" -------------
	if paramValue := r.URL.Query().Get("alertType[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "alertType[is]", r.URL.Query(), &params.AlertTypeIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alertType[is]", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) GetApiEventsEventId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId uint32

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, chi.URLParam(r, "eventId"), &eventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiEventsEventId(w, r, eventId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiEventsEventIdProvidedSpecDiff operation middleware
func (siw *ServerInterfaceWrapper) GetApiEventsEventIdProvidedSpecDiff(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId uint32

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, chi.URLParam(r, "eventId"), &eventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiEventsEventIdProvidedSpecDiff(w, r, eventId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiEventsEventIdReconstructedSpecDiff operation middleware
func (siw *ServerInterfaceWrapper) GetApiEventsEventIdReconstructedSpecDiff(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId uint32

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, chi.URLParam(r, "eventId"), &eventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiEventsEventIdReconstructedSpecDiff(w, r, eventId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventory operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiInventoryParams

	// ------------- Required query parameter "type" -------------
	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Required query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------
	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Required query parameter "sortKey" -------------
	if paramValue := r.URL.Query().Get("sortKey"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sortKey"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sortKey", r.URL.Query(), &params.SortKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortKey", Err: err})
		return
	}

	// ------------- Optional query parameter "sortDir" -------------
	if paramValue := r.URL.Query().Get("sortDir"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sortDir", r.URL.Query(), &params.SortDir)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortDir", Err: err})
		return
	}

	// ------------- Optional query parameter "name[is]" -------------
	if paramValue := r.URL.Query().Get("name[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name[is]", r.URL.Query(), &params.NameIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "name[isNot]" -------------
	if paramValue := r.URL.Query().Get("name[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name[isNot]", r.URL.Query(), &params.NameIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "name[start]" -------------
	if paramValue := r.URL.Query().Get("name[start]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name[start]", r.URL.Query(), &params.NameStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name[start]", Err: err})
		return
	}

	// ------------- Optional query parameter "name[end]" -------------
	if paramValue := r.URL.Query().Get("name[end]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name[end]", r.URL.Query(), &params.NameEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name[end]", Err: err})
		return
	}

	// ------------- Optional query parameter "name[contains]" -------------
	if paramValue := r.URL.Query().Get("name[contains]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name[contains]", r.URL.Query(), &params.NameContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "port[is]" -------------
	if paramValue := r.URL.Query().Get("port[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "port[is]", r.URL.Query(), &params.PortIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "port[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "port[isNot]" -------------
	if paramValue := r.URL.Query().Get("port[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "port[isNot]", r.URL.Query(), &params.PortIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "port[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "hasProvidedSpec[is]" -------------
	if paramValue := r.URL.Query().Get("hasProvidedSpec[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hasProvidedSpec[is]", r.URL.Query(), &params.HasProvidedSpecIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hasProvidedSpec[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "hasReconstructedSpec[is]" -------------
	if paramValue := r.URL.Query().Get("hasReconstructedSpec[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hasReconstructedSpec[is]", r.URL.Query(), &params.HasReconstructedSpecIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hasReconstructedSpec[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "apiId" -------------
	if paramValue := r.URL.Query().Get("apiId"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "apiId", r.URL.Query(), &params.ApiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventory(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiInventory operation middleware
func (siw *ServerInterfaceWrapper) PostApiInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiInventory(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdFromHostAndPort operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdFromHostAndPort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiInventoryApiIdFromHostAndPortParams

	// ------------- Required query parameter "host" -------------
	if paramValue := r.URL.Query().Get("host"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "host"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "host", r.URL.Query(), &params.Host)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	// ------------- Required query parameter "port" -------------
	if paramValue := r.URL.Query().Get("port"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "port"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "port", r.URL.Query(), &params.Port)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "port", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdFromHostAndPort(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdApiInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdApiInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdApiInfo(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdProvidedSwaggerJson operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdProvidedSwaggerJson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdProvidedSwaggerJson(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdReconstructedSwaggerJson operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdReconstructedSwaggerJson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdReconstructedSwaggerJson(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdSpecs operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdSpecs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdSpecs(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiInventoryApiIdSpecsProvidedSpec operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiInventoryApiIdSpecsProvidedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiInventoryApiIdSpecsProvidedSpec(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiInventoryApiIdSpecsProvidedSpec operation middleware
func (siw *ServerInterfaceWrapper) PutApiInventoryApiIdSpecsProvidedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiInventoryApiIdSpecsProvidedSpec(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiInventoryApiIdSpecsReconstructedSpec operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiInventoryApiIdSpecsReconstructedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiInventoryApiIdSpecsReconstructedSpec(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiInventoryApiIdSuggestedReview operation middleware
func (siw *ServerInterfaceWrapper) GetApiInventoryApiIdSuggestedReview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiId" -------------
	var apiId ApiId

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiId", runtime.ParamLocationPath, chi.URLParam(r, "apiId"), &apiId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiInventoryApiIdSuggestedReview(w, r, apiId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiInventoryReviewIdApprovedReview operation middleware
func (siw *ServerInterfaceWrapper) PostApiInventoryReviewIdApprovedReview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "reviewId" -------------
	var reviewId ReviewId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reviewId", runtime.ParamLocationPath, chi.URLParam(r, "reviewId"), &reviewId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiInventoryReviewIdApprovedReview(w, r, reviewId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiUsageHitCount operation middleware
func (siw *ServerInterfaceWrapper) GetApiUsageHitCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiUsageHitCountParams

	// ------------- Required query parameter "startTime" -------------
	if paramValue := r.URL.Query().Get("startTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "startTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startTime", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startTime", Err: err})
		return
	}

	// ------------- Required query parameter "endTime" -------------
	if paramValue := r.URL.Query().Get("endTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "endTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endTime", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endTime", Err: err})
		return
	}

	// ------------- Required query parameter "showNonApi" -------------
	if paramValue := r.URL.Query().Get("showNonApi"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "showNonApi"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "showNonApi", r.URL.Query(), &params.ShowNonApi)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "showNonApi", Err: err})
		return
	}

	// ------------- Optional query parameter "method[is]" -------------
	if paramValue := r.URL.Query().Get("method[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "method[is]", r.URL.Query(), &params.MethodIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "providedPathID[is]" -------------
	if paramValue := r.URL.Query().Get("providedPathID[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "providedPathID[is]", r.URL.Query(), &params.ProvidedPathIDIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providedPathID[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "reconstructedPathID[is]" -------------
	if paramValue := r.URL.Query().Get("reconstructedPathID[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "reconstructedPathID[is]", r.URL.Query(), &params.ReconstructedPathIDIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reconstructedPathID[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[is]" -------------
	if paramValue := r.URL.Query().Get("path[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[is]", r.URL.Query(), &params.PathIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[isNot]" -------------
	if paramValue := r.URL.Query().Get("path[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[isNot]", r.URL.Query(), &params.PathIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[start]" -------------
	if paramValue := r.URL.Query().Get("path[start]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[start]", r.URL.Query(), &params.PathStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[start]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[end]" -------------
	if paramValue := r.URL.Query().Get("path[end]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[end]", r.URL.Query(), &params.PathEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[end]", Err: err})
		return
	}

	// ------------- Optional query parameter "path[contains]" -------------
	if paramValue := r.URL.Query().Get("path[contains]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "path[contains]", r.URL.Query(), &params.PathContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path[contains]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[is]" -------------
	if paramValue := r.URL.Query().Get("statusCode[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[is]", r.URL.Query(), &params.StatusCodeIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[isNot]" -------------
	if paramValue := r.URL.Query().Get("statusCode[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[isNot]", r.URL.Query(), &params.StatusCodeIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[gte]" -------------
	if paramValue := r.URL.Query().Get("statusCode[gte]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[gte]", r.URL.Query(), &params.StatusCodeGte)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[gte]", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode[lte]" -------------
	if paramValue := r.URL.Query().Get("statusCode[lte]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "statusCode[lte]", r.URL.Query(), &params.StatusCodeLte)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode[lte]", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceIP[is]" -------------
	if paramValue := r.URL.Query().Get("sourceIP[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourceIP[is]", r.URL.Query(), &params.SourceIPIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceIP[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceIP[isNot]" -------------
	if paramValue := r.URL.Query().Get("sourceIP[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sourceIP[isNot]", r.URL.Query(), &params.SourceIPIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceIP[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationIP[is]" -------------
	if paramValue := r.URL.Query().Get("destinationIP[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationIP[is]", r.URL.Query(), &params.DestinationIPIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationIP[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationIP[isNot]" -------------
	if paramValue := r.URL.Query().Get("destinationIP[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationIP[isNot]", r.URL.Query(), &params.DestinationIPIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationIP[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationPort[is]" -------------
	if paramValue := r.URL.Query().Get("destinationPort[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationPort[is]", r.URL.Query(), &params.DestinationPortIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationPort[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "destinationPort[isNot]" -------------
	if paramValue := r.URL.Query().Get("destinationPort[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "destinationPort[isNot]", r.URL.Query(), &params.DestinationPortIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destinationPort[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "hasSpecDiff[is]" -------------
	if paramValue := r.URL.Query().Get("hasSpecDiff[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "hasSpecDiff[is]", r.URL.Query(), &params.HasSpecDiffIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hasSpecDiff[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "specDiffType[is]" -------------
	if paramValue := r.URL.Query().Get("specDiffType[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "specDiffType[is]", r.URL.Query(), &params.SpecDiffTypeIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "specDiffType[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[is]" -------------
	if paramValue := r.URL.Query().Get("spec[is]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[is]", r.URL.Query(), &params.SpecIs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[is]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[isNot]" -------------
	if paramValue := r.URL.Query().Get("spec[isNot]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[isNot]", r.URL.Query(), &params.SpecIsNot)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[isNot]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[start]" -------------
	if paramValue := r.URL.Query().Get("spec[start]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[start]", r.URL.Query(), &params.SpecStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[start]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[end]" -------------
	if paramValue := r.URL.Query().Get("spec[end]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[end]", r.URL.Query(), &params.SpecEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[end]", Err: err})
		return
	}

	// ------------- Optional query parameter "spec[contains]" -------------
	if paramValue := r.URL.Query().Get("spec[contains]"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "spec[contains]", r.URL.Query(), &params.SpecContains)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec[contains]", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUsageHitCount(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDashboardApiUsage operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardApiUsage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDashboardApiUsageParams

	// ------------- Required query parameter "startTime" -------------
	if paramValue := r.URL.Query().Get("startTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "startTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startTime", r.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startTime", Err: err})
		return
	}

	// ------------- Required query parameter "endTime" -------------
	if paramValue := r.URL.Query().Get("endTime"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "endTime"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endTime", r.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endTime", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDashboardApiUsage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDashboardApiUsageLatestDiffs operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardApiUsageLatestDiffs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDashboardApiUsageLatestDiffs(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDashboardApiUsageMostUsed operation middleware
func (siw *ServerInterfaceWrapper) GetDashboardApiUsageMostUsed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDashboardApiUsageMostUsed(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeatures(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BflaGetAPIFindingsForAPI operation middleware
func (siw *ServerInterfaceWrapper) BflaGetAPIFindingsForAPI(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BflaGetAPIFindingsForAPIParams

	// ------------- Optional query parameter "sensitive" -------------
	if paramValue := r.URL.Query().Get("sensitive"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sensitive", r.URL.Query(), &params.Sensitive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sensitive", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BflaGetAPIFindingsForAPI(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BflaGetApiFindings operation middleware
func (siw *ServerInterfaceWrapper) BflaGetApiFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params BflaGetApiFindingsParams

	// ------------- Optional query parameter "sensitive" -------------
	if paramValue := r.URL.Query().Get("sensitive"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sensitive", r.URL.Query(), &params.Sensitive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sensitive", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BflaGetApiFindings(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModulesBflaAuthorizationModelApiID operation middleware
func (siw *ServerInterfaceWrapper) GetModulesBflaAuthorizationModelApiID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModulesBflaAuthorizationModelApiID(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostModulesBflaAuthorizationModelApiID operation middleware
func (siw *ServerInterfaceWrapper) PostModulesBflaAuthorizationModelApiID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostModulesBflaAuthorizationModelApiID(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDApprove operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDApprove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutModulesBflaAuthorizationModelApiIDApproveParams

	// ------------- Required query parameter "method" -------------
	if paramValue := r.URL.Query().Get("method"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "method"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "method", r.URL.Query(), &params.Method)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Required query parameter "k8sClientUid" -------------
	if paramValue := r.URL.Query().Get("k8sClientUid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "k8sClientUid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "k8sClientUid", r.URL.Query(), &params.K8sClientUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "k8sClientUid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDApprove(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDDeny operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDDeny(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutModulesBflaAuthorizationModelApiIDDenyParams

	// ------------- Required query parameter "method" -------------
	if paramValue := r.URL.Query().Get("method"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "method"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "method", r.URL.Query(), &params.Method)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method", Err: err})
		return
	}

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Required query parameter "k8sClientUid" -------------
	if paramValue := r.URL.Query().Get("k8sClientUid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "k8sClientUid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "k8sClientUid", r.URL.Query(), &params.K8sClientUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "k8sClientUid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDDeny(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDDetectionStart operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDDetectionStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDDetectionStart(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDDetectionStop operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDDetectionStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDDetectionStop(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDLearningStart operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDLearningStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutModulesBflaAuthorizationModelApiIDLearningStartParams

	// ------------- Optional query parameter "nr_traces" -------------
	if paramValue := r.URL.Query().Get("nr_traces"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nr_traces", r.URL.Query(), &params.NrTraces)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nr_traces", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDLearningStart(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaAuthorizationModelApiIDLearningStop operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaAuthorizationModelApiIDLearningStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaAuthorizationModelApiIDLearningStop(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostModulesBflaAuthorizationModelApiIDReset operation middleware
func (siw *ServerInterfaceWrapper) PostModulesBflaAuthorizationModelApiIDReset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostModulesBflaAuthorizationModelApiIDReset(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModulesBflaAuthorizationModelApiIDState operation middleware
func (siw *ServerInterfaceWrapper) GetModulesBflaAuthorizationModelApiIDState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModulesBflaAuthorizationModelApiIDState(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BflagetEvent operation middleware
func (siw *ServerInterfaceWrapper) BflagetEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BflagetEvent(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModulesBflaEventIdOperation operation middleware
func (siw *ServerInterfaceWrapper) PutModulesBflaEventIdOperation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "operation" -------------
	var operation OperationEnum

	err = runtime.BindStyledParameterWithLocation("simple", false, "operation", runtime.ParamLocationPath, chi.URLParam(r, "operation"), &operation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "operation", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModulesBflaEventIdOperation(w, r, id, operation)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BflagetVersion operation middleware
func (siw *ServerInterfaceWrapper) BflagetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BflagetVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Differstart operation middleware
func (siw *ServerInterfaceWrapper) Differstart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Differstart(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Differstop operation middleware
func (siw *ServerInterfaceWrapper) Differstop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Differstop(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DiffergetVersion operation middleware
func (siw *ServerInterfaceWrapper) DiffergetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DiffergetVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetAnnotatedSpec operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetAnnotatedSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetAnnotatedSpec(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetAPIFindings operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetAPIFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params FuzzerGetAPIFindingsParams

	// ------------- Optional query parameter "sensitive" -------------
	if paramValue := r.URL.Query().Get("sensitive"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sensitive", r.URL.Query(), &params.Sensitive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sensitive", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetAPIFindings(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetTestProgress operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetTestProgress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetTestProgress(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetTestReport operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetTestReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetTestReport(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerStartTest operation middleware
func (siw *ServerInterfaceWrapper) FuzzerStartTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerStartTest(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerStopTest operation middleware
func (siw *ServerInterfaceWrapper) FuzzerStopTest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerStopTest(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetReport operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetReport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// ------------- Path parameter "timestamp" -------------
	var timestamp int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, chi.URLParam(r, "timestamp"), &timestamp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "timestamp", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetReport(w, r, apiID, timestamp)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzergetState operation middleware
func (siw *ServerInterfaceWrapper) FuzzergetState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzergetState(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetTests operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetTests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetTests(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerGetUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) FuzzerGetUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerGetUpdateStatus(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzerPostUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) FuzzerPostUpdateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzerPostUpdateStatus(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FuzzergetVersion operation middleware
func (siw *ServerInterfaceWrapper) FuzzergetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FuzzergetVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TraceanalyzerGetApiFindings operation middleware
func (siw *ServerInterfaceWrapper) TraceanalyzerGetApiFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TraceanalyzerGetApiFindingsParams

	// ------------- Optional query parameter "sensitive" -------------
	if paramValue := r.URL.Query().Get("sensitive"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sensitive", r.URL.Query(), &params.Sensitive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sensitive", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TraceanalyzerGetApiFindings(w, r, apiID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TraceanalyzerResetApiFindings operation middleware
func (siw *ServerInterfaceWrapper) TraceanalyzerResetApiFindings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TraceanalyzerResetApiFindings(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TraceanalyzerGetEventAnnotations operation middleware
func (siw *ServerInterfaceWrapper) TraceanalyzerGetEventAnnotations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventID", runtime.ParamLocationPath, chi.URLParam(r, "eventID"), &eventID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TraceanalyzerGetEventAnnotationsParams

	// ------------- Optional query parameter "redacted" -------------
	if paramValue := r.URL.Query().Get("redacted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "redacted", r.URL.Query(), &params.Redacted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redacted", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TraceanalyzerGetEventAnnotations(w, r, eventID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TraceanalyzerStartTraceAnalysis operation middleware
func (siw *ServerInterfaceWrapper) TraceanalyzerStartTraceAnalysis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TraceanalyzerStartTraceAnalysis(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TraceanalyzerStopTraceAnalysis operation middleware
func (siw *ServerInterfaceWrapper) TraceanalyzerStopTraceAnalysis(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "apiID" -------------
	var apiID externalRef0.ApiID

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiID", runtime.ParamLocationPath, chi.URLParam(r, "apiID"), &apiID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "apiID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TraceanalyzerStopTraceAnalysis(w, r, apiID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiEvents", wrapper.GetApiEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiEvents/{eventId}", wrapper.GetApiEventsEventId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiEvents/{eventId}/providedSpecDiff", wrapper.GetApiEventsEventIdProvidedSpecDiff)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiEvents/{eventId}/reconstructedSpecDiff", wrapper.GetApiEventsEventIdReconstructedSpecDiff)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory", wrapper.GetApiInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apiInventory", wrapper.PostApiInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/apiId/fromHostAndPort", wrapper.GetApiInventoryApiIdFromHostAndPort)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/{apiId}/apiInfo", wrapper.GetApiInventoryApiIdApiInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/{apiId}/provided_swagger.json", wrapper.GetApiInventoryApiIdProvidedSwaggerJson)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/{apiId}/reconstructed_swagger.json", wrapper.GetApiInventoryApiIdReconstructedSwaggerJson)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/{apiId}/specs", wrapper.GetApiInventoryApiIdSpecs)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/apiInventory/{apiId}/specs/providedSpec", wrapper.DeleteApiInventoryApiIdSpecsProvidedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/apiInventory/{apiId}/specs/providedSpec", wrapper.PutApiInventoryApiIdSpecsProvidedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/apiInventory/{apiId}/specs/reconstructedSpec", wrapper.DeleteApiInventoryApiIdSpecsReconstructedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiInventory/{apiId}/suggestedReview", wrapper.GetApiInventoryApiIdSuggestedReview)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/apiInventory/{reviewId}/approvedReview", wrapper.PostApiInventoryReviewIdApprovedReview)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/apiUsage/hitCount", wrapper.GetApiUsageHitCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dashboard/apiUsage", wrapper.GetDashboardApiUsage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dashboard/apiUsage/latestDiffs", wrapper.GetDashboardApiUsageLatestDiffs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dashboard/apiUsage/mostUsed", wrapper.GetDashboardApiUsageMostUsed)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/features", wrapper.GetFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/api/findings/{apiID}", wrapper.BflaGetAPIFindingsForAPI)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/apiFindings/{apiID}", wrapper.BflaGetApiFindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}", wrapper.GetModulesBflaAuthorizationModelApiID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}", wrapper.PostModulesBflaAuthorizationModelApiID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/approve", wrapper.PutModulesBflaAuthorizationModelApiIDApprove)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/deny", wrapper.PutModulesBflaAuthorizationModelApiIDDeny)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/detection/start", wrapper.PutModulesBflaAuthorizationModelApiIDDetectionStart)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/detection/stop", wrapper.PutModulesBflaAuthorizationModelApiIDDetectionStop)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/learning/start", wrapper.PutModulesBflaAuthorizationModelApiIDLearningStart)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/learning/stop", wrapper.PutModulesBflaAuthorizationModelApiIDLearningStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/reset", wrapper.PostModulesBflaAuthorizationModelApiIDReset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/authorizationModel/{apiID}/state", wrapper.GetModulesBflaAuthorizationModelApiIDState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/event/{id}", wrapper.BflagetEvent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/modules/bfla/event/{id}/{operation}", wrapper.PutModulesBflaEventIdOperation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/bfla/version", wrapper.BflagetVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/differ/start", wrapper.Differstart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/differ/stop", wrapper.Differstop)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/differ/version", wrapper.DiffergetVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/annotatedspec/{apiID}", wrapper.FuzzerGetAnnotatedSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/apiFindings/{apiID}", wrapper.FuzzerGetAPIFindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/fuzz/{apiID}/progress", wrapper.FuzzerGetTestProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/fuzz/{apiID}/report", wrapper.FuzzerGetTestReport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/fuzzer/fuzz/{apiID}/start", wrapper.FuzzerStartTest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/fuzzer/fuzz/{apiID}/stop", wrapper.FuzzerStopTest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/report/{apiID}/{timestamp}", wrapper.FuzzerGetReport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/state", wrapper.FuzzergetState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/tests/{apiID}", wrapper.FuzzerGetTests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/updateStatus/{apiID}", wrapper.FuzzerGetUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/fuzzer/updateStatus/{apiID}", wrapper.FuzzerPostUpdateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/fuzzer/version", wrapper.FuzzergetVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/traceanalyzer/apiFindings/{apiID}", wrapper.TraceanalyzerGetApiFindings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/traceanalyzer/apiFindings/{apiID}/reset", wrapper.TraceanalyzerResetApiFindings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/modules/traceanalyzer/eventAnnotations/{eventID}", wrapper.TraceanalyzerGetEventAnnotations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/traceanalyzer/{apiID}/start", wrapper.TraceanalyzerStartTraceAnalysis)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/modules/traceanalyzer/{apiID}/stop", wrapper.TraceanalyzerStopTraceAnalysis)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bW/bOLbwXyH0PMDuAtqmszt7sQhwP7i203qbOL62M7N3iyBgLNrmVKY0IpVMpsh/",
	"v+CbREmURFlunHb8qY1FHh6edx6Sh1+8VbSLI4IIo975Fy+GCdwhhhLxFwxRwib0AocMJfyHANFVgmOG",
	"I+KdewP+GXzEJACfBpfj+fJuMr24BlEC5F8/D+bTW8/3MG/8a4qSJ8/3CNwh71yC/oQp/05XW7SDHD5m",
	"aCdG/v8JWnvn3ps3Z6tot4vIWRQjAmP85gnuwv93liN9JjvTM4HMAj2gBLOnMUl33rPvsadYDJYk8Ml7",
	"fvb1jJbi9y/1mPEG9dgpsJQlmGzs48R4/IAIW0QJ+4ieqrTjH8Bn9FRDHqr6+V6Cfk1xggLvnCUpMtHZ",
	"g0YlrBSmkyCjRQzZ1iCF+NaEwzpKdpB5516KCfv737yMFJgwtEFJPkSdEMEYAxwAFoEEsTQhdfKiUMmH",
	"LjFBjUPW0SQwRbYOmGhYYbHzfAinY5Q8vToGVzBTGE/hDg0jwiAmLdTh/3xaqaZ9NIAPOSYB/RmzrcOQ",
	"iAS37RzmQCcuM8C9cZ/QacScRppGrO9gCwYT5koqyhs7EEvbuZLdnk0Abw4+TabL8Xw6uOQ2e/xv+f86",
	"iy0GOLi4cgyltX72OZoME8jRnMzamFxo3IfbpVFbeV4euA/zDVizqOhrW4bmzQ80azlyl3mrwfvMHJFg",
	"iXcW6RyTADC8QyBaA7ZFQGNhQ0kDcXJRAWTor0w2r2rLFtJZEj3gAAWLGK2aSVFqXOGDAn8fRSGCRMOf",
	"o1VEKEvSFXMcpNLDcSTedITX69YBdEMnuBFldv/NvwAB1M4m0bOJR1V27BDbRq2OXLY6ZBj5gbH4SkC1",
	"Sm0MNxaRncENAiTd3aPERWoFEAdymDEH77PAv1sGv4K/4V26A2LSrXFUBqdp/J0E6Z3/463v7TCRf/zg",
	"2xFjW7e4grfsH1dwKG5BhRjPIajg7SYuuON+WDuYWDVMH7vKQbjGEmI4p1gijpIa3RdfamRNfuqi9rGD",
	"E4x7er7Yzd3F/X1crHzEjHN/1DqvQus+M0xMt+E2uKVLPwwCyCHVD6e+m/ADtIZpyLzzNQwp8m0+KEEP",
	"GD3WLlizz73XrHQbPU4jMohx3RSMFg4ybk6Cr/1GOLGvGTHZgAAnaCV+q188cgBW4nmDxdDj8RW32Z/U",
	"X6PxYujd2uIeGqXJCrWH27pdH6nIx2rVPmO4PhpIY7Ry8068ZX/vRFU8xZc1E4cRddtDhjAaZi2Cbu5T",
	"EMTBffJ2LlPtJThijHahkcP0FRhX9ymGc3KfopF9uSMGc17w5IAOsOShDLKUDqMAvWeoLj+3SRBkKAFs",
	"CwmIEoB+TWFYj50C+GnDkANRVOtW8cnh9hEiY7x2UTKH7CVQGaDLeiKHiNKuFA7bKCzcJY0jQpHA9YZ8",
	"JtEjGSdJJFDgxg4REdbBOA7xSiztz36hHKUvfRM7czW0RKQ43VRiApBARVBJduSjDWaTYQgTzJ4uEGRp",
	"YtGZUf4XV5q8B1jLLgCSQOhSiClTTcQqlYI/YyK+cB0Bf+K/nfNI709/kb+q/kq3xHpqgxhgCVyJPp6I",
	"6mKUMCypqnqMTAQrOr6NEga26Q4SkCAYwPsQgaA4CWP0qrL6epgplDZEscRO/DIB9W6IIMAyWvK5dI7n",
	"tK35VEAlDymi+1/QivHO9vFtWUjNNdUOTGUKQYcu9+sQer4X4PUaccKv099/F//hhpf/StX/jeBVcEhw",
	"CxIYPvH2txZyVnC8xLbkxmUuPiUJo0LE1lxd4Wqbyc2Lyhy1BQpuImFlso2TI0Hm8y8lDNQOSo9dinXE",
	"Rwg0eKdpcGRaxVOjpoHXiKjYCBsQEjFh9ixz5OK3EPa2Da93F5cD1bKYWf34T3otB22BkDWco7WEwRBf",
	"H91Q6S4aqWK2ffY99BtDCYGhbfXheztMd5CttihYrKIYUXsrGX7viX6JIQYdDeQsmNxyzmQcsQhd4VtF",
	"pz9jElg/EGU0Kx+o2i62xyfmHHCgfbBvomGAUONbpa1JyjLBd1PkfOyKHvgei5hke9GKLfnPAHGBBzny",
	"FKyilDD78tecu4RqnViMl9FnRORZgfB67Z1/asE/Zdsowb8LDBb8R/QO8iDBL9PlM3qy8uwBhilqZ5jc",
	"eZWNq6gLSTNRuYoCFFaZEyKYEA7eqiS8Zc5WN/5VBr3WQGwM5c5N7+E1gV3odmUyZAAK2Pr5xKxsrSA5",
	"SAOMiIwaSjqp2qLATiNEgruUqvMkbka+ZM7KNGk2b5//Se+ivUxuCGm2RHNZQJmhvS1p73uPksbdfUiJ",
	"iTkNfZPeBWNq4FIe2I3F04jhtVoDWPW5g4PnKl2Ax9W7m1rU6WiuLhZRzIV0T2XM5Nwid3KvyWqTRBLS",
	"GkfDDe0RaavkphrZz2eoILdyVlpY4REw9wg7HpfI1d8OxrGybLkZ92q36cV333sHKV7xIWrFOGvge+8Q",
	"TFDSCNps8pyFuU9T48gBN7QEOfiWfOhWcdMTamtYQO/WTl3hvyrCyBysdgFY4SBEwf1ySK2czrpX11kE",
	"8AWVUhuxZOGrDmj2lsdBssN/b4xF2LvBYjIc3Cw/eCJsXl5/HE85b8eD+Xgu/+LIYRZy7Co42eymNnWC",
	"QNk4F5eDu8VyMF96ssXd5Xgwn06m7/Xfo/FyPFwaP4gGS+v6zrCmxhjT67vFbDz0fM+AfTl+P1lOrgbL",
	"sed7i5vFbDKcXN8s7q7Go8nNVfG3D5P3H+zj5Xpx+FAohpQ+Rond9nDHUBPglgQpa+nnEO2hUUFxDz8f",
	"pgE34yub2TEcldZHpZjaTioc38EgSBC1m2K55jHl5V8/C2HkGuD53sfr6fu7f98Nr6eLm6vx/G4ysu+o",
	"VNYNCnABATEJvpytIB/o9H3v5D+PaBYIWRJSPM6hDO5inXkS+We2hUz8xVEAj5ACDgFQJEx/FhNhwv7r",
	"Ry/X+UvdCBQDJSMSyn1n3xMZBD3yYLc6pSl6BDzaBb/QiADFDoumRmFgB3AdBk4AtLMvHwFhW01MQT4U",
	"oh0yl1eGoFWj+g70qI31M3b7uQzl881JZ/MlF5gEKhooSWNTXtOWwlSAcvEwM6N+/eK8xE2Y74dUQao8",
	"YQVWgunnKiz+az2sOe9jU2Pd4CLvUkO13qt6PYQx6kT0c17iT+/5DMVgPkgpkqnJGG5UIsqYsMgG2Ff9",
	"pSlT65zT33/HZDNH4hgFQ5aIY5gmCSIMyHwtSJA6CNIoWdWMt0Fce1aWayKVVmsLKbjnJkiMyY2uE+Hn",
	"8DGbqzF/rsw24tcmkgQmXxPRAtU5ei7o5g6tZulqX5EgyrR1atCKihi0yUph5Vakk2wAGNyALEtRTXob",
	"8tDnnshsYlE3LQUieW8h5RZvtohm90v2tNy6t5k72g+UdIgDEmhZ4I4AUUaHIqdnobD4LFN+gEWAbTHN",
	"iS0sBwhSzmYZDyBBBtPny5My2mpW4SEODranE00OF7G+NeFbJaJZwmZWz+xmjWL4FEbQHjfqXdS6j+LY",
	"jS0BlCbYnsNEyX0H9ZrJNEDz5Jdw06hYWOpocdYHF2u7N1/CjT4enHkh46dKiNY9r1pjaQyKZj/W6HhJ",
	"ShVuBip26cTNpk+uQQckkF2qpFnLdkAaZLGpKCVUhhwlIU2iTWn5Ykhbkg0BgwBz+DCcFfo7U1AY9Mq2",
	"vXZncqBs6gWi2GhBnRKgBYpZMyFUbyKZOiwJcltRnTLl23jkkjwx8yKj6+nY873xfH4993xvMr2bza/f",
	"z8eLRS0yNlkvZKFt26w/oYQebseLf6AxrIkKUuvCuZxGEGtaMXS2JZaD9U2cbSuNTA81wTVBYRwn0QOH",
	"ECDyJACJH0TqW/0q/29LwJiRXJWMmT7oTetK/7ZoNIxWNcGL/qKWjICpVGlDzteM20AG2R5v1nNLOc8O",
	"Ma5pqVlriGeS1MJI4/O7lAShJQkaQAYtC+0Y/poiwD8CeWgjTVCWl0zgo20RySH5TTkbVxKIDvpEjJtl",
	"WqyiBI1/w8y0Tbrz3Q5Rar0VciU/gA1+EId6EYM4pADeR6lMs6DfuEHNrJqeqxwFqO62WTOdvrF4/Jx8",
	"IGsGZBz336CwnaU9cQasLZllYJp3yZJbgtm3VvFR8tEsRGYQUhSjpm36Eoycux1M+bvJcjF5/2Hp+d5y",
	"cHm98Hzvejaejqbif4PF3WA6uPzfxZjb+ffz2VD+/R/xN/+8nA+GY/PHwWxyd3HzH/6HnSALTbQKa22y",
	"1mEqi5vhkLsg35uOlz9fzz/eXQwmlzdz7qqW19d3l9ci5z0bzBfjO+273o+n4/lkmDU1cLahY8N6yyNQ",
	"RNnMiFBsZ/buERWirx03DycgARHZREJi5bKjetZotP9Jo5HaWKrBa2ZgYqx8sitQP7w170C9bclrGeGY",
	"OKrLrGd+K+lX0baEQW2+NT8x3L7YypGwB0vyZCLnHMgIUR8wZWyui2YNcHP7OusQzDz4quU4rOoRGOuu",
	"V22+h3tVtbRQ/scHmKvcU9XhKEemG1odD9zsuSbjy9PnwvLPbR1mCjDNzzNUxbdBatU9C2rfa3E5PCm7",
	"l3GrP1+YDXnUUxX5xMWe2cLYdsh3RMUqZja//mkyGo8835uPh9fTxXJ+M1yOR9ZQe6mCziIpxVnuWnkc",
	"ZNKFCVhBKpL78vh3zs2xCcK283J4I575q9djwX3vIQ0JSuA9DrHLyv2nUnMzhl8iatUJ/vsHaI/aD2Gi",
	"CxFqlQ6WrQcbhhMSpxYvo29pARiGAPM2+dEFKkwerIkk1AZ9x21suT6M2/tmOI94a2sOQ8K5bZpw3tnl",
	"LIecvwBrP8DxPzeT4UdxBfBicHO5FP8bz0wrWhzZq1F5rSrHNWmVQFOYtjwmeR3YKWeU4fYzZts8Znpx",
	"wxlCjdLSzZqJfX+V5kvQCuEHtaN4AOt2hFA8z4w6x1l54vD7dwSYbK6iIA1RdiirKKGD2YROyBCutjUH",
	"XR9qc5Ql66cb+gWYddaw9766mPRr2VSXM7JM1cjwFifbmaw2Qv5UlSGX4xFFTFYJZnhVf7cgWgMuqwZB",
	"hrqHTa75As4d1Afe2gYmjB7doVxGjzVHkwJsc7V1cK5kexuoxusXVUgOMlM8nKKZyltgncjWBy/zG2pc",
	"tTxDKb0f3rx981ZtrHGP5517fxc/GQcXznTFQvHXBglrme1+TQLv3HuP2CBr5BdKRdYcDcybnOUXl+uc",
	"qNFYl3VyaCpq6Ti2E3VvHNqWizc6dNEVGVya5nUj3HAp1TR06FQqnuREHqMGjnP7/Ba1Y5fKzXrHfqWK",
	"BY69SoUfXHhTvZLesVcnktgu4HfqdtmpW7nSR6c+nSZmL+TXveO+gxZq6e3TtdPA1YJrLpS1VQpx7Ne9",
	"fTextNXAcOzXXVMtJVpc7GKhNLF7B3ly9rZUGuFvb992qohQE5TWXh6Xly8pUPfAN/hBnZYGCSQb5IO1",
	"mIc8/8Fd1RsgeoeIbNgW7FLKwD0CYfSIkqxEBGARMMq59TkTpxzefndK1UXSusnJi/JyfvtfNq0WkVik",
	"q5VIAPh57SO7FGSsPiuUwBB1J9LdDiZPMroxOCU+5jHR2Rfx8yR4doqOxrJxNUiq1mGVt3InI13vo1jP",
	"CmWAepWz6ivufSTqZRlXy7ez2KjXqS9euDJyVu57YmxGihdmMNB8lHc1AolCDc+TcvnUroyfWwGcuH80",
	"7hc4ahGBrPp5C5fzdl0Xsrqq9vHWptUK7wddn5ZrrHfp0inMrCt87t61e7BpL4TvwqOOK4p4r2WEpQK1",
	"W8e60tKOEqVfZ3jZwFgGhSgQGati+HiUGFgXJeoUAhcn0bOkyotZU5zZP1EQl1oM5SyiZUupTpy+i4Kn",
	"r+9oODe4cqu7jpVydi/i7aRIfHW2DEWRxSJn5Pn6imOT+nq2TqLdB84hEszU3paLuxsIZS/17eoCRTl3",
	"RxvY36TYnosx99Tq46Mmrv349sfj1kDkvJ6MwDRi4CJKSXBIDRciAriIyNL8IqsgmFGRpi+i7fOZUdDN",
	"WY4GWaW1ziHUJPCOE76WrcoL2FshsmQdSYaoydcyQq9v7ugj3GxQ8kZP3JktWRAhAfyLysuUx2BRkbYi",
	"XMdEXrBX+nscF5gtIrkW5pf+1zhEDawpLD72508xVjsxqY5JxbVeJ07xhrQTUxaixzdjya5jRAYxlli/",
	"sM7IO4ombzi6wswJuqsTePz/eI1XnHNtrCpk56RMhkgeRSmybiR+t3PPXDx9O5xUnGoKFQ7MzBtCuVcq",
	"ZdJsTPM9df6ytDJI2VfmwEstMxIoS6I8FxdoLElRdbnxw0si0xC4dpNIy4WpEmzO/QcY4kAdKoU4VBWC",
	"DyFtgyAQq/UAMyVf+9iHSiZ3XyNRSZScLEW7pbBkXbvxMN1sEGUomIv3Wbo55lLfb4hdRcSPETRlrEo0",
	"DhUW6Sdz+BJQ3Lc2mOSWGJorCINi/66Myt7ueVkXUMLayRN8f5o+iOPwSdaFVPRQIgNYBFYyOyVuZ1fE",
	"K5OpGwo36GyLWVaCpkHHReMPuu1rOUzY7WjeHqfs7O+BOfRsetHrdLzvdLzvdLzvdLzv2zne1zcY6/O+",
	"q/Y51drbL5ILBlusq6Y9YrbFhEfRKBTFbMWhuTWnXHbXytxdLBxNCyDd3kcwCTLX2+RxR7q1dr0v5HKP",
	"kuIXE6QvuJmaCorWsOUshAxRll1Ad2bRpdHvePqiLZ9i/TF0RhIwP+xTqwFnu4iyGyqfonCm85XudDwi",
	"D2J8TKPEySbvt4mrQ4K65hNTdaS80G0Oo+VuL1eJh7qa6FKZXulNrmM+5CVIuxN3LenZ/TqEXHbPdGVT",
	"mS8ZmWeMS3vG9DMtTCFKxB14DYAj++7icgDUEKK6TiFJ88asaSj4+G4dQr4my8qi0osoGcwmbaccl1sk",
	"6trml84lOnwG4jkB+9FHWVyg6eDj3lUHDMfk0NlwVwtEKGb44TgOKye89ZgAEeKnKmgVlf54hxeEJQFJ",
	"3qKsc1k9XSETJM8PloX/opPsc2imsEvIWh0kbF8oNJd1MNnFsgo7CsD9k1Rw2ahWDXKMqgpwEudDiXMm",
	"Ht+aXK+rci3ETUmVRcQrbwxZJL3iWeV1fMqF0vJIkZK540rn7dd0+pbnoFwjoVclPLJelnrJ9LbxqOW3",
	"wvJeefkO3H75/dcW9n574tbBGOnNH7HrU7Pn3y6hg6yE79E9p+3x7OwdtfoxK3U27JDUVHrD+fxPOgwx",
	"IuwGd8PrKImV70Q7wmgFw7/uoSOiLnUvBRnJytYn7Thpx3eoHQytxARErrivoihgYqPiewl2T8FId1GK",
	"4oNJUhSfBOmPJUj6metDmKRLlL2q/AosUo3LJMmdyDZTz+Ifj3xz/CSGBzBnuRSerNkfTYwSRGW+sE8W",
	"aS6AnCTnDyU5VBd23T/hLGvDfs9Z5/xZ8u9TPsTxobMvuKGIFef/BjFZusmF124L84MHHnVbTwLxASER",
	"U4/21Vy8Fu3EASwAC61tZwdQ3lgckM47iK0fTlvjESenZXTOirMvGQeeHSMDVZvo2nwp9eCM8q1Qym93",
	"Nqp33cVF4/m3kyP4eqkao3q0dUNdi7dqJ0tAYwqu6jfIN4j9lFXwfmG2SbT08BZC/WTOA+lp2FW6ds6t",
	"pA3weo2SfD1pJa0q695AzZEAQ9VS8pVudBVIZ5tTkVqSNHX0kgufGnJFsRO1xJLn2yBWZUbutDqw4kri",
	"/dFU10pg+QT0mfLgKKAxWrUePJojliD8gEznX7gFKU+ByFe1fPDj2x/zoi4gYluUPGJaZcuFwOU90uFK",
	"3W3UbyzAPkgxCV0gjIknE/ao1lMEJ55L0e+oWF65tF+JJhEDa1mZpyCIbvJQEUgpezUC+XrOweViaRzk",
	"Op2EO52E63MSTok5/ydLSZjPADUEUfIlr6Ji1Uhs4Vmo7zlRYXkEqzYwWachyPn88pYUJQ94hUxj6nv/",
	"6OVTOuMwIQwlBIbAdv+hXsq0+W4y3AWJzl+ZOpw856+ofv/SrN/bOsny8WU53y9VWw19ZFm0Vg+QfZcn",
	"WPO3Kg9Xp7R2IPVsZxc1eVERVa8Jv4MBmEtan3T1K+uq2lSuUdUoBn9eQbJC4V8ABElKiH5q3UV1o/j1",
	"aG5Bq360zPWkAN+QArjKpYtCyNgrU4kv2fvDDnkdqF86NbM5ASIMr7FcMGNGQf6icW3A9kqCNX+vN0ot",
	"SJpTdnioovZ159uv7BGN13Xbk0n2XI5FBjplcMob7NWMbUoRt0uYSHrJ7cP7KJVZzVWaJOJ9C6UFAp7J",
	"If5jY8pmg5jeov+qxC49Fmsh+FDNpYh2cWo1yd0GMmDalFoQzO2Wyg1NuTB1/8+PmG05Y6RI/KV5hfZ9",
	"pxqWSmn206omMndSrzQOIEPSsbpzWbxiLbuqDXqTzSkJUALW8tHneh7fGEN/Td2qe326Svo5fNRpwyxr",
	"aKd/NwLUsOMViLc9slXVZoWU3fTh8iyiVTYffpXYxOG2ioOuwW6xfGdPzlsU8cB7k5nrOuzepP119K+6",
	"/1ggljiCDQkMn17Z7s7SROxU7uC0yXPATZ5WoW87v1wQTnFM+TWJp1MCQh6u/ibYK4tki/JBnKvrtoIt",
	"Rfai0kFL/ehig2nj8iRYDAYKCjAAlAtKI3UEtdl+Vc57ukiJwrTnotalZmsAVwwdrvi0XQZaTrtmn23F",
	"68r0J+YrqnbOd9ohMPhNsSlbb5pZK3cM+C+67+nGwjd4ULWc7q4VBzeBa01z7y9uUXyStu9J2pqEQYKj",
	"KHnQzE2T0DsXRcy959vn/wsAAP//Kx+LfxTXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../common/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
