// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AlertSeverityEnum.
const (
	ALERTCRITICAL AlertSeverityEnum = "ALERT_CRITICAL"
	ALERTINFO     AlertSeverityEnum = "ALERT_INFO"
	ALERTWARN     AlertSeverityEnum = "ALERT_WARN"
)

// Defines values for ApiEventSortKey.
const (
	ApiType         ApiEventSortKey = "apiType"
	DestinationIP   ApiEventSortKey = "destinationIP"
	DestinationPort ApiEventSortKey = "destinationPort"
	HostSpecName    ApiEventSortKey = "hostSpecName"
	Method          ApiEventSortKey = "method"
	Path            ApiEventSortKey = "path"
	SourceIP        ApiEventSortKey = "sourceIP"
	SpecDiffType    ApiEventSortKey = "specDiffType"
	StatusCode      ApiEventSortKey = "statusCode"
	Time            ApiEventSortKey = "time"
)

// Defines values for ApiInventorySortKey.
const (
	HasProvidedSpec      ApiInventorySortKey = "hasProvidedSpec"
	HasReconstructedSpec ApiInventorySortKey = "hasReconstructedSpec"
	Name                 ApiInventorySortKey = "name"
	Port                 ApiInventorySortKey = "port"
)

// Defines values for ApiTypeEnum.
const (
	EXTERNAL ApiTypeEnum = "EXTERNAL"
	INTERNAL ApiTypeEnum = "INTERNAL"
)

// Defines values for DiffType.
const (
	GENERALDIFF DiffType = "GENERAL_DIFF"
	NODIFF      DiffType = "NO_DIFF"
	SHADOWDIFF  DiffType = "SHADOW_DIFF"
	ZOMBIEDIFF  DiffType = "ZOMBIE_DIFF"
)

// Defines values for HttpMethod.
const (
	CONNECT HttpMethod = "CONNECT"
	DELETE  HttpMethod = "DELETE"
	GET     HttpMethod = "GET"
	HEAD    HttpMethod = "HEAD"
	OPTIONS HttpMethod = "OPTIONS"
	PATCH   HttpMethod = "PATCH"
	POST    HttpMethod = "POST"
	PUT     HttpMethod = "PUT"
	TRACE   HttpMethod = "TRACE"
)

// Defines values for Severity.
const (
	CRITICAL Severity = "CRITICAL"
	HIGH     Severity = "HIGH"
	INFO     Severity = "INFO"
	LOW      Severity = "LOW"
	MEDIUM   Severity = "MEDIUM"
)

// Defines values for SpecType.
const (
	NONE          SpecType = "NONE"
	PROVIDED      SpecType = "PROVIDED"
	RECONSTRUCTED SpecType = "RECONSTRUCTED"
)

// An API Finding
type APIFinding struct {
	// Could be any opaque JSON object
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`

	// Human readable description of the finding
	Description string `json:"description"`

	// Human readable name of the finding
	Name string `json:"name"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.
	ProvidedSpecLocation *string `json:"provided_spec_location,omitempty"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.
	ReconstructedSpecLocation *string `json:"reconstructed_spec_location,omitempty"`

	// Severity of a finding
	Severity Severity `json:"severity"`

	// Name of the module which created this finding
	Source string `json:"source"`

	// Type of the finding
	Type string `json:"type"`
}

// A group of findings
type APIFindings struct {
	// A list of findings
	Items *[]APIFinding `json:"items,omitempty"`
}

// AlertSeverityEnum defines model for AlertSeverityEnum.
type AlertSeverityEnum string

// ApiCount defines model for ApiCount.
type ApiCount struct {
	ApiHostName *string `json:"apiHostName,omitempty"`

	// hold the relevant api info id
	ApiInfoId *uint32      `json:"apiInfoId,omitempty"`
	ApiPort   *int         `json:"apiPort,omitempty"`
	ApiType   *ApiTypeEnum `json:"apiType,omitempty"`
	NumCalls  *int         `json:"numCalls,omitempty"`
}

// ApiEvent defines model for ApiEvent.
type ApiEvent struct {
	Alerts *[]ModuleAlert `json:"alerts,omitempty"`

	// hold the relevant api spec info id
	ApiInfoId                *uint32      `json:"apiInfoId,omitempty"`
	ApiType                  *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationIP            *string      `json:"destinationIP,omitempty"`
	DestinationPort          *int         `json:"destinationPort,omitempty"`
	HasProvidedSpecDiff      *bool        `json:"hasProvidedSpecDiff,omitempty"`
	HasReconstructedSpecDiff *bool        `json:"hasReconstructedSpecDiff,omitempty"`
	HostSpecName             *string      `json:"hostSpecName,omitempty"`
	Id                       *uint32      `json:"id,omitempty"`
	Method                   *HttpMethod  `json:"method,omitempty"`
	Path                     *string      `json:"path,omitempty"`
	Query                    *string      `json:"query,omitempty"`
	RequestTime              *time.Time   `json:"requestTime,omitempty"`
	SourceIP                 *string      `json:"sourceIP,omitempty"`
	SpecDiffType             *DiffType    `json:"specDiffType,omitempty"`
	StatusCode               *int         `json:"statusCode,omitempty"`
	Time                     *time.Time   `json:"time,omitempty"`
}

// ApiEventPathAndMethods defines model for ApiEventPathAndMethods.
type ApiEventPathAndMethods struct {
	Methods *[]HttpMethod `json:"methods,omitempty"`
	Path    *string       `json:"path,omitempty"`
}

// ApiEventSortKey defines model for ApiEventSortKey.
type ApiEventSortKey string

// ApiEventSpecDiff defines model for ApiEventSpecDiff.
type ApiEventSpecDiff struct {
	DiffType *DiffType `json:"diffType,omitempty"`

	// New spec json string
	NewSpec string `json:"newSpec"`

	// Old spec json string
	OldSpec string `json:"oldSpec"`
}

// ApiFindingsNotification defines model for ApiFindingsNotification.
type ApiFindingsNotification struct {
	// A list of findings
	Items            *[]APIFinding `json:"items,omitempty"`
	NotificationType string        `json:"notificationType"`
}

// ApiID defines model for ApiID.
type ApiID = int64

// ApiInfo defines model for ApiInfo.
type ApiInfo struct {
	DestinationNamespace *string `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool   `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool   `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32 `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`

	// String representing the entity which created this API. Empty means it has been created by APIClarity on first trace
	TraceSource *string `json:"traceSource,omitempty"`
}

// ApiInfoWithType defines model for ApiInfoWithType.
type ApiInfoWithType struct {
	ApiType              *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationNamespace *string      `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool        `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool        `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32      `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`

	// String representing the entity which created this API. Empty means it has been created by APIClarity on first trace
	TraceSource *string `json:"traceSource,omitempty"`
}

// ApiInventorySortKey defines model for ApiInventorySortKey.
type ApiInventorySortKey string

// An object that is returned in all cases of failures
type ApiResponse struct {
	Message string `json:"message"`
}

// ApiTypeEnum defines model for ApiTypeEnum.
type ApiTypeEnum string

// ApiUsage defines model for ApiUsage.
type ApiUsage struct {
	NumOfCalls *int       `json:"numOfCalls"`
	Time       *time.Time `json:"time,omitempty"`
}

// ApiUsages defines model for ApiUsages.
type ApiUsages struct {
	ApisWithDiff *[]ApiUsage `json:"apisWithDiff,omitempty"`
	ExistingApis *[]ApiUsage `json:"existingApis,omitempty"`
	NewApis      *[]ApiUsage `json:"newApis,omitempty"`
}

// ApprovedReview defines model for ApprovedReview.
type ApprovedReview struct {
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// Base Notification all APIClarity notifications must extend
type BaseNotification struct {
	NotificationType string `json:"notificationType"`
}

// DiffType defines model for DiffType.
type DiffType string

// HitCount defines model for HitCount.
type HitCount struct {
	Count *int64     `json:"count"`
	Time  *time.Time `json:"time,omitempty"`
}

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// MethodAndPath defines model for MethodAndPath.
type MethodAndPath struct {
	Method *HttpMethod         `json:"method,omitempty"`
	Path   *string             `json:"path,omitempty"`
	PathId *openapi_types.UUID `json:"pathId,omitempty"`
}

// ModuleAlert defines model for ModuleAlert.
type ModuleAlert struct {
	Alert *AlertSeverityEnum `json:"alert,omitempty"`

	// Name of the module which created this alert
	ModuleName *string `json:"moduleName,omitempty"`

	// Optional description of reason of the alert
	Reason *string `json:"reason,omitempty"`
}

// ModuleVersion defines model for ModuleVersion.
type ModuleVersion struct {
	Version string `json:"version"`
}

// NewDiscoveredAPINotification defines model for NewDiscoveredAPINotification.
type NewDiscoveredAPINotification struct {
	DestinationNamespace *string `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool   `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool   `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32 `json:"id,omitempty"`

	// API name
	Name             *string `json:"name,omitempty"`
	NotificationType string  `json:"notificationType"`
	Port             *int    `json:"port,omitempty"`

	// String representing the entity which created this API. Empty means it has been created by APIClarity on first trace
	TraceSource *string `json:"traceSource,omitempty"`
}

// An object representing the provided and reconstructed API specs
type OpenApiSpecs struct {
	// An object containing info about a spec
	ProvidedSpec *SpecInfo `json:"providedSpec,omitempty"`

	// An object containing info about a spec
	ReconstructedSpec *SpecInfo `json:"reconstructedSpec,omitempty"`
}

// ReviewPathItem defines model for ReviewPathItem.
type ReviewPathItem struct {
	// Group of api event paths (original) that suggestedPath is representing
	ApiEventsPaths *[]ApiEventPathAndMethods `json:"apiEventsPaths,omitempty"`

	// Represents the parameterized path suggested by the engine
	SuggestedPath *string `json:"suggestedPath,omitempty"`
}

// Severity of a finding
type Severity string

// SpecDiffTime defines model for SpecDiffTime.
type SpecDiffTime struct {
	ApiEventId  *uint32    `json:"apiEventId,omitempty"`
	ApiHostName *string    `json:"apiHostName,omitempty"`
	DiffType    *DiffType  `json:"diffType,omitempty"`
	Time        *time.Time `json:"time,omitempty"`
}

// An object containing info about a spec
type SpecInfo struct {
	Tags *[]SpecTag `json:"tags,omitempty"`
}

// SpecTag defines model for SpecTag.
type SpecTag struct {
	Description       *string          `json:"description,omitempty"`
	MethodAndPathList *[]MethodAndPath `json:"methodAndPathList,omitempty"`
	Name              *string          `json:"name,omitempty"`
}

// SpecType defines model for SpecType.
type SpecType string

// An object that is return in cases of success that return nothing.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
}

// SuggestedReview defines model for SuggestedReview.
type SuggestedReview struct {
	Id              *uint32           `json:"id,omitempty"`
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// spec in json or yaml format
type RawSpec struct {
	// spec in json or yaml format
	RawSpec *string `json:"rawSpec,omitempty"`
}

// Sensitive defines model for Sensitive.
type Sensitive = bool

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaUW/juBH+KwTbhxbQxZvd4oD6pdDZ2o3uEtuwvZe2iyBgpJHNW4nkkpSzvoX3txek",
	"RFuyaEdJ03vqSxKZw+FohvPNN+N8wwkvBGfAtMLDb1gQSQrQIO3TApiimm7APKSgEkmFppzhIV6seZmn",
	"KKMspWylEGVJXqaAlNuCUqIJ+gcOMDXyX0qQWxxgRgrAQ7wXwwFWyRoKUh2RkTLXeJiRXEGA9VYY4QfO",
	"cyAM73Y7J23NC2fx++r8rn0hQ+EsRm49wEJyAVJTsFtJmlIjSfJ7yjLe3T+yr/cAiLAt4oJ8KQH9vJhO",
	"EH/4DRKNAwxfSSFy65rPsL3PgeHh5dvd3upacBe0NR8fdFUWhCEJJCUPOaDGIuIZ0mtwPm4eiUP0CORz",
	"ZdEtPKAl/wwMrYlCDwAMpaAh0ZDivTVKS6Nj5yLwhBlG6Nz5t93TfWcJyTc0hfReCUjuc54QvxOsJsEp",
	"0yCR5vZYJ31kBqLMPhqNNKOVzAVaAKC11kINBwNz87QkyWeQFxR0dsHlapDyZLDWRT6QWfLj399cXqA4",
	"Q0RbXZpWb5tI8B0ZmAcJiCrEePtgu2QMogplFPLUCBGGoBB6iypHXLQ896eBIHqtBt8vH3K+Ut8vv5nf",
	"9zTdfb9k8Pj9jeBKK58zJSScKS1LE9n/e/QVPKpgA5LqrXHfnyVkVtkBEAc11gwWTs7s4aVMPAk0aWRM",
	"wdMyB/S4psm6cgGk7o26uWQcC4SRfPs7SJ+Z1QfHBy634nyKRuEv9z/fLrsa7V36UlIJKR5+qlb3L1YD",
	"RBu1Gq668wDcAYiVB4nRSvJSGFNdtejAMdVQeLfmVOmjnXvZcxFrlIYDIhMpyda+fvcNcpDahTliZWEO",
	"APv7Ew6vo/nyPp68n+KgfrgN55P9w2geL+NReN3wzSF4oaAjXjJtq2u7Bgl6xZWe1Hjc2UkEjVnG47Tr",
	"mDXPUxt4CTlsCNOICIpMJUPUgH7GZUE0HuKSMv3u7eEKGDxYgazVz7jUjaPbi8v61p11cyVmHWZKS1mM",
	"SJ4rn06v1wWNNuD1jYlH+2qcs+PGJpwNYjfeL/CkQaTnu/MFHktBacos8MUz7y1oSJwO15qoWV1qFwKS",
	"Mc2yPnzKbpw3y8ozd3OlzY6TV5haj/dxXwF6zdOnvHeltbipJA27IHrtPbYim74Vg3ug9JJWBu8tS4mG",
	"H0zR8pYJi4wn4qNqj/UJ/l7O7NNEl2rEU/CHVD/DxHO5NSN6HbK08prqZlpxWOiVau0QHGfaiZCcM3DB",
	"pf4Ftk3Ard+yvhO11pbLGkE5TqJuyhwF6ejeHlL3BHxXVjYSo+3A9AXBZ/BoFHpYBDxW4POb4qxmO74r",
	"yfPUr2Capz0UHDEAp+1g2J0/YK7KT7jeE7YKrvNphoefznvgJ6KgtXMX9K3iCu/uKhPicSsrKNM//s2L",
	"KGEF+p6AHa6HuQBKkMSPXkeo+nJE7bezP1j6WzjT79bcrduInSwdln0uGqS2NtOoG12H83j5ryMyOMQL",
	"qxdJEBIUMG0eTA01f+qtj/eGs/gCRZbCF0CYQlQfulUn+bA1cqOcGBKGOEMZlUoja2Fv0DMxv6V67VKy",
	"39V0l8XcyA5Le3Zd3+3uThlnsITLrQf06tCJCrG816h7JU9A1hyU4EyBdy5SWYT0mmjTW0nQpWSQmjaQ",
	"5DlKiAJlOTeheSmhy9YLUIqswI/zTVxxgie8sXdYwwvxZBnNJ+E1DnD0z/rPEy/50RnRto6VxTQ7RUMD",
	"/PUHXphCJ0zbZ3PxdYqttUZ5Wb4y99EVj37ti3s7T4mFr9Tg1yoUVL2KQgaPr6TL7xoh+QbSOWwoPHb9",
	"I+3nhqXE7vBeVsxb+/rZ0ilAnfQwEqgpYlOigUqssaZQUSqN4KsGlnaypCnpEOR8unR2+PKmyTUPYD2Z",
	"3o/j9+9xsE+kf09vfooj9+niKhxPb93Th2gSzcNr9+g2+/LsiuoT7WviPn6qFv+Pcq5BRBv48SFa4gBf",
	"ReEYB3g2XZin2UfzcxxdR8sIB3g0nUyikfloOlvG08kCB3g5D0dmbRYuR1deR1RHhSyd1RTXR6NfqX8x",
	"C/ERGyhp2s8vzV7Y31c/meCdYYhp0KzaiZd59Jt9VWd7B5tE+ZJxKqoR/fFQvJJ3B55Qe9o1v4JUdfK3",
	"nbM5LJxPVCfoy88JPI6pSvgGJKThLP6jqLIjMIYmTwWwUFDDENQ5CtAhcG5ejwhLUWvebL9NUVbhMdCJ",
	"I458dpIqIKmJVnue/bzNvuAeFQRfIbadnDIiHrd8cFNKIigCI4nsXBn9hUu6oozkf604kypXK1AaLBJU",
	"DOrgxt4DSn977inPreO6Zs/d4aqKoPsCj/4OqX2Bg72GYFc0fUVZT5RdNEbkR01AvWJd1pxA10h8Pb3F",
	"Ab6JxvHHGwPJ8YcrA75uVhpgO1C9a46sa5kOQLjm241t/IGNe/dPT01eX9LS/7flbH+5z+RrwpkmlFXf",
	"2WQckQdeakRsXnbSUpNVfzZlTl+SnsNyJ+zrrJtfdHb8WjRr6DVVuv+At1V9fSTWH8uT5tfRdZd1Mp3Y",
	"8j+f/hqPI8Md5tFoOlks5x9Hy2jsZQSLMklAqef3WqbT2ndZqtJSidTrjOt1/TXXMzqv7ou6xD/FvftP",
	"HP5Ili7JieFYPZWvRltcoi0pclRbf+ypFyp50qvmI/cfA5pqC1sjXhScoUX1zkYZCgWtOwYcHHgFvrx4",
	"Y6d3AhgRFA/xu4s3F2/rCaex234pKTf2/y8+fcOlzPEQD4igg807U9v/EwAA//8Bs+oEsCEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
