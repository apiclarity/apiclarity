// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AlertSeverityEnum.
const (
	ALERTCRITICAL AlertSeverityEnum = "ALERT_CRITICAL"
	ALERTINFO     AlertSeverityEnum = "ALERT_INFO"
	ALERTWARN     AlertSeverityEnum = "ALERT_WARN"
)

// Defines values for ApiEventSortKey.
const (
	ApiType         ApiEventSortKey = "apiType"
	DestinationIP   ApiEventSortKey = "destinationIP"
	DestinationPort ApiEventSortKey = "destinationPort"
	HostSpecName    ApiEventSortKey = "hostSpecName"
	Method          ApiEventSortKey = "method"
	Path            ApiEventSortKey = "path"
	SourceIP        ApiEventSortKey = "sourceIP"
	SpecDiffType    ApiEventSortKey = "specDiffType"
	StatusCode      ApiEventSortKey = "statusCode"
	Time            ApiEventSortKey = "time"
)

// Defines values for ApiInventorySortKey.
const (
	HasProvidedSpec      ApiInventorySortKey = "hasProvidedSpec"
	HasReconstructedSpec ApiInventorySortKey = "hasReconstructedSpec"
	Name                 ApiInventorySortKey = "name"
	Port                 ApiInventorySortKey = "port"
)

// Defines values for ApiTypeEnum.
const (
	EXTERNAL ApiTypeEnum = "EXTERNAL"
	INTERNAL ApiTypeEnum = "INTERNAL"
)

// Defines values for DiffType.
const (
	GENERALDIFF DiffType = "GENERAL_DIFF"
	NODIFF      DiffType = "NO_DIFF"
	SHADOWDIFF  DiffType = "SHADOW_DIFF"
	ZOMBIEDIFF  DiffType = "ZOMBIE_DIFF"
)

// Defines values for HttpMethod.
const (
	CONNECT HttpMethod = "CONNECT"
	DELETE  HttpMethod = "DELETE"
	GET     HttpMethod = "GET"
	HEAD    HttpMethod = "HEAD"
	OPTIONS HttpMethod = "OPTIONS"
	PATCH   HttpMethod = "PATCH"
	POST    HttpMethod = "POST"
	PUT     HttpMethod = "PUT"
	TRACE   HttpMethod = "TRACE"
)

// Defines values for Severity.
const (
	CRITICAL Severity = "CRITICAL"
	HIGH     Severity = "HIGH"
	INFO     Severity = "INFO"
	LOW      Severity = "LOW"
	MEDIUM   Severity = "MEDIUM"
)

// Defines values for SpecType.
const (
	NONE          SpecType = "NONE"
	PROVIDED      SpecType = "PROVIDED"
	RECONSTRUCTED SpecType = "RECONSTRUCTED"
)

// An API Finding
type APIFinding struct {
	// Could be any opaque JSON object
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`

	// Human readable description of the finding
	Description string `json:"description"`

	// Human readable name of the finding
	Name string `json:"name"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.
	ProvidedSpecLocation *string `json:"provided_spec_location,omitempty"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.
	ReconstructedSpecLocation *string `json:"reconstructed_spec_location,omitempty"`

	// Severity of a finding
	Severity Severity `json:"severity"`

	// Name of the module which created this finding
	Source string `json:"source"`

	// Type of the finding
	Type string `json:"type"`
}

// A group of findings
type APIFindings struct {
	// A list of findings
	Items *[]APIFinding `json:"items,omitempty"`
}

// AlertSeverityEnum defines model for AlertSeverityEnum.
type AlertSeverityEnum string

// ApiCount defines model for ApiCount.
type ApiCount struct {
	ApiHostName *string `json:"apiHostName,omitempty"`

	// hold the relevant api info id
	ApiInfoId *uint32      `json:"apiInfoId,omitempty"`
	ApiPort   *int         `json:"apiPort,omitempty"`
	ApiType   *ApiTypeEnum `json:"apiType,omitempty"`
	NumCalls  *int         `json:"numCalls,omitempty"`
}

// ApiEvent defines model for ApiEvent.
type ApiEvent struct {
	Alerts *[]ModuleAlert `json:"alerts,omitempty"`

	// hold the relevant api spec info id
	ApiInfoId                *uint32      `json:"apiInfoId,omitempty"`
	ApiType                  *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationIP            *string      `json:"destinationIP,omitempty"`
	DestinationPort          *int         `json:"destinationPort,omitempty"`
	HasProvidedSpecDiff      *bool        `json:"hasProvidedSpecDiff,omitempty"`
	HasReconstructedSpecDiff *bool        `json:"hasReconstructedSpecDiff,omitempty"`
	HostSpecName             *string      `json:"hostSpecName,omitempty"`
	Id                       *uint32      `json:"id,omitempty"`
	Method                   *HttpMethod  `json:"method,omitempty"`
	Path                     *string      `json:"path,omitempty"`
	Query                    *string      `json:"query,omitempty"`
	RequestTime              *time.Time   `json:"requestTime,omitempty"`
	SourceIP                 *string      `json:"sourceIP,omitempty"`
	SpecDiffType             *DiffType    `json:"specDiffType,omitempty"`
	StatusCode               *int         `json:"statusCode,omitempty"`
	Time                     *time.Time   `json:"time,omitempty"`
}

// ApiEventPathAndMethods defines model for ApiEventPathAndMethods.
type ApiEventPathAndMethods struct {
	Methods *[]HttpMethod `json:"methods,omitempty"`
	Path    *string       `json:"path,omitempty"`
}

// ApiEventSortKey defines model for ApiEventSortKey.
type ApiEventSortKey string

// ApiEventSpecDiff defines model for ApiEventSpecDiff.
type ApiEventSpecDiff struct {
	DiffType *DiffType `json:"diffType,omitempty"`

	// New spec json string
	NewSpec string `json:"newSpec"`

	// Old spec json string
	OldSpec string `json:"oldSpec"`
}

// ApiFindingsNotification defines model for ApiFindingsNotification.
type ApiFindingsNotification struct {
	// A list of findings
	Items            *[]APIFinding `json:"items,omitempty"`
	NotificationType string        `json:"notificationType"`
}

// ApiID defines model for ApiID.
type ApiID = int64

// ApiInfo defines model for ApiInfo.
type ApiInfo struct {
	DestinationNamespace *string `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool   `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool   `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32 `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`

	// Trace Source ID which created this API. 0 means it has been created by APIClarity (from the UI for example)
	TraceSourceId *uint32 `json:"traceSourceId,omitempty"`
}

// ApiInfoWithType defines model for ApiInfoWithType.
type ApiInfoWithType struct {
	ApiType              *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationNamespace *string      `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool        `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool        `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32      `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`

	// Trace Source ID which created this API. 0 means it has been created by APIClarity (from the UI for example)
	TraceSourceId *uint32 `json:"traceSourceId,omitempty"`
}

// ApiInventorySortKey defines model for ApiInventorySortKey.
type ApiInventorySortKey string

// An object that is returned in all cases of failures
type ApiResponse struct {
	Message string `json:"message"`
}

// ApiTypeEnum defines model for ApiTypeEnum.
type ApiTypeEnum string

// ApiUsage defines model for ApiUsage.
type ApiUsage struct {
	NumOfCalls *int       `json:"numOfCalls"`
	Time       *time.Time `json:"time,omitempty"`
}

// ApiUsages defines model for ApiUsages.
type ApiUsages struct {
	ApisWithDiff *[]ApiUsage `json:"apisWithDiff,omitempty"`
	ExistingApis *[]ApiUsage `json:"existingApis,omitempty"`
	NewApis      *[]ApiUsage `json:"newApis,omitempty"`
}

// ApprovedReview defines model for ApprovedReview.
type ApprovedReview struct {
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// Base Notification all APIClarity notifications must extend
type BaseNotification struct {
	NotificationType string `json:"notificationType"`
}

// DiffType defines model for DiffType.
type DiffType string

// HitCount defines model for HitCount.
type HitCount struct {
	Count *int64     `json:"count"`
	Time  *time.Time `json:"time,omitempty"`
}

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// MethodAndPath defines model for MethodAndPath.
type MethodAndPath struct {
	Method *HttpMethod         `json:"method,omitempty"`
	Path   *string             `json:"path,omitempty"`
	PathId *openapi_types.UUID `json:"pathId,omitempty"`
}

// ModuleAlert defines model for ModuleAlert.
type ModuleAlert struct {
	Alert *AlertSeverityEnum `json:"alert,omitempty"`

	// Name of the module which created this alert
	ModuleName *string `json:"moduleName,omitempty"`

	// Optional description of reason of the alert
	Reason *string `json:"reason,omitempty"`
}

// ModuleVersion defines model for ModuleVersion.
type ModuleVersion struct {
	Version string `json:"version"`
}

// NewDiscoveredAPINotification defines model for NewDiscoveredAPINotification.
type NewDiscoveredAPINotification struct {
	DestinationNamespace *string            `json:"destinationNamespace,omitempty"`
	ExternalSourceID     openapi_types.UUID `json:"externalSourceID"`
	HasProvidedSpec      *bool              `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool              `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32            `json:"id,omitempty"`

	// API name
	Name             *string `json:"name,omitempty"`
	NotificationType string  `json:"notificationType"`
	Port             *int    `json:"port,omitempty"`

	// Trace Source ID which created this API. 0 means it has been created by APIClarity (from the UI for example)
	TraceSourceId *uint32 `json:"traceSourceId,omitempty"`
}

// An object representing the provided and reconstructed API specs
type OpenApiSpecs struct {
	// An object containing info about a spec
	ProvidedSpec *SpecInfo `json:"providedSpec,omitempty"`

	// An object containing info about a spec
	ReconstructedSpec *SpecInfo `json:"reconstructedSpec,omitempty"`
}

// ReviewPathItem defines model for ReviewPathItem.
type ReviewPathItem struct {
	// Group of api event paths (original) that suggestedPath is representing
	ApiEventsPaths *[]ApiEventPathAndMethods `json:"apiEventsPaths,omitempty"`

	// Represents the parameterized path suggested by the engine
	SuggestedPath *string `json:"suggestedPath,omitempty"`
}

// Severity of a finding
type Severity string

// SpecDiffTime defines model for SpecDiffTime.
type SpecDiffTime struct {
	ApiEventId  *uint32    `json:"apiEventId,omitempty"`
	ApiHostName *string    `json:"apiHostName,omitempty"`
	DiffType    *DiffType  `json:"diffType,omitempty"`
	Time        *time.Time `json:"time,omitempty"`
}

// An object containing info about a spec
type SpecInfo struct {
	Tags *[]SpecTag `json:"tags,omitempty"`
}

// SpecTag defines model for SpecTag.
type SpecTag struct {
	Description       *string          `json:"description,omitempty"`
	MethodAndPathList *[]MethodAndPath `json:"methodAndPathList,omitempty"`
	Name              *string          `json:"name,omitempty"`
}

// SpecType defines model for SpecType.
type SpecType string

// An object that is return in cases of success that return nothing.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
}

// SuggestedReview defines model for SuggestedReview.
type SuggestedReview struct {
	Id              *uint32           `json:"id,omitempty"`
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// TraceSourceID as UUID
type TraceSourceExternalID struct {
	ExternalSourceID openapi_types.UUID `json:"externalSourceID"`
}

// spec in json or yaml format
type RawSpec struct {
	// spec in json or yaml format
	RawSpec *string `json:"rawSpec,omitempty"`
}

// Sensitive defines model for Sensitive.
type Sensitive = bool

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
