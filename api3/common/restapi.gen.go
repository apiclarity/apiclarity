// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AlertSeverityEnum.
const (
	ALERTCRITICAL AlertSeverityEnum = "ALERT_CRITICAL"
	ALERTINFO     AlertSeverityEnum = "ALERT_INFO"
	ALERTWARN     AlertSeverityEnum = "ALERT_WARN"
)

// Defines values for ApiEventSortKey.
const (
	ApiType         ApiEventSortKey = "apiType"
	DestinationIP   ApiEventSortKey = "destinationIP"
	DestinationPort ApiEventSortKey = "destinationPort"
	HostSpecName    ApiEventSortKey = "hostSpecName"
	Method          ApiEventSortKey = "method"
	Path            ApiEventSortKey = "path"
	SourceIP        ApiEventSortKey = "sourceIP"
	SpecDiffType    ApiEventSortKey = "specDiffType"
	StatusCode      ApiEventSortKey = "statusCode"
	Time            ApiEventSortKey = "time"
)

// Defines values for ApiInventorySortKey.
const (
	HasProvidedSpec      ApiInventorySortKey = "hasProvidedSpec"
	HasReconstructedSpec ApiInventorySortKey = "hasReconstructedSpec"
	Name                 ApiInventorySortKey = "name"
	Port                 ApiInventorySortKey = "port"
)

// Defines values for ApiTypeEnum.
const (
	EXTERNAL ApiTypeEnum = "EXTERNAL"
	INTERNAL ApiTypeEnum = "INTERNAL"
)

// Defines values for DiffType.
const (
	GENERALDIFF DiffType = "GENERAL_DIFF"
	NODIFF      DiffType = "NO_DIFF"
	SHADOWDIFF  DiffType = "SHADOW_DIFF"
	ZOMBIEDIFF  DiffType = "ZOMBIE_DIFF"
)

// Defines values for HttpMethod.
const (
	CONNECT HttpMethod = "CONNECT"
	DELETE  HttpMethod = "DELETE"
	GET     HttpMethod = "GET"
	HEAD    HttpMethod = "HEAD"
	OPTIONS HttpMethod = "OPTIONS"
	PATCH   HttpMethod = "PATCH"
	POST    HttpMethod = "POST"
	PUT     HttpMethod = "PUT"
	TRACE   HttpMethod = "TRACE"
)

// Defines values for Severity.
const (
	CRITICAL Severity = "CRITICAL"
	HIGH     Severity = "HIGH"
	INFO     Severity = "INFO"
	LOW      Severity = "LOW"
	MEDIUM   Severity = "MEDIUM"
)

// Defines values for SpecType.
const (
	NONE          SpecType = "NONE"
	PROVIDED      SpecType = "PROVIDED"
	RECONSTRUCTED SpecType = "RECONSTRUCTED"
)

// An API Finding
type APIFinding struct {
	// Could be any opaque JSON object, will be interpreted by panoptica. Basically, it's what is stored in the database
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`

	// Human readable description of the finding
	Description string `json:"description"`

	// Human readable name of the finding
	Name string `json:"name"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901
	ProvidedSpecLocation *string `json:"provided_spec_location,omitempty"`

	// JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901
	ReconstructedSpecLocation *string `json:"reconstructed_spec_location,omitempty"`

	// Severity of a finding
	Severity Severity `json:"severity"`

	// Name of the module which created this finding
	Source string `json:"source"`

	// Type of the finding
	Type string `json:"type"`
}

// A group of findings
type APIFindings struct {
	// A list of findings
	Items *[]APIFinding `json:"items,omitempty"`
}

// AlertSeverityEnum defines model for AlertSeverityEnum.
type AlertSeverityEnum string

// ApiCount defines model for ApiCount.
type ApiCount struct {
	ApiHostName *string `json:"apiHostName,omitempty"`

	// hold the relevant api info id
	ApiInfoId *uint32      `json:"apiInfoId,omitempty"`
	ApiPort   *int         `json:"apiPort,omitempty"`
	ApiType   *ApiTypeEnum `json:"apiType,omitempty"`
	NumCalls  *int         `json:"numCalls,omitempty"`
}

// ApiEvent defines model for ApiEvent.
type ApiEvent struct {
	Alerts *[]ModuleAlert `json:"alerts,omitempty"`

	// hold the relevant api spec info id
	ApiInfoId                *uint32      `json:"apiInfoId,omitempty"`
	ApiType                  *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationIP            *string      `json:"destinationIP,omitempty"`
	DestinationPort          *int         `json:"destinationPort,omitempty"`
	HasProvidedSpecDiff      *bool        `json:"hasProvidedSpecDiff,omitempty"`
	HasReconstructedSpecDiff *bool        `json:"hasReconstructedSpecDiff,omitempty"`
	HostSpecName             *string      `json:"hostSpecName,omitempty"`
	Id                       *uint32      `json:"id,omitempty"`
	Method                   *HttpMethod  `json:"method,omitempty"`
	Path                     *string      `json:"path,omitempty"`
	Query                    *string      `json:"query,omitempty"`
	RequestTime              *time.Time   `json:"requestTime,omitempty"`
	SourceIP                 *string      `json:"sourceIP,omitempty"`
	SpecDiffType             *DiffType    `json:"specDiffType,omitempty"`
	StatusCode               *int         `json:"statusCode,omitempty"`
	Time                     *time.Time   `json:"time,omitempty"`
}

// ApiEventPathAndMethods defines model for ApiEventPathAndMethods.
type ApiEventPathAndMethods struct {
	Methods *[]HttpMethod `json:"methods,omitempty"`
	Path    *string       `json:"path,omitempty"`
}

// ApiEventSortKey defines model for ApiEventSortKey.
type ApiEventSortKey string

// ApiEventSpecDiff defines model for ApiEventSpecDiff.
type ApiEventSpecDiff struct {
	DiffType *DiffType `json:"diffType,omitempty"`

	// New spec json string
	NewSpec string `json:"newSpec"`

	// Old spec json string
	OldSpec string `json:"oldSpec"`
}

// ApiFindingsNotification defines model for ApiFindingsNotification.
type ApiFindingsNotification struct {
	// A list of findings
	Items            *[]APIFinding `json:"items,omitempty"`
	NotificationType string        `json:"notificationType"`
}

// ApiID defines model for ApiID.
type ApiID = int64

// ApiInfo defines model for ApiInfo.
type ApiInfo struct {
	DestinationNamespace *string `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool   `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool   `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32 `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`
}

// ApiInfoWithType defines model for ApiInfoWithType.
type ApiInfoWithType struct {
	ApiType              *ApiTypeEnum `json:"apiType,omitempty"`
	DestinationNamespace *string      `json:"destinationNamespace,omitempty"`
	HasProvidedSpec      *bool        `json:"hasProvidedSpec,omitempty"`
	HasReconstructedSpec *bool        `json:"hasReconstructedSpec,omitempty"`
	Id                   *uint32      `json:"id,omitempty"`

	// API name
	Name *string `json:"name,omitempty"`
	Port *int    `json:"port,omitempty"`
}

// ApiInventorySortKey defines model for ApiInventorySortKey.
type ApiInventorySortKey string

// An object that is returned in all cases of failures
type ApiResponse struct {
	Message string `json:"message"`
}

// ApiTypeEnum defines model for ApiTypeEnum.
type ApiTypeEnum string

// ApiUsage defines model for ApiUsage.
type ApiUsage struct {
	NumOfCalls *int       `json:"numOfCalls"`
	Time       *time.Time `json:"time,omitempty"`
}

// ApiUsages defines model for ApiUsages.
type ApiUsages struct {
	ApisWithDiff *[]ApiUsage `json:"apisWithDiff,omitempty"`
	ExistingApis *[]ApiUsage `json:"existingApis,omitempty"`
	NewApis      *[]ApiUsage `json:"newApis,omitempty"`
}

// ApprovedReview defines model for ApprovedReview.
type ApprovedReview struct {
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// Base Notification all APIClarity notifications must extend
type BaseNotification struct {
	NotificationType string `json:"notificationType"`
}

// DiffType defines model for DiffType.
type DiffType string

// HitCount defines model for HitCount.
type HitCount struct {
	Count *int64     `json:"count"`
	Time  *time.Time `json:"time,omitempty"`
}

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// MethodAndPath defines model for MethodAndPath.
type MethodAndPath struct {
	Method *HttpMethod         `json:"method,omitempty"`
	Path   *string             `json:"path,omitempty"`
	PathId *openapi_types.UUID `json:"pathId,omitempty"`
}

// ModuleAlert defines model for ModuleAlert.
type ModuleAlert struct {
	Alert *AlertSeverityEnum `json:"alert,omitempty"`

	// Name of the module which created this alert
	ModuleName *string `json:"moduleName,omitempty"`

	// Optional description of reason of the alert
	Reason *string `json:"reason,omitempty"`
}

// ModuleVersion defines model for ModuleVersion.
type ModuleVersion struct {
	Version string `json:"version"`
}

// An object representing the provided and reconstructed API specs
type OpenApiSpecs struct {
	// An object containing info about a spec
	ProvidedSpec *SpecInfo `json:"providedSpec,omitempty"`

	// An object containing info about a spec
	ReconstructedSpec *SpecInfo `json:"reconstructedSpec,omitempty"`
}

// ReviewPathItem defines model for ReviewPathItem.
type ReviewPathItem struct {
	// Group of api event paths (original) that suggestedPath is representing
	ApiEventsPaths *[]ApiEventPathAndMethods `json:"apiEventsPaths,omitempty"`

	// Represents the parameterized path suggested by the engine
	SuggestedPath *string `json:"suggestedPath,omitempty"`
}

// Severity of a finding
type Severity string

// SpecDiffTime defines model for SpecDiffTime.
type SpecDiffTime struct {
	ApiEventId  *uint32    `json:"apiEventId,omitempty"`
	ApiHostName *string    `json:"apiHostName,omitempty"`
	DiffType    *DiffType  `json:"diffType,omitempty"`
	Time        *time.Time `json:"time,omitempty"`
}

// An object containing info about a spec
type SpecInfo struct {
	Tags *[]SpecTag `json:"tags,omitempty"`
}

// SpecTag defines model for SpecTag.
type SpecTag struct {
	Description       *string          `json:"description,omitempty"`
	MethodAndPathList *[]MethodAndPath `json:"methodAndPathList,omitempty"`
	Name              *string          `json:"name,omitempty"`
}

// SpecType defines model for SpecType.
type SpecType string

// An object that is return in cases of success that return nothing.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
}

// SuggestedReview defines model for SuggestedReview.
type SuggestedReview struct {
	Id              *uint32           `json:"id,omitempty"`
	ReviewPathItems *[]ReviewPathItem `json:"reviewPathItems,omitempty"`
}

// spec in json or yaml format
type RawSpec struct {
	// spec in json or yaml format
	RawSpec *string `json:"rawSpec,omitempty"`
}

// Sensitive defines model for Sensitive.
type Sensitive = bool

// ServerInterface represents all server handlers.
type ServerInterface interface {
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
