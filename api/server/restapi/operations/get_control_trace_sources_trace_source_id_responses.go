// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/apiclarity/api/server/models"
)

// GetControlTraceSourcesTraceSourceIDOKCode is the HTTP code returned for type GetControlTraceSourcesTraceSourceIDOK
const GetControlTraceSourcesTraceSourceIDOKCode int = 200

/*GetControlTraceSourcesTraceSourceIDOK Trace Source information

swagger:response getControlTraceSourcesTraceSourceIdOK
*/
type GetControlTraceSourcesTraceSourceIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.TraceSource `json:"body,omitempty"`
}

// NewGetControlTraceSourcesTraceSourceIDOK creates GetControlTraceSourcesTraceSourceIDOK with default headers values
func NewGetControlTraceSourcesTraceSourceIDOK() *GetControlTraceSourcesTraceSourceIDOK {

	return &GetControlTraceSourcesTraceSourceIDOK{}
}

// WithPayload adds the payload to the get control trace sources trace source Id o k response
func (o *GetControlTraceSourcesTraceSourceIDOK) WithPayload(payload *models.TraceSource) *GetControlTraceSourcesTraceSourceIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get control trace sources trace source Id o k response
func (o *GetControlTraceSourcesTraceSourceIDOK) SetPayload(payload *models.TraceSource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControlTraceSourcesTraceSourceIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetControlTraceSourcesTraceSourceIDNotFoundCode is the HTTP code returned for type GetControlTraceSourcesTraceSourceIDNotFound
const GetControlTraceSourcesTraceSourceIDNotFoundCode int = 404

/*GetControlTraceSourcesTraceSourceIDNotFound Trace Source not found

swagger:response getControlTraceSourcesTraceSourceIdNotFound
*/
type GetControlTraceSourcesTraceSourceIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetControlTraceSourcesTraceSourceIDNotFound creates GetControlTraceSourcesTraceSourceIDNotFound with default headers values
func NewGetControlTraceSourcesTraceSourceIDNotFound() *GetControlTraceSourcesTraceSourceIDNotFound {

	return &GetControlTraceSourcesTraceSourceIDNotFound{}
}

// WithPayload adds the payload to the get control trace sources trace source Id not found response
func (o *GetControlTraceSourcesTraceSourceIDNotFound) WithPayload(payload *models.APIResponse) *GetControlTraceSourcesTraceSourceIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get control trace sources trace source Id not found response
func (o *GetControlTraceSourcesTraceSourceIDNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControlTraceSourcesTraceSourceIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetControlTraceSourcesTraceSourceIDDefault unknown error

swagger:response getControlTraceSourcesTraceSourceIdDefault
*/
type GetControlTraceSourcesTraceSourceIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetControlTraceSourcesTraceSourceIDDefault creates GetControlTraceSourcesTraceSourceIDDefault with default headers values
func NewGetControlTraceSourcesTraceSourceIDDefault(code int) *GetControlTraceSourcesTraceSourceIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetControlTraceSourcesTraceSourceIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get control trace sources trace source ID default response
func (o *GetControlTraceSourcesTraceSourceIDDefault) WithStatusCode(code int) *GetControlTraceSourcesTraceSourceIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get control trace sources trace source ID default response
func (o *GetControlTraceSourcesTraceSourceIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get control trace sources trace source ID default response
func (o *GetControlTraceSourcesTraceSourceIDDefault) WithPayload(payload *models.APIResponse) *GetControlTraceSourcesTraceSourceIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get control trace sources trace source ID default response
func (o *GetControlTraceSourcesTraceSourceIDDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetControlTraceSourcesTraceSourceIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
