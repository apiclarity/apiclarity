// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostModulesSpecReconstructionAPIIDStopHandlerFunc turns a function with the right signature into a post modules spec reconstruction API ID stop handler
type PostModulesSpecReconstructionAPIIDStopHandlerFunc func(PostModulesSpecReconstructionAPIIDStopParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostModulesSpecReconstructionAPIIDStopHandlerFunc) Handle(params PostModulesSpecReconstructionAPIIDStopParams) middleware.Responder {
	return fn(params)
}

// PostModulesSpecReconstructionAPIIDStopHandler interface for that can handle valid post modules spec reconstruction API ID stop params
type PostModulesSpecReconstructionAPIIDStopHandler interface {
	Handle(PostModulesSpecReconstructionAPIIDStopParams) middleware.Responder
}

// NewPostModulesSpecReconstructionAPIIDStop creates a new http.Handler for the post modules spec reconstruction API ID stop operation
func NewPostModulesSpecReconstructionAPIIDStop(ctx *middleware.Context, handler PostModulesSpecReconstructionAPIIDStopHandler) *PostModulesSpecReconstructionAPIIDStop {
	return &PostModulesSpecReconstructionAPIIDStop{Context: ctx, Handler: handler}
}

/* PostModulesSpecReconstructionAPIIDStop swagger:route POST /modules/spec_reconstruction/{apiId}/stop postModulesSpecReconstructionApiIdStop

Stop the spec reconstruction for this API.

Stop the spec reconstruction for this API.

*/
type PostModulesSpecReconstructionAPIIDStop struct {
	Context *middleware.Context
	Handler PostModulesSpecReconstructionAPIIDStopHandler
}

func (o *PostModulesSpecReconstructionAPIIDStop) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostModulesSpecReconstructionAPIIDStopParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
