// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetControlTraceSourcesTraceSourceIDHandlerFunc turns a function with the right signature into a get control trace sources trace source ID handler
type GetControlTraceSourcesTraceSourceIDHandlerFunc func(GetControlTraceSourcesTraceSourceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetControlTraceSourcesTraceSourceIDHandlerFunc) Handle(params GetControlTraceSourcesTraceSourceIDParams) middleware.Responder {
	return fn(params)
}

// GetControlTraceSourcesTraceSourceIDHandler interface for that can handle valid get control trace sources trace source ID params
type GetControlTraceSourcesTraceSourceIDHandler interface {
	Handle(GetControlTraceSourcesTraceSourceIDParams) middleware.Responder
}

// NewGetControlTraceSourcesTraceSourceID creates a new http.Handler for the get control trace sources trace source ID operation
func NewGetControlTraceSourcesTraceSourceID(ctx *middleware.Context, handler GetControlTraceSourcesTraceSourceIDHandler) *GetControlTraceSourcesTraceSourceID {
	return &GetControlTraceSourcesTraceSourceID{Context: ctx, Handler: handler}
}

/* GetControlTraceSourcesTraceSourceID swagger:route GET /control/traceSources/{traceSourceId} getControlTraceSourcesTraceSourceId

Get Trace Source information

*/
type GetControlTraceSourcesTraceSourceID struct {
	Context *middleware.Context
	Handler GetControlTraceSourcesTraceSourceIDHandler
}

func (o *GetControlTraceSourcesTraceSourceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetControlTraceSourcesTraceSourceIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
