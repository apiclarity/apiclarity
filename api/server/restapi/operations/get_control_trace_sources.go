// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openclarity/apiclarity/api/server/models"
)

// GetControlTraceSourcesHandlerFunc turns a function with the right signature into a get control trace sources handler
type GetControlTraceSourcesHandlerFunc func(GetControlTraceSourcesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetControlTraceSourcesHandlerFunc) Handle(params GetControlTraceSourcesParams) middleware.Responder {
	return fn(params)
}

// GetControlTraceSourcesHandler interface for that can handle valid get control trace sources params
type GetControlTraceSourcesHandler interface {
	Handle(GetControlTraceSourcesParams) middleware.Responder
}

// NewGetControlTraceSources creates a new http.Handler for the get control trace sources operation
func NewGetControlTraceSources(ctx *middleware.Context, handler GetControlTraceSourcesHandler) *GetControlTraceSources {
	return &GetControlTraceSources{Context: ctx, Handler: handler}
}

/* GetControlTraceSources swagger:route GET /control/traceSources getControlTraceSources

List of configured trace sources

*/
type GetControlTraceSources struct {
	Context *middleware.Context
	Handler GetControlTraceSourcesHandler
}

func (o *GetControlTraceSources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetControlTraceSourcesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetControlTraceSourcesOKBody get control trace sources o k body
//
// swagger:model GetControlTraceSourcesOKBody
type GetControlTraceSourcesOKBody struct {

	// List of trace sources
	// Required: true
	TraceSources []*models.TraceSource `json:"trace_sources"`
}

// Validate validates this get control trace sources o k body
func (o *GetControlTraceSourcesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTraceSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlTraceSourcesOKBody) validateTraceSources(formats strfmt.Registry) error {

	if err := validate.Required("getControlTraceSourcesOK"+"."+"trace_sources", "body", o.TraceSources); err != nil {
		return err
	}

	for i := 0; i < len(o.TraceSources); i++ {
		if swag.IsZero(o.TraceSources[i]) { // not required
			continue
		}

		if o.TraceSources[i] != nil {
			if err := o.TraceSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlTraceSourcesOK" + "." + "trace_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get control trace sources o k body based on the context it is used
func (o *GetControlTraceSourcesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTraceSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlTraceSourcesOKBody) contextValidateTraceSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TraceSources); i++ {

		if o.TraceSources[i] != nil {
			if err := o.TraceSources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlTraceSourcesOK" + "." + "trace_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetControlTraceSourcesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetControlTraceSourcesOKBody) UnmarshalBinary(b []byte) error {
	var res GetControlTraceSourcesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
