// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateAPIInfo create Api info
//
// swagger:model CreateApiInfo
type CreateAPIInfo struct {

	// api type
	APIType APIType `json:"apiType,omitempty"`

	// API name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`
}

// Validate validates this create Api info
func (m *CreateAPIInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAPIInfo) validateAPIType(formats strfmt.Registry) error {
	if swag.IsZero(m.APIType) { // not required
		return nil
	}

	if err := m.APIType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this create Api info based on the context it is used
func (m *CreateAPIInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAPIInfo) contextValidateAPIType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.APIType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("apiType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAPIInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAPIInfo) UnmarshalBinary(b []byte) error {
	var res CreateAPIInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
