// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TraceSourceType trace source type
//
// swagger:model TraceSourceType
type TraceSourceType string

func NewTraceSourceType(value TraceSourceType) *TraceSourceType {
	v := value
	return &v
}

const (

	// TraceSourceTypeTYK captures enum value "TYK"
	TraceSourceTypeTYK TraceSourceType = "TYK"

	// TraceSourceTypeKONG captures enum value "KONG"
	TraceSourceTypeKONG TraceSourceType = "KONG"

	// TraceSourceTypeAPIGEEX captures enum value "APIGEEX"
	TraceSourceTypeAPIGEEX TraceSourceType = "APIGEEX"
)

// for schema
var traceSourceTypeEnum []interface{}

func init() {
	var res []TraceSourceType
	if err := json.Unmarshal([]byte(`["TYK","KONG","APIGEEX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		traceSourceTypeEnum = append(traceSourceTypeEnum, v)
	}
}

func (m TraceSourceType) validateTraceSourceTypeEnum(path, location string, value TraceSourceType) error {
	if err := validate.EnumCase(path, location, value, traceSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this trace source type
func (m TraceSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTraceSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this trace source type based on context it is used
func (m TraceSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
