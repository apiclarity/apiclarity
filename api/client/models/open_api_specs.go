// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenAPISpecs An object representing the provided and reconstructed API specs
//
// swagger:model OpenApiSpecs
type OpenAPISpecs struct {

	// provided spec
	ProvidedSpec *SpecInfo `json:"providedSpec,omitempty"`

	// reconstructed spec
	ReconstructedSpec *SpecInfo `json:"reconstructedSpec,omitempty"`
}

// Validate validates this open Api specs
func (m *OpenAPISpecs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvidedSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReconstructedSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecs) validateProvidedSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedSpec) { // not required
		return nil
	}

	if m.ProvidedSpec != nil {
		if err := m.ProvidedSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providedSpec")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecs) validateReconstructedSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ReconstructedSpec) { // not required
		return nil
	}

	if m.ReconstructedSpec != nil {
		if err := m.ReconstructedSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reconstructedSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this open Api specs based on the context it is used
func (m *OpenAPISpecs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvidedSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReconstructedSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenAPISpecs) contextValidateProvidedSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvidedSpec != nil {
		if err := m.ProvidedSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providedSpec")
			}
			return err
		}
	}

	return nil
}

func (m *OpenAPISpecs) contextValidateReconstructedSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ReconstructedSpec != nil {
		if err := m.ReconstructedSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reconstructedSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenAPISpecs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenAPISpecs) UnmarshalBinary(b []byte) error {
	var res OpenAPISpecs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
