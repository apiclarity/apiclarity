// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIUsages Api usages
//
// swagger:model ApiUsages
type APIUsages struct {

	// apis with diff
	ApisWithDiff []*APIUsage `json:"apisWithDiff"`

	// existing apis
	ExistingApis []*APIUsage `json:"existingApis"`

	// new apis
	NewApis []*APIUsage `json:"newApis"`
}

// Validate validates this Api usages
func (m *APIUsages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApisWithDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewApis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIUsages) validateApisWithDiff(formats strfmt.Registry) error {
	if swag.IsZero(m.ApisWithDiff) { // not required
		return nil
	}

	for i := 0; i < len(m.ApisWithDiff); i++ {
		if swag.IsZero(m.ApisWithDiff[i]) { // not required
			continue
		}

		if m.ApisWithDiff[i] != nil {
			if err := m.ApisWithDiff[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apisWithDiff" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIUsages) validateExistingApis(formats strfmt.Registry) error {
	if swag.IsZero(m.ExistingApis) { // not required
		return nil
	}

	for i := 0; i < len(m.ExistingApis); i++ {
		if swag.IsZero(m.ExistingApis[i]) { // not required
			continue
		}

		if m.ExistingApis[i] != nil {
			if err := m.ExistingApis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("existingApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIUsages) validateNewApis(formats strfmt.Registry) error {
	if swag.IsZero(m.NewApis) { // not required
		return nil
	}

	for i := 0; i < len(m.NewApis); i++ {
		if swag.IsZero(m.NewApis[i]) { // not required
			continue
		}

		if m.NewApis[i] != nil {
			if err := m.NewApis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Api usages based on the context it is used
func (m *APIUsages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApisWithDiff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExistingApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIUsages) contextValidateApisWithDiff(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApisWithDiff); i++ {

		if m.ApisWithDiff[i] != nil {
			if err := m.ApisWithDiff[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apisWithDiff" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIUsages) contextValidateExistingApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExistingApis); i++ {

		if m.ExistingApis[i] != nil {
			if err := m.ExistingApis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("existingApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIUsages) contextValidateNewApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewApis); i++ {

		if m.NewApis[i] != nil {
			if err := m.NewApis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newApis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIUsages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIUsages) UnmarshalBinary(b []byte) error {
	var res APIUsages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
