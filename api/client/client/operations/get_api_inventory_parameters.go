// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIInventoryParams creates a new GetAPIInventoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIInventoryParams() *GetAPIInventoryParams {
	return &GetAPIInventoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIInventoryParamsWithTimeout creates a new GetAPIInventoryParams object
// with the ability to set a timeout on a request.
func NewGetAPIInventoryParamsWithTimeout(timeout time.Duration) *GetAPIInventoryParams {
	return &GetAPIInventoryParams{
		timeout: timeout,
	}
}

// NewGetAPIInventoryParamsWithContext creates a new GetAPIInventoryParams object
// with the ability to set a context for a request.
func NewGetAPIInventoryParamsWithContext(ctx context.Context) *GetAPIInventoryParams {
	return &GetAPIInventoryParams{
		Context: ctx,
	}
}

// NewGetAPIInventoryParamsWithHTTPClient creates a new GetAPIInventoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIInventoryParamsWithHTTPClient(client *http.Client) *GetAPIInventoryParams {
	return &GetAPIInventoryParams{
		HTTPClient: client,
	}
}

/* GetAPIInventoryParams contains all the parameters to send to the API endpoint
   for the get API inventory operation.

   Typically these are written to a http.Request.
*/
type GetAPIInventoryParams struct {

	/* APIID.

	   api id to return
	*/
	APIID *string

	// HasProvidedSpecIs.
	HasProvidedSpecIs *bool

	// HasReconstructedSpecIs.
	HasReconstructedSpecIs *bool

	// NameContains.
	NameContains []string

	// NameEnd.
	NameEnd *string

	// NameIsNot.
	NameIsNot []string

	// NameIs.
	NameIs []string

	// NameStart.
	NameStart *string

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	// PortIsNot.
	PortIsNot []string

	// PortIs.
	PortIs []string

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	/* Type.

	   API type [INTERNAL or EXTERNAL]
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIInventoryParams) WithDefaults() *GetAPIInventoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API inventory params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIInventoryParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetAPIInventoryParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API inventory params
func (o *GetAPIInventoryParams) WithTimeout(timeout time.Duration) *GetAPIInventoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API inventory params
func (o *GetAPIInventoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API inventory params
func (o *GetAPIInventoryParams) WithContext(ctx context.Context) *GetAPIInventoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API inventory params
func (o *GetAPIInventoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API inventory params
func (o *GetAPIInventoryParams) WithHTTPClient(client *http.Client) *GetAPIInventoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API inventory params
func (o *GetAPIInventoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIID adds the aPIID to the get API inventory params
func (o *GetAPIInventoryParams) WithAPIID(aPIID *string) *GetAPIInventoryParams {
	o.SetAPIID(aPIID)
	return o
}

// SetAPIID adds the apiId to the get API inventory params
func (o *GetAPIInventoryParams) SetAPIID(aPIID *string) {
	o.APIID = aPIID
}

// WithHasProvidedSpecIs adds the hasProvidedSpecIs to the get API inventory params
func (o *GetAPIInventoryParams) WithHasProvidedSpecIs(hasProvidedSpecIs *bool) *GetAPIInventoryParams {
	o.SetHasProvidedSpecIs(hasProvidedSpecIs)
	return o
}

// SetHasProvidedSpecIs adds the hasProvidedSpecIs to the get API inventory params
func (o *GetAPIInventoryParams) SetHasProvidedSpecIs(hasProvidedSpecIs *bool) {
	o.HasProvidedSpecIs = hasProvidedSpecIs
}

// WithHasReconstructedSpecIs adds the hasReconstructedSpecIs to the get API inventory params
func (o *GetAPIInventoryParams) WithHasReconstructedSpecIs(hasReconstructedSpecIs *bool) *GetAPIInventoryParams {
	o.SetHasReconstructedSpecIs(hasReconstructedSpecIs)
	return o
}

// SetHasReconstructedSpecIs adds the hasReconstructedSpecIs to the get API inventory params
func (o *GetAPIInventoryParams) SetHasReconstructedSpecIs(hasReconstructedSpecIs *bool) {
	o.HasReconstructedSpecIs = hasReconstructedSpecIs
}

// WithNameContains adds the nameContains to the get API inventory params
func (o *GetAPIInventoryParams) WithNameContains(nameContains []string) *GetAPIInventoryParams {
	o.SetNameContains(nameContains)
	return o
}

// SetNameContains adds the nameContains to the get API inventory params
func (o *GetAPIInventoryParams) SetNameContains(nameContains []string) {
	o.NameContains = nameContains
}

// WithNameEnd adds the nameEnd to the get API inventory params
func (o *GetAPIInventoryParams) WithNameEnd(nameEnd *string) *GetAPIInventoryParams {
	o.SetNameEnd(nameEnd)
	return o
}

// SetNameEnd adds the nameEnd to the get API inventory params
func (o *GetAPIInventoryParams) SetNameEnd(nameEnd *string) {
	o.NameEnd = nameEnd
}

// WithNameIsNot adds the nameIsNot to the get API inventory params
func (o *GetAPIInventoryParams) WithNameIsNot(nameIsNot []string) *GetAPIInventoryParams {
	o.SetNameIsNot(nameIsNot)
	return o
}

// SetNameIsNot adds the nameIsNot to the get API inventory params
func (o *GetAPIInventoryParams) SetNameIsNot(nameIsNot []string) {
	o.NameIsNot = nameIsNot
}

// WithNameIs adds the nameIs to the get API inventory params
func (o *GetAPIInventoryParams) WithNameIs(nameIs []string) *GetAPIInventoryParams {
	o.SetNameIs(nameIs)
	return o
}

// SetNameIs adds the nameIs to the get API inventory params
func (o *GetAPIInventoryParams) SetNameIs(nameIs []string) {
	o.NameIs = nameIs
}

// WithNameStart adds the nameStart to the get API inventory params
func (o *GetAPIInventoryParams) WithNameStart(nameStart *string) *GetAPIInventoryParams {
	o.SetNameStart(nameStart)
	return o
}

// SetNameStart adds the nameStart to the get API inventory params
func (o *GetAPIInventoryParams) SetNameStart(nameStart *string) {
	o.NameStart = nameStart
}

// WithPage adds the page to the get API inventory params
func (o *GetAPIInventoryParams) WithPage(page int64) *GetAPIInventoryParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get API inventory params
func (o *GetAPIInventoryParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get API inventory params
func (o *GetAPIInventoryParams) WithPageSize(pageSize int64) *GetAPIInventoryParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get API inventory params
func (o *GetAPIInventoryParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithPortIsNot adds the portIsNot to the get API inventory params
func (o *GetAPIInventoryParams) WithPortIsNot(portIsNot []string) *GetAPIInventoryParams {
	o.SetPortIsNot(portIsNot)
	return o
}

// SetPortIsNot adds the portIsNot to the get API inventory params
func (o *GetAPIInventoryParams) SetPortIsNot(portIsNot []string) {
	o.PortIsNot = portIsNot
}

// WithPortIs adds the portIs to the get API inventory params
func (o *GetAPIInventoryParams) WithPortIs(portIs []string) *GetAPIInventoryParams {
	o.SetPortIs(portIs)
	return o
}

// SetPortIs adds the portIs to the get API inventory params
func (o *GetAPIInventoryParams) SetPortIs(portIs []string) {
	o.PortIs = portIs
}

// WithSortDir adds the sortDir to the get API inventory params
func (o *GetAPIInventoryParams) WithSortDir(sortDir *string) *GetAPIInventoryParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get API inventory params
func (o *GetAPIInventoryParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get API inventory params
func (o *GetAPIInventoryParams) WithSortKey(sortKey string) *GetAPIInventoryParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get API inventory params
func (o *GetAPIInventoryParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WithType adds the typeVar to the get API inventory params
func (o *GetAPIInventoryParams) WithType(typeVar string) *GetAPIInventoryParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get API inventory params
func (o *GetAPIInventoryParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIInventoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIID != nil {

		// query param apiId
		var qrAPIID string

		if o.APIID != nil {
			qrAPIID = *o.APIID
		}
		qAPIID := qrAPIID
		if qAPIID != "" {

			if err := r.SetQueryParam("apiId", qAPIID); err != nil {
				return err
			}
		}
	}

	if o.HasProvidedSpecIs != nil {

		// query param hasProvidedSpec[is]
		var qrHasProvidedSpecIs bool

		if o.HasProvidedSpecIs != nil {
			qrHasProvidedSpecIs = *o.HasProvidedSpecIs
		}
		qHasProvidedSpecIs := swag.FormatBool(qrHasProvidedSpecIs)
		if qHasProvidedSpecIs != "" {

			if err := r.SetQueryParam("hasProvidedSpec[is]", qHasProvidedSpecIs); err != nil {
				return err
			}
		}
	}

	if o.HasReconstructedSpecIs != nil {

		// query param hasReconstructedSpec[is]
		var qrHasReconstructedSpecIs bool

		if o.HasReconstructedSpecIs != nil {
			qrHasReconstructedSpecIs = *o.HasReconstructedSpecIs
		}
		qHasReconstructedSpecIs := swag.FormatBool(qrHasReconstructedSpecIs)
		if qHasReconstructedSpecIs != "" {

			if err := r.SetQueryParam("hasReconstructedSpec[is]", qHasReconstructedSpecIs); err != nil {
				return err
			}
		}
	}

	if o.NameContains != nil {

		// binding items for name[contains]
		joinedNameContains := o.bindParamNameContains(reg)

		// query array param name[contains]
		if err := r.SetQueryParam("name[contains]", joinedNameContains...); err != nil {
			return err
		}
	}

	if o.NameEnd != nil {

		// query param name[end]
		var qrNameEnd string

		if o.NameEnd != nil {
			qrNameEnd = *o.NameEnd
		}
		qNameEnd := qrNameEnd
		if qNameEnd != "" {

			if err := r.SetQueryParam("name[end]", qNameEnd); err != nil {
				return err
			}
		}
	}

	if o.NameIsNot != nil {

		// binding items for name[isNot]
		joinedNameIsNot := o.bindParamNameIsNot(reg)

		// query array param name[isNot]
		if err := r.SetQueryParam("name[isNot]", joinedNameIsNot...); err != nil {
			return err
		}
	}

	if o.NameIs != nil {

		// binding items for name[is]
		joinedNameIs := o.bindParamNameIs(reg)

		// query array param name[is]
		if err := r.SetQueryParam("name[is]", joinedNameIs...); err != nil {
			return err
		}
	}

	if o.NameStart != nil {

		// query param name[start]
		var qrNameStart string

		if o.NameStart != nil {
			qrNameStart = *o.NameStart
		}
		qNameStart := qrNameStart
		if qNameStart != "" {

			if err := r.SetQueryParam("name[start]", qNameStart); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.PortIsNot != nil {

		// binding items for port[isNot]
		joinedPortIsNot := o.bindParamPortIsNot(reg)

		// query array param port[isNot]
		if err := r.SetQueryParam("port[isNot]", joinedPortIsNot...); err != nil {
			return err
		}
	}

	if o.PortIs != nil {

		// binding items for port[is]
		joinedPortIs := o.bindParamPortIs(reg)

		// query array param port[is]
		if err := r.SetQueryParam("port[is]", joinedPortIs...); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAPIInventory binds the parameter name[contains]
func (o *GetAPIInventoryParams) bindParamNameContains(formats strfmt.Registry) []string {
	nameContainsIR := o.NameContains

	var nameContainsIC []string
	for _, nameContainsIIR := range nameContainsIR { // explode []string

		nameContainsIIV := nameContainsIIR // string as string
		nameContainsIC = append(nameContainsIC, nameContainsIIV)
	}

	// items.CollectionFormat: ""
	nameContainsIS := swag.JoinByFormat(nameContainsIC, "")

	return nameContainsIS
}

// bindParamGetAPIInventory binds the parameter name[isNot]
func (o *GetAPIInventoryParams) bindParamNameIsNot(formats strfmt.Registry) []string {
	nameIsNotIR := o.NameIsNot

	var nameIsNotIC []string
	for _, nameIsNotIIR := range nameIsNotIR { // explode []string

		nameIsNotIIV := nameIsNotIIR // string as string
		nameIsNotIC = append(nameIsNotIC, nameIsNotIIV)
	}

	// items.CollectionFormat: ""
	nameIsNotIS := swag.JoinByFormat(nameIsNotIC, "")

	return nameIsNotIS
}

// bindParamGetAPIInventory binds the parameter name[is]
func (o *GetAPIInventoryParams) bindParamNameIs(formats strfmt.Registry) []string {
	nameIsIR := o.NameIs

	var nameIsIC []string
	for _, nameIsIIR := range nameIsIR { // explode []string

		nameIsIIV := nameIsIIR // string as string
		nameIsIC = append(nameIsIC, nameIsIIV)
	}

	// items.CollectionFormat: ""
	nameIsIS := swag.JoinByFormat(nameIsIC, "")

	return nameIsIS
}

// bindParamGetAPIInventory binds the parameter port[isNot]
func (o *GetAPIInventoryParams) bindParamPortIsNot(formats strfmt.Registry) []string {
	portIsNotIR := o.PortIsNot

	var portIsNotIC []string
	for _, portIsNotIIR := range portIsNotIR { // explode []string

		portIsNotIIV := portIsNotIIR // string as string
		portIsNotIC = append(portIsNotIC, portIsNotIIV)
	}

	// items.CollectionFormat: ""
	portIsNotIS := swag.JoinByFormat(portIsNotIC, "")

	return portIsNotIS
}

// bindParamGetAPIInventory binds the parameter port[is]
func (o *GetAPIInventoryParams) bindParamPortIs(formats strfmt.Registry) []string {
	portIsIR := o.PortIs

	var portIsIC []string
	for _, portIsIIR := range portIsIR { // explode []string

		portIsIIV := portIsIIR // string as string
		portIsIC = append(portIsIC, portIsIIV)
	}

	// items.CollectionFormat: ""
	portIsIS := swag.JoinByFormat(portIsIC, "")

	return portIsIS
}
