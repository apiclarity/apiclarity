// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openclarity/apiclarity/api/client/models"
)

// GetControlGatewaysReader is a Reader for the GetControlGateways structure.
type GetControlGatewaysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetControlGatewaysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetControlGatewaysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetControlGatewaysDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetControlGatewaysOK creates a GetControlGatewaysOK with default headers values
func NewGetControlGatewaysOK() *GetControlGatewaysOK {
	return &GetControlGatewaysOK{}
}

/* GetControlGatewaysOK describes a response with status code 200, with default header values.

Success
*/
type GetControlGatewaysOK struct {
	Payload *GetControlGatewaysOKBody
}

func (o *GetControlGatewaysOK) Error() string {
	return fmt.Sprintf("[GET /control/gateways][%d] getControlGatewaysOK  %+v", 200, o.Payload)
}
func (o *GetControlGatewaysOK) GetPayload() *GetControlGatewaysOKBody {
	return o.Payload
}

func (o *GetControlGatewaysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetControlGatewaysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetControlGatewaysDefault creates a GetControlGatewaysDefault with default headers values
func NewGetControlGatewaysDefault(code int) *GetControlGatewaysDefault {
	return &GetControlGatewaysDefault{
		_statusCode: code,
	}
}

/* GetControlGatewaysDefault describes a response with status code -1, with default header values.

unknown error
*/
type GetControlGatewaysDefault struct {
	_statusCode int

	Payload *models.APIResponse
}

// Code gets the status code for the get control gateways default response
func (o *GetControlGatewaysDefault) Code() int {
	return o._statusCode
}

func (o *GetControlGatewaysDefault) Error() string {
	return fmt.Sprintf("[GET /control/gateways][%d] GetControlGateways default  %+v", o._statusCode, o.Payload)
}
func (o *GetControlGatewaysDefault) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *GetControlGatewaysDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetControlGatewaysOKBody get control gateways o k body
swagger:model GetControlGatewaysOKBody
*/
type GetControlGatewaysOKBody struct {

	// List of gateways
	// Required: true
	Gateways []*models.APIGateway `json:"gateways"`
}

// Validate validates this get control gateways o k body
func (o *GetControlGatewaysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGateways(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlGatewaysOKBody) validateGateways(formats strfmt.Registry) error {

	if err := validate.Required("getControlGatewaysOK"+"."+"gateways", "body", o.Gateways); err != nil {
		return err
	}

	for i := 0; i < len(o.Gateways); i++ {
		if swag.IsZero(o.Gateways[i]) { // not required
			continue
		}

		if o.Gateways[i] != nil {
			if err := o.Gateways[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlGatewaysOK" + "." + "gateways" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get control gateways o k body based on the context it is used
func (o *GetControlGatewaysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGateways(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlGatewaysOKBody) contextValidateGateways(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Gateways); i++ {

		if o.Gateways[i] != nil {
			if err := o.Gateways[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlGatewaysOK" + "." + "gateways" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetControlGatewaysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetControlGatewaysOKBody) UnmarshalBinary(b []byte) error {
	var res GetControlGatewaysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
