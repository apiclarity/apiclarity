// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openclarity/apiclarity/api/client/models"
)

// GetAPIEventsReader is a Reader for the GetAPIEvents structure.
type GetAPIEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetAPIEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAPIEventsOK creates a GetAPIEventsOK with default headers values
func NewGetAPIEventsOK() *GetAPIEventsOK {
	return &GetAPIEventsOK{}
}

/* GetAPIEventsOK describes a response with status code 200, with default header values.

Success
*/
type GetAPIEventsOK struct {
	Payload *GetAPIEventsOKBody
}

func (o *GetAPIEventsOK) Error() string {
	return fmt.Sprintf("[GET /apiEvents][%d] getApiEventsOK  %+v", 200, o.Payload)
}
func (o *GetAPIEventsOK) GetPayload() *GetAPIEventsOKBody {
	return o.Payload
}

func (o *GetAPIEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAPIEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIEventsDefault creates a GetAPIEventsDefault with default headers values
func NewGetAPIEventsDefault(code int) *GetAPIEventsDefault {
	return &GetAPIEventsDefault{
		_statusCode: code,
	}
}

/* GetAPIEventsDefault describes a response with status code -1, with default header values.

unknown error
*/
type GetAPIEventsDefault struct {
	_statusCode int

	Payload *models.APIResponse
}

// Code gets the status code for the get API events default response
func (o *GetAPIEventsDefault) Code() int {
	return o._statusCode
}

func (o *GetAPIEventsDefault) Error() string {
	return fmt.Sprintf("[GET /apiEvents][%d] GetAPIEvents default  %+v", o._statusCode, o.Payload)
}
func (o *GetAPIEventsDefault) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *GetAPIEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAPIEventsOKBody get API events o k body
swagger:model GetAPIEventsOKBody
*/
type GetAPIEventsOKBody struct {

	// List of API events in the given time range, filters and page. List length must be lower or equal to pageSize
	Items []*models.APIEvent `json:"items"`

	// Total events count in the given time range and filters
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this get API events o k body
func (o *GetAPIEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIEventsOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiEventsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAPIEventsOKBody) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("getApiEventsOK"+"."+"total", "body", o.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get API events o k body based on the context it is used
func (o *GetAPIEventsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIEventsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiEventsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIEventsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAPIEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
