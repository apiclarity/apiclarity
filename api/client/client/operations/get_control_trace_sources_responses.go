// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openclarity/apiclarity/api/client/models"
)

// GetControlTraceSourcesReader is a Reader for the GetControlTraceSources structure.
type GetControlTraceSourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetControlTraceSourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetControlTraceSourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetControlTraceSourcesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetControlTraceSourcesOK creates a GetControlTraceSourcesOK with default headers values
func NewGetControlTraceSourcesOK() *GetControlTraceSourcesOK {
	return &GetControlTraceSourcesOK{}
}

/* GetControlTraceSourcesOK describes a response with status code 200, with default header values.

Success
*/
type GetControlTraceSourcesOK struct {
	Payload *GetControlTraceSourcesOKBody
}

func (o *GetControlTraceSourcesOK) Error() string {
	return fmt.Sprintf("[GET /control/traceSources][%d] getControlTraceSourcesOK  %+v", 200, o.Payload)
}
func (o *GetControlTraceSourcesOK) GetPayload() *GetControlTraceSourcesOKBody {
	return o.Payload
}

func (o *GetControlTraceSourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetControlTraceSourcesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetControlTraceSourcesDefault creates a GetControlTraceSourcesDefault with default headers values
func NewGetControlTraceSourcesDefault(code int) *GetControlTraceSourcesDefault {
	return &GetControlTraceSourcesDefault{
		_statusCode: code,
	}
}

/* GetControlTraceSourcesDefault describes a response with status code -1, with default header values.

unknown error
*/
type GetControlTraceSourcesDefault struct {
	_statusCode int

	Payload *models.APIResponse
}

// Code gets the status code for the get control trace sources default response
func (o *GetControlTraceSourcesDefault) Code() int {
	return o._statusCode
}

func (o *GetControlTraceSourcesDefault) Error() string {
	return fmt.Sprintf("[GET /control/traceSources][%d] GetControlTraceSources default  %+v", o._statusCode, o.Payload)
}
func (o *GetControlTraceSourcesDefault) GetPayload() *models.APIResponse {
	return o.Payload
}

func (o *GetControlTraceSourcesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetControlTraceSourcesOKBody get control trace sources o k body
swagger:model GetControlTraceSourcesOKBody
*/
type GetControlTraceSourcesOKBody struct {

	// List of trace sources
	// Required: true
	TraceSources []*models.TraceSource `json:"trace_sources"`
}

// Validate validates this get control trace sources o k body
func (o *GetControlTraceSourcesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTraceSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlTraceSourcesOKBody) validateTraceSources(formats strfmt.Registry) error {

	if err := validate.Required("getControlTraceSourcesOK"+"."+"trace_sources", "body", o.TraceSources); err != nil {
		return err
	}

	for i := 0; i < len(o.TraceSources); i++ {
		if swag.IsZero(o.TraceSources[i]) { // not required
			continue
		}

		if o.TraceSources[i] != nil {
			if err := o.TraceSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlTraceSourcesOK" + "." + "trace_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get control trace sources o k body based on the context it is used
func (o *GetControlTraceSourcesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTraceSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetControlTraceSourcesOKBody) contextValidateTraceSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TraceSources); i++ {

		if o.TraceSources[i] != nil {
			if err := o.TraceSources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getControlTraceSourcesOK" + "." + "trace_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetControlTraceSourcesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetControlTraceSourcesOKBody) UnmarshalBinary(b []byte) error {
	var res GetControlTraceSourcesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
